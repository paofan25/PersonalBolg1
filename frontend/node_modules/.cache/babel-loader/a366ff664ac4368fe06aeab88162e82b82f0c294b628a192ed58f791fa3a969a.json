{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst DESSERTS = [{\n  name: '草莓蛋糕',\n  image: require('@/assets/images/games/desserts/cake.png')\n}, {\n  name: '马卡龙',\n  image: require('@/assets/images/games/desserts/macaron.png')\n}, {\n  name: '甜甜圈',\n  image: require('@/assets/images/games/desserts/donut.png')\n}, {\n  name: '冰淇淋',\n  image: require('@/assets/images/games/desserts/icecream.png')\n}, {\n  name: '布丁',\n  image: require('@/assets/images/games/desserts/pudding.png')\n}, {\n  name: '奶茶',\n  image: require('@/assets/images/games/desserts/bubbletea.png')\n}];\nexport default {\n  name: 'MemoryGame',\n  data() {\n    return {\n      cards: [],\n      flippedCards: [],\n      canFlip: true,\n      moves: 0,\n      time: 0,\n      score: 0,\n      timer: null,\n      showVictory: false,\n      matchedPairs: 0\n    };\n  },\n  created() {\n    this.initGame();\n  },\n  beforeUnmount() {\n    this.stopTimer();\n  },\n  methods: {\n    initGame() {\n      // 创建配对卡片\n      this.cards = [...DESSERTS, ...DESSERTS].map((dessert, index) => ({\n        ...dessert,\n        id: index,\n        isFlipped: false,\n        isMatched: false\n      })).sort(() => Math.random() - 0.5);\n      this.flippedCards = [];\n      this.moves = 0;\n      this.time = 0;\n      this.score = 0;\n      this.showVictory = false;\n      this.matchedPairs = 0;\n      this.canFlip = true;\n      this.startTimer();\n    },\n    startTimer() {\n      this.stopTimer();\n      this.timer = setInterval(() => {\n        this.time++;\n      }, 1000);\n    },\n    stopTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    formatTime(seconds) {\n      const mins = Math.floor(seconds / 60);\n      const secs = seconds % 60;\n      return `${mins}:${secs.toString().padStart(2, '0')}`;\n    },\n    async flipCard(index) {\n      if (!this.canFlip || this.cards[index].isFlipped || this.cards[index].isMatched) {\n        return;\n      }\n      this.cards[index].isFlipped = true;\n      this.flippedCards.push(index);\n      if (this.flippedCards.length === 2) {\n        this.moves++;\n        this.canFlip = false;\n        const [firstIndex, secondIndex] = this.flippedCards;\n        const firstCard = this.cards[firstIndex];\n        const secondCard = this.cards[secondIndex];\n        if (firstCard.name === secondCard.name) {\n          // 匹配成功\n          await this.handleMatch(firstIndex, secondIndex);\n        } else {\n          // 匹配失败\n          await this.handleMismatch(firstIndex, secondIndex);\n        }\n        this.flippedCards = [];\n        this.canFlip = true;\n      }\n    },\n    async handleMatch(firstIndex, secondIndex) {\n      // 播放成功音效\n      const audio = new Audio(require('@/assets/audio/match.mp3'));\n      audio.play();\n\n      // 添加匹配动画\n      this.cards[firstIndex].isMatched = true;\n      this.cards[secondIndex].isMatched = true;\n\n      // 更新分数\n      this.score += 100;\n      this.matchedPairs++;\n\n      // 检查游戏是否结束\n      if (this.matchedPairs === DESSERTS.length) {\n        this.handleVictory();\n      }\n\n      // 等待动画完成\n      await new Promise(resolve => setTimeout(resolve, 500));\n    },\n    async handleMismatch(firstIndex, secondIndex) {\n      // 播放失败音效\n      const audio = new Audio(require('@/assets/audio/mismatch.mp3'));\n      audio.play();\n\n      // 等待一段时间后翻回\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      this.cards[firstIndex].isFlipped = false;\n      this.cards[secondIndex].isFlipped = false;\n    },\n    handleVictory() {\n      this.stopTimer();\n      this.showVictory = true;\n\n      // 计算最终得分\n      const timeBonus = Math.max(0, 3000 - this.time * 10);\n      const movesBonus = Math.max(0, 2000 - this.moves * 20);\n      this.score += timeBonus + movesBonus;\n\n      // 保存分数到用户数据\n      // TODO: 调用 store action 保存分数\n    },\n    restartGame() {\n      this.showVictory = false;\n      this.initGame();\n    },\n    backToGames() {\n      this.$router.push('/games');\n    }\n  }\n};","map":{"version":3,"names":["DESSERTS","name","image","require","data","cards","flippedCards","canFlip","moves","time","score","timer","showVictory","matchedPairs","created","initGame","beforeUnmount","stopTimer","methods","map","dessert","index","id","isFlipped","isMatched","sort","Math","random","startTimer","setInterval","clearInterval","formatTime","seconds","mins","floor","secs","toString","padStart","flipCard","push","length","firstIndex","secondIndex","firstCard","secondCard","handleMatch","handleMismatch","audio","Audio","play","handleVictory","Promise","resolve","setTimeout","timeBonus","max","movesBonus","restartGame","backToGames","$router"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\views\\games\\MemoryGame.vue"],"sourcesContent":["<template>\n  <div class=\"memory-game\">\n    <div class=\"game-header sweet-card\">\n      <h2 class=\"gradient-text\">甜品记忆配对</h2>\n      <div class=\"game-stats\">\n        <span class=\"moves\">步数: {{ moves }}</span>\n        <span class=\"time\">时间: {{ formatTime(time) }}</span>\n        <span class=\"score\">得分: {{ score }}</span>\n      </div>\n      <button class=\"restart-btn sweet-btn\" @click=\"restartGame\">\n        重新开始\n      </button>\n    </div>\n\n    <div class=\"game-board\" :class=\"{ disabled: !canFlip }\">\n      <div v-for=\"(card, index) in cards\" \n           :key=\"index\"\n           class=\"card\"\n           :class=\"{ flipped: card.isFlipped, matched: card.isMatched }\"\n           @click=\"flipCard(index)\">\n        <div class=\"card-inner\">\n          <div class=\"card-front\">\n            <div class=\"card-pattern\"></div>\n          </div>\n          <div class=\"card-back\">\n            <img :src=\"card.image\" :alt=\"card.name\" />\n            <span class=\"card-name\">{{ card.name }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 胜利弹窗 -->\n    <div class=\"victory-modal\" v-if=\"showVictory\">\n      <div class=\"modal-content sweet-card\">\n        <h3 class=\"gradient-text\">恭喜通关！</h3>\n        <div class=\"stats\">\n          <p>用时: {{ formatTime(time) }}</p>\n          <p>步数: {{ moves }}</p>\n          <p>得分: {{ score }}</p>\n        </div>\n        <div class=\"rewards\">\n          <p>获得奖励:</p>\n          <div class=\"reward-items\">\n            <div class=\"reward-item\">\n              <img src=\"@/assets/images/games/star-coin.png\" alt=\"星星币\" />\n              <span>+{{ score }}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <button class=\"sweet-btn\" @click=\"restartGame\">再玩一次</button>\n          <button class=\"sweet-btn primary\" @click=\"backToGames\">返回游戏列表</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst DESSERTS = [\n  { name: '草莓蛋糕', image: require('@/assets/images/games/desserts/cake.png') },\n  { name: '马卡龙', image: require('@/assets/images/games/desserts/macaron.png') },\n  { name: '甜甜圈', image: require('@/assets/images/games/desserts/donut.png') },\n  { name: '冰淇淋', image: require('@/assets/images/games/desserts/icecream.png') },\n  { name: '布丁', image: require('@/assets/images/games/desserts/pudding.png') },\n  { name: '奶茶', image: require('@/assets/images/games/desserts/bubbletea.png') }\n];\n\nexport default {\n  name: 'MemoryGame',\n  data() {\n    return {\n      cards: [],\n      flippedCards: [],\n      canFlip: true,\n      moves: 0,\n      time: 0,\n      score: 0,\n      timer: null,\n      showVictory: false,\n      matchedPairs: 0\n    };\n  },\n  created() {\n    this.initGame();\n  },\n  beforeUnmount() {\n    this.stopTimer();\n  },\n  methods: {\n    initGame() {\n      // 创建配对卡片\n      this.cards = [...DESSERTS, ...DESSERTS]\n        .map((dessert, index) => ({\n          ...dessert,\n          id: index,\n          isFlipped: false,\n          isMatched: false\n        }))\n        .sort(() => Math.random() - 0.5);\n\n      this.flippedCards = [];\n      this.moves = 0;\n      this.time = 0;\n      this.score = 0;\n      this.showVictory = false;\n      this.matchedPairs = 0;\n      this.canFlip = true;\n      \n      this.startTimer();\n    },\n    startTimer() {\n      this.stopTimer();\n      this.timer = setInterval(() => {\n        this.time++;\n      }, 1000);\n    },\n    stopTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    formatTime(seconds) {\n      const mins = Math.floor(seconds / 60);\n      const secs = seconds % 60;\n      return `${mins}:${secs.toString().padStart(2, '0')}`;\n    },\n    async flipCard(index) {\n      if (!this.canFlip || this.cards[index].isFlipped || this.cards[index].isMatched) {\n        return;\n      }\n\n      this.cards[index].isFlipped = true;\n      this.flippedCards.push(index);\n\n      if (this.flippedCards.length === 2) {\n        this.moves++;\n        this.canFlip = false;\n        \n        const [firstIndex, secondIndex] = this.flippedCards;\n        const firstCard = this.cards[firstIndex];\n        const secondCard = this.cards[secondIndex];\n\n        if (firstCard.name === secondCard.name) {\n          // 匹配成功\n          await this.handleMatch(firstIndex, secondIndex);\n        } else {\n          // 匹配失败\n          await this.handleMismatch(firstIndex, secondIndex);\n        }\n\n        this.flippedCards = [];\n        this.canFlip = true;\n      }\n    },\n    async handleMatch(firstIndex, secondIndex) {\n      // 播放成功音效\n      const audio = new Audio(require('@/assets/audio/match.mp3'));\n      audio.play();\n\n      // 添加匹配动画\n      this.cards[firstIndex].isMatched = true;\n      this.cards[secondIndex].isMatched = true;\n      \n      // 更新分数\n      this.score += 100;\n      this.matchedPairs++;\n\n      // 检查游戏是否结束\n      if (this.matchedPairs === DESSERTS.length) {\n        this.handleVictory();\n      }\n\n      // 等待动画完成\n      await new Promise(resolve => setTimeout(resolve, 500));\n    },\n    async handleMismatch(firstIndex, secondIndex) {\n      // 播放失败音效\n      const audio = new Audio(require('@/assets/audio/mismatch.mp3'));\n      audio.play();\n\n      // 等待一段时间后翻回\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      this.cards[firstIndex].isFlipped = false;\n      this.cards[secondIndex].isFlipped = false;\n    },\n    handleVictory() {\n      this.stopTimer();\n      this.showVictory = true;\n      \n      // 计算最终得分\n      const timeBonus = Math.max(0, 3000 - this.time * 10);\n      const movesBonus = Math.max(0, 2000 - this.moves * 20);\n      this.score += timeBonus + movesBonus;\n\n      // 保存分数到用户数据\n      // TODO: 调用 store action 保存分数\n    },\n    restartGame() {\n      this.showVictory = false;\n      this.initGame();\n    },\n    backToGames() {\n      this.$router.push('/games');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.memory-game {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.game-header {\n  text-align: center;\n  margin-bottom: 20px;\n  padding: 20px;\n}\n\n.game-stats {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin: 15px 0;\n}\n\n.game-board {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 15px;\n  perspective: 1000px;\n}\n\n.game-board.disabled {\n  pointer-events: none;\n}\n\n.card {\n  aspect-ratio: 3/4;\n  cursor: pointer;\n  position: relative;\n  transform-style: preserve-3d;\n  transition: transform 0.5s;\n}\n\n.card.flipped {\n  transform: rotateY(180deg);\n}\n\n.card.matched {\n  animation: matched 0.5s ease-out;\n}\n\n@keyframes matched {\n  0%, 100% { transform: rotateY(180deg) scale(1); }\n  50% { transform: rotateY(180deg) scale(1.1); }\n}\n\n.card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transform-style: preserve-3d;\n}\n\n.card-front, .card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: var(--border-radius);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.card-front {\n  background: linear-gradient(135deg, var(--primary-pink), var(--primary-purple));\n}\n\n.card-pattern {\n  width: 60%;\n  height: 60%;\n  background-image: url('@/assets/images/games/card-pattern.png');\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.2;\n}\n\n.card-back {\n  transform: rotateY(180deg);\n  padding: 10px;\n}\n\n.card-back img {\n  width: 80%;\n  height: auto;\n  margin-bottom: 10px;\n}\n\n.card-name {\n  font-size: 0.9rem;\n  color: var(--text-primary);\n  text-align: center;\n}\n\n/* 胜利弹窗 */\n.victory-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  width: 90%;\n  max-width: 400px;\n  padding: 30px;\n  text-align: center;\n}\n\n.stats {\n  margin: 20px 0;\n}\n\n.rewards {\n  margin: 20px 0;\n}\n\n.reward-items {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.reward-item {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.reward-item img {\n  width: 30px;\n  height: 30px;\n}\n\n.buttons {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin-top: 20px;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .game-board {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@media (max-width: 480px) {\n  .game-board {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .game-stats {\n    flex-direction: column;\n    gap: 10px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}