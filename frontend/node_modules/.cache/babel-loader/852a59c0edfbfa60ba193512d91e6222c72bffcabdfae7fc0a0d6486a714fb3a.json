{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nclass WeatherService {\n  constructor() {\n    // 使用正确的API配置\n    this.key = '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://kv436fwcq8.re.qweatherapi.com/v7';\n\n    // 默认城市列表\n    this.defaultCities = [{\n      id: '101190101',\n      name: '南京'\n    }, {\n      id: '101020100',\n      name: '上海'\n    }, {\n      id: '101010100',\n      name: '北京'\n    }];\n    console.log('WeatherService 初始化配置:', {\n      key: this.key,\n      baseUrl: this.baseUrl,\n      cities: this.defaultCities\n    });\n\n    // 立即测试所有城市\n    this.testAllCities();\n  }\n\n  // 测试所有城市的天气API\n  async testAllCities() {\n    console.log('[天气服务] 开始测试所有城市的天气API');\n    for (const city of this.defaultCities) {\n      try {\n        console.log(`[天气服务] 测试 ${city.name} 的天气API`);\n        const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\n        console.log(`[天气服务] ${city.name} 请求URL:`, url);\n        const response = await fetch(url, {\n          headers: {\n            'Accept': 'application/json',\n            'Accept-Encoding': 'gzip'\n          }\n        });\n        console.log(`[天气服务] ${city.name} 响应状态:`, response.status);\n        if (response.ok) {\n          const data = await response.json();\n          console.log(`[天气服务] ${city.name} 响应数据:`, data);\n        } else {\n          const text = await response.text();\n          console.error(`[天气服务] ${city.name} 请求失败:`, text);\n        }\n      } catch (error) {\n        console.error(`[天气服务] ${city.name} 测试出错:`, error);\n      }\n    }\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('[天气服务] 使用默认城市:', defaultCity);\n      return await this.getWeatherByCity(defaultCity.id);\n    } catch (error) {\n      console.error('[天气服务] 获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 根据城市ID获取天气\n  async getWeatherByCity(cityId) {\n    try {\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('[天气服务] 请求URL:', url);\n      console.log('[天气服务] 发送请求...');\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      console.log('[天气服务] 响应状态:', weatherResponse.status);\n      const responseHeaders = Object.fromEntries(weatherResponse.headers.entries());\n      console.log('[天气服务] 响应头:', responseHeaders);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('[天气服务] API响应错误:', {\n          status: weatherResponse.status,\n          statusText: weatherResponse.statusText,\n          response: responseText\n        });\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n\n      // 检查内容类型\n      const contentType = weatherResponse.headers.get('content-type');\n      console.log('[天气服务] 内容类型:', contentType);\n      let weatherData;\n      const responseText = await weatherResponse.text();\n      console.log('[天气服务] 原始响应文本:', responseText);\n      try {\n        weatherData = JSON.parse(responseText);\n      } catch (e) {\n        console.error('[天气服务] JSON解析失败:', e);\n        throw new Error(`无法解析JSON: ${responseText}`);\n      }\n      console.log('[天气服务] 完整响应数据:', JSON.stringify(weatherData, null, 2));\n      if (weatherData.code === '200') {\n        console.log('[天气服务] 成功获取天气数据');\n        const {\n          temp,\n          text,\n          icon,\n          feelsLike,\n          humidity,\n          windDir,\n          windScale\n        } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || {\n          name: '未知城市'\n        };\n        const weatherInfo = {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime,\n          // 添加更多天气信息\n          feelsLike,\n          humidity,\n          windDir,\n          windScale\n        };\n        console.log('[天气服务] 处理后的天气信息:', weatherInfo);\n        return weatherInfo;\n      } else {\n        console.error('[天气服务] 获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('[天气服务] 获取天气详情出错:', error);\n      throw error;\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    console.log('[天气服务] 生成天气描述，输入数据:', weather);\n    const {\n      temperature,\n      description,\n      cityName,\n      feelsLike,\n      humidity,\n      windDir,\n      windScale\n    } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature) || 0;\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description && description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description && description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    const weatherDesc = `${cityName}现在气温${temperature}°C，${description || '未知天气'}。${feelsLike ? `体感温度${feelsLike}°C，` : ''}${humidity ? `相对湿度${humidity}%，` : ''}${windDir && windScale ? `${windDir}${windScale}级。` : ''}${suggestion}`;\n    console.log('[天气服务] 生成的天气描述:', weatherDesc);\n    return weatherDesc;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    console.log('[天气服务] 解析天气图标:', icon);\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        console.log('[天气服务] 匹配到的天气状况:', condition);\n        return condition;\n      }\n    }\n    console.log('[天气服务] 未匹配到天气状况，使用默认值: cloudy');\n    return 'cloudy';\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    const defaultData = {\n      temperature: '未知',\n      condition: 'cloudy',\n      description: '获取失败',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString(),\n      feelsLike: '未知',\n      humidity: '未知',\n      windDir: '未知',\n      windScale: '未知'\n    };\n    console.log('[天气服务] 返回默认天气数据:', defaultData);\n    return defaultData;\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      console.log('[天气服务] 切换城市:', cityId);\n      return await this.getWeatherByCity(cityId);\n    } catch (error) {\n      console.error('[天气服务] 切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    console.log('[天气服务] 解析城市名称:', text);\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        console.log('[天气服务] 匹配到城市:', city);\n        return city;\n      }\n    }\n    console.log('[天气服务] 未匹配到城市');\n    return null;\n  }\n\n  // 直接查询所有城市的天气\n  async getAllCitiesWeather() {\n    console.log('[天气服务] 获取所有城市的天气');\n    const results = [];\n    for (const city of this.defaultCities) {\n      try {\n        console.log(`[天气服务] 获取 ${city.name} 的天气`);\n        const weather = await this.getWeatherByCity(city.id);\n        results.push(weather);\n      } catch (error) {\n        console.error(`[天气服务] 获取 ${city.name} 天气失败:`, error);\n        results.push({\n          cityName: city.name,\n          temperature: '获取失败',\n          description: '请求出错',\n          condition: 'cloudy'\n        });\n      }\n    }\n    return results;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","key","baseUrl","defaultCities","id","name","console","log","cities","testAllCities","city","url","response","fetch","headers","status","ok","data","json","text","error","getNowWeather","defaultCity","getWeatherByCity","getDefaultWeather","cityId","weatherResponse","responseHeaders","Object","fromEntries","entries","responseText","statusText","Error","contentType","get","weatherData","JSON","parse","e","stringify","code","temp","icon","feelsLike","humidity","windDir","windScale","now","find","c","weatherInfo","temperature","condition","getWeatherCondition","description","cityName","updateTime","generateWeatherDescription","weather","suggestion","parseInt","includes","weatherDesc","conditions","sunny","cloudy","rainy","snowy","foggy","icons","defaultData","Date","toISOString","switchCity","parseCityName","getAllCitiesWeather","results","push"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\n  constructor() {\n    // 使用正确的API配置\n    this.key = '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://kv436fwcq8.re.qweatherapi.com/v7';\n    \n    // 默认城市列表\n    this.defaultCities = [\n      { id: '101190101', name: '南京' },\n      { id: '101020100', name: '上海' },\n      { id: '101010100', name: '北京' }\n    ];\n\n    console.log('WeatherService 初始化配置:', {\n      key: this.key,\n      baseUrl: this.baseUrl,\n      cities: this.defaultCities\n    });\n    \n    // 立即测试所有城市\n    this.testAllCities();\n  }\n  \n  // 测试所有城市的天气API\n  async testAllCities() {\n    console.log('[天气服务] 开始测试所有城市的天气API');\n    for (const city of this.defaultCities) {\n      try {\n        console.log(`[天气服务] 测试 ${city.name} 的天气API`);\n        const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\n        console.log(`[天气服务] ${city.name} 请求URL:`, url);\n        \n        const response = await fetch(url, {\n          headers: {\n            'Accept': 'application/json',\n            'Accept-Encoding': 'gzip'\n          }\n        });\n        \n        console.log(`[天气服务] ${city.name} 响应状态:`, response.status);\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log(`[天气服务] ${city.name} 响应数据:`, data);\n        } else {\n          const text = await response.text();\n          console.error(`[天气服务] ${city.name} 请求失败:`, text);\n        }\n      } catch (error) {\n        console.error(`[天气服务] ${city.name} 测试出错:`, error);\n      }\n    }\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('[天气服务] 使用默认城市:', defaultCity);\n\n      return await this.getWeatherByCity(defaultCity.id);\n    } catch (error) {\n      console.error('[天气服务] 获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n  \n  // 根据城市ID获取天气\n  async getWeatherByCity(cityId) {\n    try {\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('[天气服务] 请求URL:', url);\n      \n      console.log('[天气服务] 发送请求...');\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      console.log('[天气服务] 响应状态:', weatherResponse.status);\n      const responseHeaders = Object.fromEntries(weatherResponse.headers.entries());\n      console.log('[天气服务] 响应头:', responseHeaders);\n      \n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('[天气服务] API响应错误:', {\n          status: weatherResponse.status,\n          statusText: weatherResponse.statusText,\n          response: responseText\n        });\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n      \n      // 检查内容类型\n      const contentType = weatherResponse.headers.get('content-type');\n      console.log('[天气服务] 内容类型:', contentType);\n      \n      let weatherData;\n      const responseText = await weatherResponse.text();\n      console.log('[天气服务] 原始响应文本:', responseText);\n      \n      try {\n        weatherData = JSON.parse(responseText);\n      } catch (e) {\n        console.error('[天气服务] JSON解析失败:', e);\n        throw new Error(`无法解析JSON: ${responseText}`);\n      }\n      \n      console.log('[天气服务] 完整响应数据:', JSON.stringify(weatherData, null, 2));\n\n      if (weatherData.code === '200') {\n        console.log('[天气服务] 成功获取天气数据');\n        const { temp, text, icon, feelsLike, humidity, windDir, windScale } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || { name: '未知城市' };\n        \n        const weatherInfo = {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime,\n          // 添加更多天气信息\n          feelsLike,\n          humidity,\n          windDir,\n          windScale\n        };\n        \n        console.log('[天气服务] 处理后的天气信息:', weatherInfo);\n        return weatherInfo;\n      } else {\n        console.error('[天气服务] 获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('[天气服务] 获取天气详情出错:', error);\n      throw error;\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    console.log('[天气服务] 生成天气描述，输入数据:', weather);\n    \n    const { temperature, description, cityName, feelsLike, humidity, windDir, windScale } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature) || 0;\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description && description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description && description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    const weatherDesc = `${cityName}现在气温${temperature}°C，${description || '未知天气'}。${\n      feelsLike ? `体感温度${feelsLike}°C，` : ''}${\n      humidity ? `相对湿度${humidity}%，` : ''}${\n      windDir && windScale ? `${windDir}${windScale}级。` : ''}${suggestion}`;\n    \n    console.log('[天气服务] 生成的天气描述:', weatherDesc);\n    return weatherDesc;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    console.log('[天气服务] 解析天气图标:', icon);\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        console.log('[天气服务] 匹配到的天气状况:', condition);\n        return condition;\n      }\n    }\n    console.log('[天气服务] 未匹配到天气状况，使用默认值: cloudy');\n    return 'cloudy';\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    const defaultData = {\n      temperature: '未知',\n      condition: 'cloudy',\n      description: '获取失败',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString(),\n      feelsLike: '未知',\n      humidity: '未知',\n      windDir: '未知',\n      windScale: '未知'\n    };\n    console.log('[天气服务] 返回默认天气数据:', defaultData);\n    return defaultData;\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      console.log('[天气服务] 切换城市:', cityId);\n      return await this.getWeatherByCity(cityId);\n    } catch (error) {\n      console.error('[天气服务] 切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    console.log('[天气服务] 解析城市名称:', text);\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        console.log('[天气服务] 匹配到城市:', city);\n        return city;\n      }\n    }\n    console.log('[天气服务] 未匹配到城市');\n    return null;\n  }\n  \n  // 直接查询所有城市的天气\n  async getAllCitiesWeather() {\n    console.log('[天气服务] 获取所有城市的天气');\n    const results = [];\n    \n    for (const city of this.defaultCities) {\n      try {\n        console.log(`[天气服务] 获取 ${city.name} 的天气`);\n        const weather = await this.getWeatherByCity(city.id);\n        results.push(weather);\n      } catch (error) {\n        console.error(`[天气服务] 获取 ${city.name} 天气失败:`, error);\n        results.push({\n          cityName: city.name,\n          temperature: '获取失败',\n          description: '请求出错',\n          condition: 'cloudy'\n        });\n      }\n    }\n    \n    return results;\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}