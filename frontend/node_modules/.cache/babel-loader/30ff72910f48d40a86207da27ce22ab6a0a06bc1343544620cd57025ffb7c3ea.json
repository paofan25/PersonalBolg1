{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport CryptoJS from 'crypto-js';\nclass SparkService {\n  constructor() {\n    // 直接在代码中设置API凭据\n    this.appId = 'your_app_id'; // 替换为实际的讯飞星火 appid\n    this.apiKey = 'your_api_key'; // 替换为实际的讯飞星火 apiKey\n    this.apiSecret = 'your_api_secret'; // 替换为实际的讯飞星火 apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v2.1/chat';\n    this.ws = null;\n    this.messageBuffer = '';\n    this.currentResolve = null;\n    this.currentReject = null;\n  }\n\n  /**\n   * 生成认证URL\n   * @returns {string} 带有认证信息的WebSocket URL\n   */\n  generateAuthUrl() {\n    try {\n      const host = this.parseApiUrl(this.apiUrl);\n      const date = new Date().toGMTString();\n      const algorithm = 'hmac-sha256';\n      const headers = 'host date request-line';\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v2.1/chat HTTP/1.1`;\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n      return `${this.apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n    } catch (error) {\n      console.error('生成认证URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 解析API URL中的host部分\n   * @param {string} url - API URL\n   * @returns {string} 主机名\n   */\n  parseApiUrl(url) {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.host;\n    } catch (error) {\n      console.error('解析URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Promise<string>} 星火AI的回复\n   */\n  async sendMessage(message, emotion = 'neutral') {\n    console.log(`正在发送消息到星火AI: \"${message}\", 情绪: \"${emotion}\"`);\n    try {\n      const authUrl = this.generateAuthUrl();\n      console.log('已生成认证URL:', authUrl);\n      return new Promise((resolve, reject) => {\n        this.currentResolve = resolve;\n        this.currentReject = reject;\n        if (this.ws) {\n          console.log('关闭现有WebSocket连接');\n          this.ws.close();\n        }\n        this.ws = new WebSocket(authUrl);\n        this.messageBuffer = '';\n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开');\n          const data = {\n            header: {\n              app_id: this.appId\n            },\n            parameter: {\n              chat: {\n                domain: 'general',\n                temperature: 0.5,\n                max_tokens: 1024\n              }\n            },\n            payload: {\n              message: {\n                text: this.formatPrompt(message, emotion)\n              }\n            }\n          };\n          console.log('发送数据:', JSON.stringify(data));\n          this.ws.send(JSON.stringify(data));\n        };\n        this.ws.onmessage = event => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('收到WebSocket消息:', response);\n            if (response.header.code !== 0) {\n              console.error('星火API返回错误:', response.header.message);\n              this.currentReject(`星火API错误: ${response.header.message}`);\n              this.ws.close();\n              return;\n            }\n            if (response.payload.choices.text) {\n              this.messageBuffer += response.payload.choices.text[0].content;\n            }\n            if (response.header.status === 2) {\n              console.log('对话完成，最终回复:', this.messageBuffer);\n              this.currentResolve(this.messageBuffer);\n              this.ws.close();\n            }\n          } catch (error) {\n            console.error('处理WebSocket消息时出错:', error);\n            this.currentReject(`处理响应出错: ${error.message}`);\n            this.ws.close();\n          }\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket错误:', error);\n          this.currentReject(`WebSocket错误: ${error.message || '未知错误'}`);\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n        };\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 格式化发送给AI的提示\n   * @param {string} message - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Array} 对话历史\n   */\n  formatPrompt(message, emotion) {\n    const systemPrompt = [{\n      role: 'system',\n      content: `你是一个名叫\"糖球\"的可爱助手，拥有甜美的声音和温暖的性格。你的回答应该简短、友好，不超过3句话。\n        当前用户情绪: ${emotion}。\n        如果用户情绪是高兴的，你应该更活泼；如果用户情绪是低落的，你应该更安慰；如果用户情绪是愤怒的，你应该更冷静。\n        你的语气应该很可爱，偶尔使用简单的表情如(^_^)、(T_T)等。\n        避免使用复杂或专业的词汇，使用简单直接的语言。`\n    }, {\n      role: 'user',\n      content: message\n    }];\n    return systemPrompt;\n  }\n\n  /**\n   * 根据用户输入和情绪生成回复\n   * @param {string} userMessage - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(userMessage, emotion = 'neutral') {\n    try {\n      console.log(`尝试通过星火AI生成回复: \"${userMessage}\"`);\n      const aiResponse = await this.sendMessage(userMessage, emotion);\n      return aiResponse || '嗯嗯，我明白了~ (^_^)';\n    } catch (error) {\n      console.error('通过星火AI生成回复失败:', error);\n      // 返回一个默认回复\n      return '对不起，我现在有点小问题，稍后再试试吧~ (>_<)';\n    }\n  }\n}\nexport default new SparkService();","map":{"version":3,"names":["CryptoJS","SparkService","constructor","appId","apiKey","apiSecret","apiUrl","ws","messageBuffer","currentResolve","currentReject","generateAuthUrl","host","parseApiUrl","date","Date","toGMTString","algorithm","headers","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","error","console","url","urlObj","URL","sendMessage","message","emotion","log","authUrl","Promise","resolve","reject","close","WebSocket","onopen","data","header","app_id","parameter","chat","domain","temperature","max_tokens","payload","text","formatPrompt","JSON","send","onmessage","event","response","parse","code","choices","content","status","onerror","onclose","systemPrompt","role","generateResponse","userMessage","aiResponse"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nclass SparkService {\n  constructor() {\n    // 直接在代码中设置API凭据\n    this.appId = 'your_app_id'; // 替换为实际的讯飞星火 appid\n    this.apiKey = 'your_api_key'; // 替换为实际的讯飞星火 apiKey\n    this.apiSecret = 'your_api_secret'; // 替换为实际的讯飞星火 apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v2.1/chat';\n    \n    this.ws = null;\n    this.messageBuffer = '';\n    this.currentResolve = null;\n    this.currentReject = null;\n  }\n\n  /**\n   * 生成认证URL\n   * @returns {string} 带有认证信息的WebSocket URL\n   */\n  generateAuthUrl() {\n    try {\n      const host = this.parseApiUrl(this.apiUrl);\n      const date = new Date().toGMTString();\n      const algorithm = 'hmac-sha256';\n      const headers = 'host date request-line';\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v2.1/chat HTTP/1.1`;\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n      \n      return `${this.apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n    } catch (error) {\n      console.error('生成认证URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 解析API URL中的host部分\n   * @param {string} url - API URL\n   * @returns {string} 主机名\n   */\n  parseApiUrl(url) {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.host;\n    } catch (error) {\n      console.error('解析URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Promise<string>} 星火AI的回复\n   */\n  async sendMessage(message, emotion = 'neutral') {\n    console.log(`正在发送消息到星火AI: \"${message}\", 情绪: \"${emotion}\"`);\n    \n    try {\n      const authUrl = this.generateAuthUrl();\n      console.log('已生成认证URL:', authUrl);\n      \n      return new Promise((resolve, reject) => {\n        this.currentResolve = resolve;\n        this.currentReject = reject;\n        \n        if (this.ws) {\n          console.log('关闭现有WebSocket连接');\n          this.ws.close();\n        }\n        \n        this.ws = new WebSocket(authUrl);\n        this.messageBuffer = '';\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开');\n          \n          const data = {\n            header: {\n              app_id: this.appId\n            },\n            parameter: {\n              chat: {\n                domain: 'general',\n                temperature: 0.5,\n                max_tokens: 1024\n              }\n            },\n            payload: {\n              message: {\n                text: this.formatPrompt(message, emotion)\n              }\n            }\n          };\n          \n          console.log('发送数据:', JSON.stringify(data));\n          this.ws.send(JSON.stringify(data));\n        };\n        \n        this.ws.onmessage = (event) => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('收到WebSocket消息:', response);\n            \n            if (response.header.code !== 0) {\n              console.error('星火API返回错误:', response.header.message);\n              this.currentReject(`星火API错误: ${response.header.message}`);\n              this.ws.close();\n              return;\n            }\n            \n            if (response.payload.choices.text) {\n              this.messageBuffer += response.payload.choices.text[0].content;\n            }\n            \n            if (response.header.status === 2) {\n              console.log('对话完成，最终回复:', this.messageBuffer);\n              this.currentResolve(this.messageBuffer);\n              this.ws.close();\n            }\n          } catch (error) {\n            console.error('处理WebSocket消息时出错:', error);\n            this.currentReject(`处理响应出错: ${error.message}`);\n            this.ws.close();\n          }\n        };\n        \n        this.ws.onerror = (error) => {\n          console.error('WebSocket错误:', error);\n          this.currentReject(`WebSocket错误: ${error.message || '未知错误'}`);\n        };\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n        };\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 格式化发送给AI的提示\n   * @param {string} message - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Array} 对话历史\n   */\n  formatPrompt(message, emotion) {\n    const systemPrompt = [\n      {\n        role: 'system',\n        content: `你是一个名叫\"糖球\"的可爱助手，拥有甜美的声音和温暖的性格。你的回答应该简短、友好，不超过3句话。\n        当前用户情绪: ${emotion}。\n        如果用户情绪是高兴的，你应该更活泼；如果用户情绪是低落的，你应该更安慰；如果用户情绪是愤怒的，你应该更冷静。\n        你的语气应该很可爱，偶尔使用简单的表情如(^_^)、(T_T)等。\n        避免使用复杂或专业的词汇，使用简单直接的语言。`\n      },\n      {\n        role: 'user',\n        content: message\n      }\n    ];\n    \n    return systemPrompt;\n  }\n\n  /**\n   * 根据用户输入和情绪生成回复\n   * @param {string} userMessage - 用户输入的消息\n   * @param {string} emotion - 当前情绪\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(userMessage, emotion = 'neutral') {\n    try {\n      console.log(`尝试通过星火AI生成回复: \"${userMessage}\"`);\n      const aiResponse = await this.sendMessage(userMessage, emotion);\n      return aiResponse || '嗯嗯，我明白了~ (^_^)';\n    } catch (error) {\n      console.error('通过星火AI生成回复失败:', error);\n      // 返回一个默认回复\n      return '对不起，我现在有点小问题，稍后再试试吧~ (>_<)';\n    }\n  }\n}\n\nexport default new SparkService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}