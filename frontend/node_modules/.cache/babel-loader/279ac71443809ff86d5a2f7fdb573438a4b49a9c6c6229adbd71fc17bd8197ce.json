{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport CryptoJS from 'crypto-js';\nclass XfyunService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用默认值作为后备\n    this.appid = import.meta.env?.VITE_APP_XFYUN_APPID || 'bb840282';\n    this.apiKey = import.meta.env?.VITE_APP_XFYUN_API_KEY || 'LmJhrKwuWTSTnGmPWts:CCGPkaLkvEmVPRHJTbNk';\n    this.apiSecret = import.meta.env?.VITE_APP_XFYUN_API_SECRET || 'YTBiZjM5ZjE3ZjE5ZmJhZjE4ZjE5ZjE5ZjE5ZjE5ZjE5';\n    console.log('XfyunService initialized with:', {\n      appid: this.appid,\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      hasSecret: !!this.apiSecret\n    });\n    this.domain = 'generalv3';\n    this.url = 'wss://spark-api.xf-yun.com/v3.1/chat';\n  }\n\n  // 生成鉴权url\n  getAuthUrl() {\n    const host = 'spark-api.xf-yun.com/v3.1/chat';\n    const date = new Date().toUTCString();\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  // 建立WebSocket连接\n  createWebSocket() {\n    return new Promise((resolve, reject) => {\n      try {\n        const url = this.getAuthUrl();\n        console.log('Creating WebSocket connection...');\n        const ws = new WebSocket(url);\n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n          resolve(ws);\n        };\n        ws.onerror = error => {\n          console.error('WebSocket连接错误:', error);\n          reject(error);\n        };\n      } catch (error) {\n        console.error('创建WebSocket失败:', error);\n        reject(error);\n      }\n    });\n  }\n\n  // 发送消息并获取回复\n  async chat(messages) {\n    try {\n      console.log('Starting chat with messages:', messages);\n      const ws = await this.createWebSocket();\n      return new Promise((resolve, reject) => {\n        let responseText = '';\n        ws.onmessage = event => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('Received message:', response);\n            if (response.header.code !== 0) {\n              console.error('请求错误:', response.header.message);\n              ws.close();\n              reject(new Error(response.header.message));\n              return;\n            }\n            const payload = response.payload;\n            const choices = payload.choices;\n            const status = choices.status;\n            const text = choices.text?.[0]?.content || '';\n            responseText += text;\n            if (status === 2) {\n              console.log('Chat completed:', responseText);\n              ws.close();\n              resolve(responseText);\n            }\n          } catch (error) {\n            console.error('处理消息失败:', error);\n            ws.close();\n            reject(error);\n          }\n        };\n        const data = {\n          header: {\n            app_id: this.appid,\n            uid: '12345'\n          },\n          parameter: {\n            chat: {\n              domain: this.domain,\n              temperature: 0.5,\n              max_tokens: 2048\n            }\n          },\n          payload: {\n            message: {\n              text: messages\n            }\n          }\n        };\n        console.log('Sending data:', data);\n        ws.send(JSON.stringify(data));\n      });\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('Analyzing emotion for text:', text);\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      const response = await this.chat([{\n        role: 'user',\n        content: prompt\n      }]);\n      const emotion = response.toLowerCase().trim();\n      console.log('Emotion analysis result:', emotion);\n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\n// 创建单例实例\nconst xfyunService = new XfyunService();\nconsole.log('XfyunService instance created');\nexport default xfyunService;","map":{"version":3,"names":["CryptoJS","XfyunService","constructor","import","meta","env","console","error","appid","VITE_APP_XFYUN_APPID","apiKey","VITE_APP_XFYUN_API_KEY","apiSecret","VITE_APP_XFYUN_API_SECRET","log","substring","hasSecret","domain","url","getAuthUrl","host","date","Date","toUTCString","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","createWebSocket","Promise","resolve","reject","ws","WebSocket","onopen","onerror","chat","messages","responseText","onmessage","event","response","JSON","parse","data","header","code","message","close","Error","payload","choices","status","text","content","app_id","uid","parameter","temperature","max_tokens","send","analyzeEmotion","prompt","role","emotion","toLowerCase","trim","includes","xfyunService"],"sources":["E:/code/PersonalBolg1/frontend/src/services/xfyun.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nclass XfyunService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用默认值作为后备\n    this.appid = import.meta.env?.VITE_APP_XFYUN_APPID || 'bb840282';\n    this.apiKey = import.meta.env?.VITE_APP_XFYUN_API_KEY || 'LmJhrKwuWTSTnGmPWts:CCGPkaLkvEmVPRHJTbNk';\n    this.apiSecret = import.meta.env?.VITE_APP_XFYUN_API_SECRET || 'YTBiZjM5ZjE3ZjE5ZmJhZjE4ZjE5ZjE5ZjE5ZjE5ZjE5';\n\n    console.log('XfyunService initialized with:', {\n      appid: this.appid,\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      hasSecret: !!this.apiSecret\n    });\n\n    this.domain = 'generalv3';\n    this.url = 'wss://spark-api.xf-yun.com/v3.1/chat';\n  }\n\n  // 生成鉴权url\n  getAuthUrl() {\n    const host = 'spark-api.xf-yun.com/v3.1/chat';\n    const date = new Date().toUTCString();\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  // 建立WebSocket连接\n  createWebSocket() {\n    return new Promise((resolve, reject) => {\n      try {\n        const url = this.getAuthUrl();\n        console.log('Creating WebSocket connection...');\n        const ws = new WebSocket(url);\n        \n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n          resolve(ws);\n        };\n        \n        ws.onerror = (error) => {\n          console.error('WebSocket连接错误:', error);\n          reject(error);\n        };\n      } catch (error) {\n        console.error('创建WebSocket失败:', error);\n        reject(error);\n      }\n    });\n  }\n\n  // 发送消息并获取回复\n  async chat(messages) {\n    try {\n      console.log('Starting chat with messages:', messages);\n      const ws = await this.createWebSocket();\n      \n      return new Promise((resolve, reject) => {\n        let responseText = '';\n        \n        ws.onmessage = (event) => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('Received message:', response);\n            \n            if (response.header.code !== 0) {\n              console.error('请求错误:', response.header.message);\n              ws.close();\n              reject(new Error(response.header.message));\n              return;\n            }\n            \n            const payload = response.payload;\n            const choices = payload.choices;\n            const status = choices.status;\n            const text = choices.text?.[0]?.content || '';\n            \n            responseText += text;\n            \n            if (status === 2) {\n              console.log('Chat completed:', responseText);\n              ws.close();\n              resolve(responseText);\n            }\n          } catch (error) {\n            console.error('处理消息失败:', error);\n            ws.close();\n            reject(error);\n          }\n        };\n        \n        const data = {\n          header: {\n            app_id: this.appid,\n            uid: '12345'\n          },\n          parameter: {\n            chat: {\n              domain: this.domain,\n              temperature: 0.5,\n              max_tokens: 2048\n            }\n          },\n          payload: {\n            message: {\n              text: messages\n            }\n          }\n        };\n        \n        console.log('Sending data:', data);\n        ws.send(JSON.stringify(data));\n      });\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('Analyzing emotion for text:', text);\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      \n      const response = await this.chat([{ role: 'user', content: prompt }]);\n      const emotion = response.toLowerCase().trim();\n      \n      console.log('Emotion analysis result:', emotion);\n      \n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\n// 创建单例实例\nconst xfyunService = new XfyunService();\nconsole.log('XfyunService instance created');\n\nexport default xfyunService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}