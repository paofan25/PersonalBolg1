{"ast":null,"code":"import axios from 'axios';\nclass WeatherService {\n  constructor() {\n    this.apiKey = '1234567890abcdef1234567890abcdef'; // 请替换为实际的和风天气API密钥\n    this.apiUrl = 'https://devapi.qweather.com/v7';\n  }\n\n  /**\n   * 获取当前天气信息\n   * @param {string} location - 位置ID，默认为北京(101010100)\n   * @returns {Promise<Object>} 天气数据对象\n   */\n  async getNowWeather(location = '101010100') {\n    try {\n      console.log(`正在获取位置 ${location} 的天气数据...`);\n      const response = await axios.get(`${this.apiUrl}/weather/now`, {\n        params: {\n          location,\n          key: this.apiKey\n        }\n      });\n      console.log('获取天气数据成功:', response.data);\n      if (response.data.code === '200') {\n        const weatherData = {\n          city: this.getCityNameByCode(location),\n          temp: response.data.now.temp,\n          condition: response.data.now.text,\n          humidity: response.data.now.humidity,\n          windSpeed: response.data.now.windSpeed,\n          windDir: response.data.now.windDir,\n          updateTime: response.data.updateTime\n        };\n        return {\n          success: true,\n          data: weatherData,\n          description: this.generateWeatherDescription(weatherData)\n        };\n      } else {\n        console.error('和风天气API返回错误:', response.data);\n        return {\n          success: false,\n          error: `和风天气API返回错误: ${response.data.code}`,\n          // 返回一个默认的天气数据\n          data: this.getDefaultWeatherData(location)\n        };\n      }\n    } catch (error) {\n      console.error('获取天气数据失败:', error);\n      return {\n        success: false,\n        error: error.message,\n        // 返回一个默认的天气数据\n        data: this.getDefaultWeatherData(location)\n      };\n    }\n  }\n\n  /**\n   * 根据位置代码获取城市名称\n   * @param {string} code - 位置代码\n   * @returns {string} 城市名称\n   */\n  getCityNameByCode(code) {\n    const cityMap = {\n      '101010100': '北京',\n      '101020100': '上海',\n      '101280101': '广州',\n      '101280601': '深圳',\n      '101210101': '杭州',\n      '101190101': '南京',\n      '101200101': '武汉',\n      '101110101': '西安',\n      '101230101': '福州',\n      '101270101': '成都'\n    };\n    return cityMap[code] || '未知城市';\n  }\n\n  /**\n   * 获取默认天气数据（API失败时使用）\n   * @param {string} location - 位置ID\n   * @returns {Object} 默认天气数据\n   */\n  getDefaultWeatherData(location) {\n    const cityName = this.getCityNameByCode(location);\n    const now = new Date();\n    const temp = Math.floor(15 + Math.random() * 10); // 15-25度之间的随机温度\n\n    const conditions = ['晴', '多云', '阴', '小雨', '晴间多云'];\n    const condition = conditions[Math.floor(Math.random() * conditions.length)];\n    return {\n      city: cityName,\n      temp: temp,\n      condition: condition,\n      humidity: '60',\n      windSpeed: '3',\n      windDir: '东南风',\n      updateTime: now.toISOString()\n    };\n  }\n\n  /**\n   * 生成天气描述文本\n   * @param {Object} weatherData - 天气数据\n   * @returns {string} 天气描述\n   */\n  generateWeatherDescription(weatherData) {\n    if (!weatherData) return '无法获取天气信息';\n    const {\n      city,\n      temp,\n      condition\n    } = weatherData;\n    let description = `${city}当前天气${condition}，气温${temp}℃`;\n\n    // 根据温度和天气状况给出穿衣建议\n    if (temp >= 30) {\n      description += '。天气炎热，注意防暑降温，建议穿轻薄透气的衣物。';\n    } else if (temp >= 20) {\n      description += '。天气温暖，建议穿短袖或薄外套。';\n    } else if (temp >= 10) {\n      description += '。天气微凉，建议穿长袖衣物或薄外套。';\n    } else {\n      description += '。天气寒冷，注意保暖，建议穿厚外套。';\n    }\n\n    // 根据天气状况添加额外建议\n    if (condition.includes('雨')) {\n      description += '外出记得带伞哦！';\n    } else if (condition.includes('晴')) {\n      description += '阳光不错，记得防晒！';\n    } else if (condition.includes('雪')) {\n      description += '路面可能湿滑，出行注意安全！';\n    } else if (condition.includes('雾') || condition.includes('霾')) {\n      description += '空气质量不佳，建议戴口罩出行。';\n    }\n    return description;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["axios","WeatherService","constructor","apiKey","apiUrl","getNowWeather","location","console","log","response","get","params","key","data","code","weatherData","city","getCityNameByCode","temp","now","condition","text","humidity","windSpeed","windDir","updateTime","success","description","generateWeatherDescription","error","getDefaultWeatherData","message","cityMap","cityName","Date","Math","floor","random","conditions","length","toISOString","includes"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\n\nclass WeatherService {\n  constructor() {\n    this.apiKey = '1234567890abcdef1234567890abcdef'; // 请替换为实际的和风天气API密钥\n    this.apiUrl = 'https://devapi.qweather.com/v7';\n  }\n\n  /**\n   * 获取当前天气信息\n   * @param {string} location - 位置ID，默认为北京(101010100)\n   * @returns {Promise<Object>} 天气数据对象\n   */\n  async getNowWeather(location = '101010100') {\n    try {\n      console.log(`正在获取位置 ${location} 的天气数据...`);\n      \n      const response = await axios.get(`${this.apiUrl}/weather/now`, {\n        params: {\n          location,\n          key: this.apiKey\n        }\n      });\n      \n      console.log('获取天气数据成功:', response.data);\n      \n      if (response.data.code === '200') {\n        const weatherData = {\n          city: this.getCityNameByCode(location),\n          temp: response.data.now.temp,\n          condition: response.data.now.text,\n          humidity: response.data.now.humidity,\n          windSpeed: response.data.now.windSpeed,\n          windDir: response.data.now.windDir,\n          updateTime: response.data.updateTime\n        };\n        \n        return {\n          success: true,\n          data: weatherData,\n          description: this.generateWeatherDescription(weatherData)\n        };\n      } else {\n        console.error('和风天气API返回错误:', response.data);\n        return {\n          success: false,\n          error: `和风天气API返回错误: ${response.data.code}`,\n          // 返回一个默认的天气数据\n          data: this.getDefaultWeatherData(location)\n        };\n      }\n    } catch (error) {\n      console.error('获取天气数据失败:', error);\n      return {\n        success: false,\n        error: error.message,\n        // 返回一个默认的天气数据\n        data: this.getDefaultWeatherData(location)\n      };\n    }\n  }\n\n  /**\n   * 根据位置代码获取城市名称\n   * @param {string} code - 位置代码\n   * @returns {string} 城市名称\n   */\n  getCityNameByCode(code) {\n    const cityMap = {\n      '101010100': '北京',\n      '101020100': '上海',\n      '101280101': '广州',\n      '101280601': '深圳',\n      '101210101': '杭州',\n      '101190101': '南京',\n      '101200101': '武汉',\n      '101110101': '西安',\n      '101230101': '福州',\n      '101270101': '成都'\n    };\n    \n    return cityMap[code] || '未知城市';\n  }\n\n  /**\n   * 获取默认天气数据（API失败时使用）\n   * @param {string} location - 位置ID\n   * @returns {Object} 默认天气数据\n   */\n  getDefaultWeatherData(location) {\n    const cityName = this.getCityNameByCode(location);\n    const now = new Date();\n    const temp = Math.floor(15 + Math.random() * 10); // 15-25度之间的随机温度\n    \n    const conditions = ['晴', '多云', '阴', '小雨', '晴间多云'];\n    const condition = conditions[Math.floor(Math.random() * conditions.length)];\n    \n    return {\n      city: cityName,\n      temp: temp,\n      condition: condition,\n      humidity: '60',\n      windSpeed: '3',\n      windDir: '东南风',\n      updateTime: now.toISOString()\n    };\n  }\n\n  /**\n   * 生成天气描述文本\n   * @param {Object} weatherData - 天气数据\n   * @returns {string} 天气描述\n   */\n  generateWeatherDescription(weatherData) {\n    if (!weatherData) return '无法获取天气信息';\n\n    const { city, temp, condition } = weatherData;\n    \n    let description = `${city}当前天气${condition}，气温${temp}℃`;\n    \n    // 根据温度和天气状况给出穿衣建议\n    if (temp >= 30) {\n      description += '。天气炎热，注意防暑降温，建议穿轻薄透气的衣物。';\n    } else if (temp >= 20) {\n      description += '。天气温暖，建议穿短袖或薄外套。';\n    } else if (temp >= 10) {\n      description += '。天气微凉，建议穿长袖衣物或薄外套。';\n    } else {\n      description += '。天气寒冷，注意保暖，建议穿厚外套。';\n    }\n    \n    // 根据天气状况添加额外建议\n    if (condition.includes('雨')) {\n      description += '外出记得带伞哦！';\n    } else if (condition.includes('晴')) {\n      description += '阳光不错，记得防晒！';\n    } else if (condition.includes('雪')) {\n      description += '路面可能湿滑，出行注意安全！';\n    } else if (condition.includes('雾') || condition.includes('霾')) {\n      description += '空气质量不佳，建议戴口罩出行。';\n    }\n    \n    return description;\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}