{"ast":null,"code":"import { computed, ref, onMounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'ChatAssistant',\n  components: {\n    // 暂时移除表情选择器组件\n  },\n  setup() {\n    const store = useStore();\n    const inputText = ref('');\n    const emojiPickerVisible = ref(false);\n    const messageContainer = ref(null);\n    const assistantAvatar = ref(null);\n\n    // Vuex 状态\n    const messages = computed(() => store.getters['chat/messages']);\n    const isTyping = computed(() => store.getters['chat/isTyping']);\n    const currentEmotion = computed(() => store.getters['chat/currentEmotion']);\n\n    // 发送欢迎消息\n    onMounted(() => {\n      console.log('[ChatView] 组件挂载，当前消息列表:', messages.value);\n      // 仅当没有消息时添加欢迎消息\n      if (messages.value.length === 0) {\n        console.log('[ChatView] 发送欢迎消息');\n        store.commit('chat/addMessage', {\n          text: '你好呀！我是糖球助手，有什么可以帮到你的吗？可以问我天气哦~ 😊',\n          type: 'assistant',\n          timestamp: new Date()\n        });\n      }\n      scrollToBottom();\n    });\n\n    // 发送消息方法\n    const sendMessage = () => {\n      const text = inputText.value.trim();\n      console.log('[ChatView] 准备发送消息:', text);\n      if (!text || isTyping.value) return;\n      try {\n        // 添加用户消息\n        store.commit('chat/addMessage', {\n          text,\n          type: 'user',\n          timestamp: new Date()\n        });\n\n        // 处理消息并生成回复\n        store.dispatch('chat/sendMessage', {\n          text,\n          type: 'user'\n        });\n\n        // 清空输入框\n        inputText.value = '';\n\n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('[ChatView] 发送消息失败:', error);\n      }\n    };\n\n    // 格式化时间\n    const formatTime = timestamp => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messageContainer.value) {\n          messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\n        }\n      });\n    };\n\n    // 处理动作按钮点击\n    const handleAction = action => {\n      console.log('[ChatView] 处理动作:', action);\n      // 这里可以扩展各种交互动作\n    };\n\n    // 获取动作按钮标签\n    const getActionLabel = action => {\n      const labels = {\n        'sound-purr': '听呼噜声',\n        'sound-rain': '听雨声',\n        'sound-music': '听音乐',\n        'animation-bounce': '一起跳舞',\n        'animation-think': '思考中'\n      };\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\n    };\n\n    // 插入表情符号\n    const insertEmoji = emoji => {\n      if (!emoji) return;\n      const textarea = inputArea.value;\n      if (textarea) {\n        const start = textarea.selectionStart;\n        const end = textarea.selectionEnd;\n        inputText.value = inputText.value.substring(0, start) + emoji.char + inputText.value.substring(end);\n        nextTick(() => {\n          textarea.focus();\n          textarea.selectionStart = textarea.selectionEnd = start + emoji.char.length;\n        });\n      }\n      emojiPickerVisible.value = false;\n    };\n\n    // 监听消息变化\n    watch(() => messages.value.length, () => {\n      scrollToBottom();\n    });\n    return {\n      inputText,\n      emojiPickerVisible,\n      messageContainer,\n      assistantAvatar,\n      messages,\n      isTyping,\n      currentEmotion,\n      sendMessage,\n      formatTime,\n      scrollToBottom,\n      handleAction,\n      getActionLabel,\n      insertEmoji\n    };\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","nextTick","useStore","name","components","setup","store","inputText","emojiPickerVisible","messageContainer","assistantAvatar","messages","getters","isTyping","currentEmotion","console","log","value","length","commit","text","type","timestamp","Date","scrollToBottom","sendMessage","trim","dispatch","error","formatTime","date","toLocaleTimeString","hour","minute","scrollTop","scrollHeight","handleAction","action","getActionLabel","labels","sound","insertEmoji","emoji","textarea","inputArea","start","selectionStart","end","selectionEnd","substring","char","focus","watch"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\views\\ChatAssistant.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 聊天头部 -->\n    <div class=\"chat-header sweet-card\">\n      <div class=\"assistant-info\">\n        <div class=\"assistant-avatar\" :class=\"currentEmotion\" ref=\"assistantAvatar\">\n          <div class=\"mochi-body\">\n            <div class=\"mochi-face\">\n              <div class=\"eyes\">\n                <div class=\"eye\"></div>\n                <div class=\"eye\"></div>\n              </div>\n              <div class=\"mouth\" :class=\"currentEmotion\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"assistant-status\">\n          <h2>糖球助手</h2>\n          <p class=\"status\" v-if=\"isTyping\">正在输入中...</p>\n          <p class=\"status\" v-else>在线</p>\n        </div>\n      </div>\n    </div>\n\n    <!-- 聊天内容区 -->\n    <div class=\"chat-messages\" ref=\"messageContainer\">\n      <div v-for=\"(message, index) in messages\" \n           :key=\"index\" \n           class=\"message-wrapper\"\n           :class=\"message.type\">\n        <div class=\"message sweet-card\">\n          <!-- 用户消息 -->\n          <template v-if=\"message.type === 'user'\">\n            <div class=\"message-content\">{{ message.text }}</div>\n            <div class=\"message-time\">{{ formatTime(message.timestamp || new Date()) }}</div>\n          </template>\n          \n          <!-- 助手消息 -->\n          <template v-else>\n            <div class=\"message-content\">\n              <div class=\"text\">{{ message.text }}</div>\n              \n              <!-- 天气信息卡片 -->\n              <div v-if=\"message.weather\" class=\"weather-card\">\n                <div class=\"weather-icon\" :class=\"message.weather.condition\"></div>\n                <div class=\"weather-info\">\n                  <div class=\"temperature\">{{ message.weather.temperature }}°C</div>\n                  <div class=\"description\">{{ message.weather.description }}</div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- 动作按钮 -->\n            <div v-if=\"message.actions\" class=\"message-actions\">\n              <button v-for=\"(action, index) in message.actions\"\n                      :key=\"index\"\n                      class=\"action-btn\"\n                      @click=\"handleAction(action)\">\n                {{ getActionLabel(action) }}\n              </button>\n            </div>\n          </template>\n        </div>\n      </div>\n    </div>\n\n    <!-- 输入区域 -->\n    <div class=\"chat-input sweet-card\">\n      <textarea v-model=\"inputText\"\n                @keyup.enter.exact=\"sendMessage\"\n                placeholder=\"和糖球说说话吧...\"\n                :disabled=\"isTyping\"\n                ref=\"inputArea\"></textarea>\n      <div class=\"input-actions\">\n        <div class=\"emoji-picker-wrapper\">\n          <button class=\"emoji-btn\" @click=\"emojiPickerVisible = !emojiPickerVisible\">\n            <span class=\"emoji-icon\">😊</span>\n          </button>\n          <!-- 表情选择器组件占位符 -->\n        </div>\n        <button class=\"send-btn\"\n                :disabled=\"!inputText.trim() || isTyping\"\n                @click=\"sendMessage\">\n          发送\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed, ref, onMounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\n\nexport default {\n  name: 'ChatAssistant',\n  components: {\n    // 暂时移除表情选择器组件\n  },\n  setup() {\n    const store = useStore();\n    const inputText = ref('');\n    const emojiPickerVisible = ref(false);\n    const messageContainer = ref(null);\n    const assistantAvatar = ref(null);\n    \n    // Vuex 状态\n    const messages = computed(() => store.getters['chat/messages']);\n    const isTyping = computed(() => store.getters['chat/isTyping']);\n    const currentEmotion = computed(() => store.getters['chat/currentEmotion']);\n\n    // 发送欢迎消息\n    onMounted(() => {\n      console.log('[ChatView] 组件挂载，当前消息列表:', messages.value);\n      // 仅当没有消息时添加欢迎消息\n      if (messages.value.length === 0) {\n        console.log('[ChatView] 发送欢迎消息');\n        store.commit('chat/addMessage', {\n          text: '你好呀！我是糖球助手，有什么可以帮到你的吗？可以问我天气哦~ 😊',\n          type: 'assistant',\n          timestamp: new Date()\n        });\n      }\n      scrollToBottom();\n    });\n    \n    // 发送消息方法\n    const sendMessage = () => {\n      const text = inputText.value.trim();\n      console.log('[ChatView] 准备发送消息:', text);\n      \n      if (!text || isTyping.value) return;\n      \n      try {\n        // 添加用户消息\n        store.commit('chat/addMessage', {\n          text,\n          type: 'user',\n          timestamp: new Date()\n        });\n        \n        // 处理消息并生成回复\n        store.dispatch('chat/sendMessage', {\n          text,\n          type: 'user'\n        });\n        \n        // 清空输入框\n        inputText.value = '';\n        \n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('[ChatView] 发送消息失败:', error);\n      }\n    };\n    \n    // 格式化时间\n    const formatTime = (timestamp) => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n    \n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messageContainer.value) {\n          messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\n        }\n      });\n    };\n    \n    // 处理动作按钮点击\n    const handleAction = (action) => {\n      console.log('[ChatView] 处理动作:', action);\n      // 这里可以扩展各种交互动作\n    };\n    \n    // 获取动作按钮标签\n    const getActionLabel = (action) => {\n      const labels = {\n        'sound-purr': '听呼噜声',\n        'sound-rain': '听雨声',\n        'sound-music': '听音乐',\n        'animation-bounce': '一起跳舞',\n        'animation-think': '思考中'\n      };\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\n    };\n    \n    // 插入表情符号\n    const insertEmoji = (emoji) => {\n      if (!emoji) return;\n      \n      const textarea = inputArea.value;\n      if (textarea) {\n        const start = textarea.selectionStart;\n        const end = textarea.selectionEnd;\n        inputText.value = inputText.value.substring(0, start) + emoji.char + inputText.value.substring(end);\n        nextTick(() => {\n          textarea.focus();\n          textarea.selectionStart = textarea.selectionEnd = start + emoji.char.length;\n        });\n      }\n      emojiPickerVisible.value = false;\n    };\n    \n    // 监听消息变化\n    watch(() => messages.value.length, () => {\n      scrollToBottom();\n    });\n\n    return {\n      inputText,\n      emojiPickerVisible,\n      messageContainer,\n      assistantAvatar,\n      messages,\n      isTyping,\n      currentEmotion,\n      sendMessage,\n      formatTime,\n      scrollToBottom,\n      handleAction,\n      getActionLabel,\n      insertEmoji\n    };\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  max-width: 800px;\n  margin: 0 auto;\n  height: calc(100vh - 100px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n\n.chat-header {\n  padding: 15px;\n  margin-bottom: 20px;\n}\n\n.assistant-info {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.assistant-avatar {\n  width: 60px;\n  height: 60px;\n  position: relative;\n}\n\n.mochi-body {\n  width: 100%;\n  height: 100%;\n  background: white;\n  border-radius: 50%;\n  position: relative;\n  animation: bounce 2s ease-in-out infinite;\n}\n\n.mochi-face {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 70%;\n  height: 70%;\n}\n\n.eyes {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 30%;\n}\n\n.eye {\n  width: 8px;\n  height: 8px;\n  background: #333;\n  border-radius: 50%;\n}\n\n.mouth {\n  width: 16px;\n  height: 8px;\n  border-bottom: 2px solid #333;\n  border-radius: 50%;\n  margin: 8px auto 0;\n}\n\n.mouth.happy {\n  border-bottom-color: transparent;\n  border-top: 2px solid #333;\n  transform: translateY(2px);\n}\n\n.mouth.sad {\n  transform: translateY(-2px);\n}\n\n.assistant-status h2 {\n  margin: 0;\n  color: var(--text-primary, #333);\n}\n\n.status {\n  margin: 5px 0 0;\n  color: var(--text-secondary, #666);\n  font-size: 0.9rem;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  margin-bottom: 10px;\n}\n\n.message-wrapper.user {\n  justify-content: flex-end;\n}\n\n.message {\n  max-width: 70%;\n  padding: 12px;\n}\n\n.message-content {\n  margin-bottom: 5px;\n}\n\n.message-time {\n  font-size: 0.8rem;\n  color: var(--text-secondary, #666);\n  text-align: right;\n}\n\n.weather-card {\n  margin-top: 10px;\n  padding: 10px;\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: var(--border-radius, 8px);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.weather-icon {\n  font-size: 2rem;\n}\n\n.weather-icon.sunny::after {\n  content: '☀️';\n}\n\n.weather-icon.cloudy::after {\n  content: '☁️';\n}\n\n.weather-icon.rainy::after {\n  content: '🌧️';\n}\n\n.message-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  background: var(--primary-purple, #7b68ee);\n  color: white;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.3s ease;\n}\n\n.action-btn:hover {\n  background: var(--primary-pink, #ff69b4);\n  transform: translateY(-2px);\n}\n\n.chat-input {\n  margin-top: 20px;\n  padding: 15px;\n}\n\ntextarea {\n  width: 100%;\n  height: 80px;\n  padding: 10px;\n  border: 2px solid var(--primary-purple, #7b68ee);\n  border-radius: var(--border-radius, 8px);\n  resize: none;\n  font-family: inherit;\n  margin-bottom: 10px;\n}\n\ntextarea:focus {\n  outline: none;\n  border-color: var(--primary-pink, #ff69b4);\n}\n\n.input-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.emoji-btn, .send-btn {\n  padding: 8px 15px;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.emoji-btn {\n  background: none;\n  font-size: 1.2rem;\n}\n\n.send-btn {\n  background: var(--primary-purple, #7b68ee);\n  color: white;\n}\n\n.send-btn:hover {\n  background: var(--primary-pink, #ff69b4);\n  transform: translateY(-2px);\n}\n\n.send-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* 动画 */\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes think {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n}\n\n.assistant-avatar.thinking .mochi-body {\n  animation: think 2s ease-in-out infinite;\n}\n\n.assistant-avatar.happy .mouth {\n  border-bottom-color: transparent;\n  border-top: 2px solid #333;\n  transform: translateY(2px);\n}\n\n.assistant-avatar.sad .mouth {\n  transform: translateY(-2px);\n}\n\n.assistant-avatar.sleepy .eyes {\n  height: 2px;\n  background: #333;\n  border-radius: 2px;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: calc(100vh - 80px);\n    padding: 10px;\n  }\n  \n  .message {\n    max-width: 85%;\n  }\n  \n  .chat-input {\n    margin-top: 10px;\n  }\n  \n  textarea {\n    height: 60px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}