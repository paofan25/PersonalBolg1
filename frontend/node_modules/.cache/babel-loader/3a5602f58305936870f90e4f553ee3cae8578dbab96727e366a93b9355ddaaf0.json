{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport CryptoJS from 'crypto-js';\nclass XfyunService {\n  constructor() {\n    // 检查环境变量\n    if (typeof process === 'undefined' || !process.env) {\n      console.error('环境变量未正确加载');\n      throw new Error('环境变量未正确加载');\n    }\n\n    // 使用环境变量\n    this.appid = process.env.VUE_APP_XFYUN_APPID;\n    this.apiKey = process.env.VUE_APP_XFYUN_API_KEY;\n    this.apiSecret = process.env.VUE_APP_XFYUN_API_SECRET;\n    if (!this.appid || !this.apiKey || !this.apiSecret) {\n      console.error('讯飞服务配置缺失');\n      // 使用硬编码的备用值\n      this.appid = 'bb840282';\n      this.apiKey = '178baf6c846eaeb5ea632cdab055b9cd';\n      this.apiSecret = 'YjMzMmE3NzczOWExZjQ3ZWI1NWY3OWJi';\n      console.log('使用备用配置');\n    }\n    console.log('XfyunService initialized with:', {\n      appid: this.appid,\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      hasSecret: !!this.apiSecret\n    });\n\n    // 使用 Spark Lite 版本\n    this.domain = 'lite';\n    this.url = 'wss://spark-api.xf-yun.com/v1.1/chat';\n  }\n\n  // 生成鉴权url\n  getAuthUrl() {\n    try {\n      const host = 'spark-api.xf-yun.com/v1.1/chat';\n      const date = new Date().toUTCString();\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v1.1/chat HTTP/1.1`;\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n      return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\n    } catch (error) {\n      console.error('生成鉴权URL失败:', error);\n      throw new Error('生成鉴权URL失败');\n    }\n  }\n\n  // 建立WebSocket连接\n  createWebSocket() {\n    return new Promise((resolve, reject) => {\n      try {\n        const url = this.getAuthUrl();\n        console.log('Creating WebSocket connection...');\n        const ws = new WebSocket(url);\n        let connectionTimeout = setTimeout(() => {\n          ws.close();\n          reject(new Error('WebSocket连接超时'));\n        }, 10000);\n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n          clearTimeout(connectionTimeout);\n          resolve(ws);\n        };\n        ws.onerror = error => {\n          console.error('WebSocket连接错误:', error);\n          clearTimeout(connectionTimeout);\n          reject(new Error('WebSocket连接失败'));\n        };\n        ws.onclose = event => {\n          console.log('WebSocket连接关闭:', event);\n          clearTimeout(connectionTimeout);\n        };\n      } catch (error) {\n        console.error('创建WebSocket失败:', error);\n        reject(new Error('创建WebSocket失败'));\n      }\n    });\n  }\n\n  // 发送消息并获取回复\n  async sendMessage(text) {\n    try {\n      console.log('Sending message:', text);\n      const messages = [{\n        role: 'user',\n        content: text\n      }];\n      return await this.chat(messages);\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  }\n\n  // 聊天核心方法\n  async chat(messages) {\n    try {\n      console.log('Starting chat with messages:', messages);\n      const ws = await this.createWebSocket();\n      return new Promise((resolve, reject) => {\n        let responseText = '';\n        let messageTimeout;\n        const resetMessageTimeout = () => {\n          clearTimeout(messageTimeout);\n          messageTimeout = setTimeout(() => {\n            ws.close();\n            reject(new Error('消息接收超时'));\n          }, 30000);\n        };\n        ws.onmessage = event => {\n          try {\n            resetMessageTimeout();\n            const response = JSON.parse(event.data);\n            console.log('Received message:', response);\n            if (response.header.code !== 0) {\n              console.error('请求错误:', response.header.message);\n              ws.close();\n              reject(new Error(response.header.message));\n              return;\n            }\n            const payload = response.payload;\n            const choices = payload.choices;\n            const status = choices.status;\n            const text = choices.text?.[0]?.content || '';\n            responseText += text;\n            if (status === 2) {\n              console.log('Chat completed:', responseText);\n              clearTimeout(messageTimeout);\n              ws.close();\n              resolve(responseText);\n            }\n          } catch (error) {\n            console.error('处理消息失败:', error);\n            clearTimeout(messageTimeout);\n            ws.close();\n            reject(new Error('处理消息失败'));\n          }\n        };\n        const data = {\n          header: {\n            app_id: this.appid,\n            uid: 'user_' + Date.now()\n          },\n          parameter: {\n            chat: {\n              domain: this.domain,\n              temperature: 0.5,\n              max_tokens: 2048\n            }\n          },\n          payload: {\n            message: {\n              text: messages.map(msg => ({\n                role: msg.role,\n                content: msg.content\n              }))\n            }\n          }\n        };\n        console.log('Sending data:', data);\n        resetMessageTimeout();\n        ws.send(JSON.stringify(data));\n      });\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('Analyzing emotion for text:', text);\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      const response = await this.sendMessage(prompt);\n      const emotion = response.toLowerCase().trim();\n      console.log('Emotion analysis result:', emotion);\n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\n// 创建单例实例\nconst xfyunService = new XfyunService();\nconsole.log('XfyunService instance created');\nexport default xfyunService;","map":{"version":3,"names":["CryptoJS","XfyunService","constructor","process","env","console","error","Error","appid","VUE_APP_XFYUN_APPID","apiKey","VUE_APP_XFYUN_API_KEY","apiSecret","VUE_APP_XFYUN_API_SECRET","log","substring","hasSecret","domain","url","getAuthUrl","host","date","Date","toUTCString","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","createWebSocket","Promise","resolve","reject","ws","WebSocket","connectionTimeout","setTimeout","close","onopen","clearTimeout","onerror","onclose","event","sendMessage","text","messages","role","content","chat","responseText","messageTimeout","resetMessageTimeout","onmessage","response","JSON","parse","data","header","code","message","payload","choices","status","app_id","uid","now","parameter","temperature","max_tokens","map","msg","send","analyzeEmotion","prompt","emotion","toLowerCase","trim","includes","xfyunService"],"sources":["E:/code/PersonalBolg1/frontend/src/services/xfyun.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nclass XfyunService {\r\n  constructor() {\r\n    // 检查环境变量\r\n    if (typeof process === 'undefined' || !process.env) {\r\n      console.error('环境变量未正确加载');\r\n      throw new Error('环境变量未正确加载');\r\n    }\r\n\r\n    // 使用环境变量\r\n    this.appid = process.env.VUE_APP_XFYUN_APPID;\r\n    this.apiKey = process.env.VUE_APP_XFYUN_API_KEY;\r\n    this.apiSecret = process.env.VUE_APP_XFYUN_API_SECRET;\r\n\r\n    if (!this.appid || !this.apiKey || !this.apiSecret) {\r\n      console.error('讯飞服务配置缺失');\r\n      // 使用硬编码的备用值\r\n      this.appid = 'bb840282';\r\n      this.apiKey = '178baf6c846eaeb5ea632cdab055b9cd';\r\n      this.apiSecret = 'YjMzMmE3NzczOWExZjQ3ZWI1NWY3OWJi';\r\n      console.log('使用备用配置');\r\n    }\r\n\r\n    console.log('XfyunService initialized with:', {\r\n      appid: this.appid,\r\n      apiKey: this.apiKey?.substring(0, 10) + '...',\r\n      hasSecret: !!this.apiSecret\r\n    });\r\n\r\n    // 使用 Spark Lite 版本\r\n    this.domain = 'lite';\r\n    this.url = 'wss://spark-api.xf-yun.com/v1.1/chat';\r\n  }\r\n\r\n  // 生成鉴权url\r\n  getAuthUrl() {\r\n    try {\r\n      const host = 'spark-api.xf-yun.com/v1.1/chat';\r\n      const date = new Date().toUTCString();\r\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v1.1/chat HTTP/1.1`;\r\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\r\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\r\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\r\n      const authorization = btoa(authorizationOrigin);\r\n      return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\r\n    } catch (error) {\r\n      console.error('生成鉴权URL失败:', error);\r\n      throw new Error('生成鉴权URL失败');\r\n    }\r\n  }\r\n\r\n  // 建立WebSocket连接\r\n  createWebSocket() {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const url = this.getAuthUrl();\r\n        console.log('Creating WebSocket connection...');\r\n        const ws = new WebSocket(url);\r\n        \r\n        let connectionTimeout = setTimeout(() => {\r\n          ws.close();\r\n          reject(new Error('WebSocket连接超时'));\r\n        }, 10000);\r\n        \r\n        ws.onopen = () => {\r\n          console.log('WebSocket连接已建立');\r\n          clearTimeout(connectionTimeout);\r\n          resolve(ws);\r\n        };\r\n        \r\n        ws.onerror = (error) => {\r\n          console.error('WebSocket连接错误:', error);\r\n          clearTimeout(connectionTimeout);\r\n          reject(new Error('WebSocket连接失败'));\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('WebSocket连接关闭:', event);\r\n          clearTimeout(connectionTimeout);\r\n        };\r\n      } catch (error) {\r\n        console.error('创建WebSocket失败:', error);\r\n        reject(new Error('创建WebSocket失败'));\r\n      }\r\n    });\r\n  }\r\n\r\n  // 发送消息并获取回复\r\n  async sendMessage(text) {\r\n    try {\r\n      console.log('Sending message:', text);\r\n      const messages = [{ role: 'user', content: text }];\r\n      return await this.chat(messages);\r\n    } catch (error) {\r\n      console.error('发送消息失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 聊天核心方法\r\n  async chat(messages) {\r\n    try {\r\n      console.log('Starting chat with messages:', messages);\r\n      const ws = await this.createWebSocket();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        let responseText = '';\r\n        let messageTimeout;\r\n        \r\n        const resetMessageTimeout = () => {\r\n          clearTimeout(messageTimeout);\r\n          messageTimeout = setTimeout(() => {\r\n            ws.close();\r\n            reject(new Error('消息接收超时'));\r\n          }, 30000);\r\n        };\r\n        \r\n        ws.onmessage = (event) => {\r\n          try {\r\n            resetMessageTimeout();\r\n            const response = JSON.parse(event.data);\r\n            console.log('Received message:', response);\r\n            \r\n            if (response.header.code !== 0) {\r\n              console.error('请求错误:', response.header.message);\r\n              ws.close();\r\n              reject(new Error(response.header.message));\r\n              return;\r\n            }\r\n            \r\n            const payload = response.payload;\r\n            const choices = payload.choices;\r\n            const status = choices.status;\r\n            const text = choices.text?.[0]?.content || '';\r\n            \r\n            responseText += text;\r\n            \r\n            if (status === 2) {\r\n              console.log('Chat completed:', responseText);\r\n              clearTimeout(messageTimeout);\r\n              ws.close();\r\n              resolve(responseText);\r\n            }\r\n          } catch (error) {\r\n            console.error('处理消息失败:', error);\r\n            clearTimeout(messageTimeout);\r\n            ws.close();\r\n            reject(new Error('处理消息失败'));\r\n          }\r\n        };\r\n        \r\n        const data = {\r\n          header: {\r\n            app_id: this.appid,\r\n            uid: 'user_' + Date.now()\r\n          },\r\n          parameter: {\r\n            chat: {\r\n              domain: this.domain,\r\n              temperature: 0.5,\r\n              max_tokens: 2048\r\n            }\r\n          },\r\n          payload: {\r\n            message: {\r\n              text: messages.map(msg => ({\r\n                role: msg.role,\r\n                content: msg.content\r\n              }))\r\n            }\r\n          }\r\n        };\r\n        \r\n        console.log('Sending data:', data);\r\n        resetMessageTimeout();\r\n        ws.send(JSON.stringify(data));\r\n      });\r\n    } catch (error) {\r\n      console.error('聊天请求失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 分析情绪\r\n  async analyzeEmotion(text) {\r\n    try {\r\n      console.log('Analyzing emotion for text:', text);\r\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\r\n文本：${text}\r\n情绪：`;\r\n      \r\n      const response = await this.sendMessage(prompt);\r\n      const emotion = response.toLowerCase().trim();\r\n      \r\n      console.log('Emotion analysis result:', emotion);\r\n      \r\n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\r\n        return emotion;\r\n      }\r\n      return 'neutral';\r\n    } catch (error) {\r\n      console.error('情绪分析失败:', error);\r\n      return 'neutral';\r\n    }\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst xfyunService = new XfyunService();\r\nconsole.log('XfyunService instance created');\r\n\r\nexport default xfyunService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}