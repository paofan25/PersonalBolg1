{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// eslint-disable-next-line no-unused-vars\nimport XfyunService from '@/services/xfyun';\nimport SparkService from '@/services/sparkAI';\n\n// 创建SparkService实例\nconst sparkService = new SparkService();\nexport default {\n  namespaced: true,\n  state: {\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'happy',\n    weatherInfo: null,\n    soundEnabled: true,\n    typingSound: null,\n    messageSound: null\n  },\n  getters: {\n    messages: state => state.messages,\n    currentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    addMessage(state, message) {\n      state.messages.push(message);\n    },\n    setTyping(state, isTyping) {\n      state.isTyping = isTyping;\n    },\n    changeEmotion(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    setWeatherInfo(state, info) {\n      state.weatherInfo = info;\n    },\n    toggleSoundEffects(state) {\n      state.soundEnabled = !state.soundEnabled;\n    },\n    clearMessages(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    async sendMessage({\n      commit,\n      state,\n      dispatch\n    }, text) {\n      // 确保text是字符串\n      if (!text || typeof text !== 'string' || !text.trim()) return;\n\n      // 添加用户消息\n      const userMessage = {\n        text,\n        isUser: true,\n        timestamp: new Date()\n      };\n      commit('addMessage', userMessage);\n\n      // 设置正在输入状态\n      commit('setTyping', true);\n\n      // 分析情绪\n      dispatch('analyzeEmotion', text);\n\n      // 检查是否是天气相关问题\n      const isWeatherQuery = /天气|温度|下雨|下雪|冷|热|气温|阴天|晴天|多云/i.test(text);\n      if (isWeatherQuery) {\n        await dispatch('checkWeather');\n      }\n      try {\n        console.log('尝试使用星火大模型生成回复...');\n        // 默认使用本地回退逻辑生成一个回复\n        let response = generateResponse(text, state.currentEmotion);\n\n        // 尝试使用星火大模型API生成回复\n        try {\n          const aiResponse = await sparkService.generateResponse(text, state.currentEmotion);\n          // 如果成功获取AI回复，则使用AI回复\n          if (aiResponse && aiResponse.length > 0) {\n            response = aiResponse;\n            console.log('成功获取AI回复');\n          }\n        } catch (aiError) {\n          console.error('使用AI生成回复失败，使用本地回退:', aiError);\n          // 使用本地生成的回复，已在上面生成\n        }\n\n        // 添加助手消息\n        const assistantMessage = {\n          text: response,\n          isUser: false,\n          timestamp: new Date()\n        };\n        commit('addMessage', assistantMessage);\n      } catch (error) {\n        console.error('获取回复失败:', error);\n        // 错误发生时使用一个简单的回退回复\n        const assistantMessage = {\n          text: '糖球遇到一点小问题，请稍后再试~ (⁠◍•ᴗ•◍)',\n          isUser: false,\n          timestamp: new Date()\n        };\n        commit('addMessage', assistantMessage);\n      } finally {\n        // 无论成功失败，都关闭输入状态\n        commit('setTyping', false);\n      }\n    },\n    analyzeEmotion({\n      commit\n    }, text) {\n      if (typeof text !== 'string') return;\n      const emotion = analyzeEmotion(text);\n      commit('changeEmotion', emotion);\n    },\n    async checkWeather({\n      commit\n    }) {\n      try {\n        // 模拟天气数据\n        const weatherInfo = {\n          city: '北京',\n          temp: Math.round(10 + Math.random() * 20),\n          condition: ['晴朗', '多云', '阴天', '小雨'][Math.floor(Math.random() * 4)],\n          description: '今天天气不错，适合出门玩耍~'\n        };\n        commit('setWeatherInfo', weatherInfo);\n      } catch (error) {\n        console.error('获取天气信息失败', error);\n      }\n    },\n    clearMessages({\n      commit\n    }) {\n      commit('clearMessages');\n    }\n  }\n};\n\n// 辅助函数\nfunction analyzeEmotion(text) {\n  if (typeof text !== 'string') return 'neutral';\n\n  // 简单的关键词匹配来确定情绪\n  if (/开心|喜欢|棒|好|爱|感谢|谢谢|高兴/i.test(text)) {\n    return 'happy';\n  } else if (/难过|伤心|痛苦|悲|哭|嘤/i.test(text)) {\n    return 'sad';\n  } else if (/生气|烦|讨厌|恨|滚|笨蛋|蠢/i.test(text)) {\n    return 'angry';\n  } else if (/惊讶|哇|天啊|不会吧|不可能|真的|竟然/i.test(text)) {\n    return 'surprised';\n  } else if (/困惑|为什么|怎么|不懂|不理解|疑惑|问题/i.test(text)) {\n    return 'confused';\n  } else if (/困|累|疲倦|好困|好累|睡觉/i.test(text)) {\n    return 'tired';\n  } else if (/激动|兴奋|期待|等不及/i.test(text)) {\n    return 'excited';\n  }\n  return 'neutral';\n}\n\n// 本地回退函数，当API调用失败时使用\nfunction generateResponse(text, emotion) {\n  if (typeof text !== 'string') return '糖球不太明白你的意思呢~ (⁠◍•ᴗ•◍)';\n\n  // 根据用户输入和当前情绪生成回复\n  const greetings = ['你好', '嗨', '早上好', '晚上好', '你好呀'];\n  if (greetings.some(g => text.includes(g))) {\n    return `嗨嗨！我是糖球呀~ 有什么我能帮到你的吗？ (⁠◍•ᴗ•◍)`;\n  }\n  if (text.includes('介绍') && text.includes('甜梦星球')) {\n    return '甜梦星球是一个充满可爱角色的梦幻世界~我是这里的居民糖球，很高兴认识你！这里有博客、小游戏和许多好玩的东西呢 (⁠◍•ᴗ•◍)';\n  }\n  if (text.includes('天气')) {\n    return '我正在查看窗外的天气呢~稍等一下，马上告诉你！(⁠◍•ᴗ•◍)';\n  }\n  if (text.includes('游戏')) {\n    return '想玩游戏吗？我们有记忆配对和云朵农场哦！点击导航栏的\"游戏\"就能找到啦~ (⁠◍•ᴗ•◍)';\n  }\n  const emotions = {\n    happy: ['看到你这么开心，我也跟着高兴起来了！(⁠◍•ᴗ•◍)', '嘿嘿，糖球也很开心呢~一起来分享快乐吧！(⁠◍•ᴗ•◍)', '开心的日子真美好，希望你每天都这么快乐！(⁠◍•ᴗ•◍)'],\n    sad: ['别难过啦，糖球给你一个柔软的抱抱~ (⁠◍•ᴗ•◍)', '我变成一个毛绒抱枕陪着你，伤心的时候依靠我吧 (⁠◍•ᴗ•◍)', '糖球不喜欢看到你难过，来听听轻松的音乐吧~ (⁠◍•ᴗ•◍)'],\n    angry: ['深呼吸~生气对身体不好，糖球陪你冷静一下 (⁠◍•ᴗ•◍)', '我变成一个解压球，来捏捏我消消气吧！(⁠◍•ᴗ•◍)', '糖球在这里，有什么委屈可以告诉我哦~ (⁠◍•ᴗ•◍)'],\n    confused: ['看起来你有些疑惑，需要我解释清楚吗？(⁠◍•ᴗ•◍)', '问题有时候确实很复杂，让我们一起想想办法吧！(⁠◍•ᴗ•◍)', '糖球虽然不是全知全能，但会尽力帮你解答疑惑~ (⁠◍•ᴗ•◍)']\n  };\n  const defaultResponses = ['糖球在听呢！请继续说吧~ (⁠◍•ᴗ•◍)', '嗯嗯，我明白你的意思！有什么需要帮忙的吗？(⁠◍•ᴗ•◍)', '你说的真有趣！糖球很喜欢和你聊天呢~ (⁠◍•ᴗ•◍)', '今天过得怎么样呀？有什么开心的事情吗？(⁠◍•ᴗ•◍)', '糖球可以陪你聊天、查天气、玩游戏，需要我做什么呢？~ (⁠◍•ᴗ•◍)'];\n  if (emotions[emotion]) {\n    const responses = emotions[emotion];\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n}","map":{"version":3,"names":["XfyunService","SparkService","sparkService","namespaced","state","messages","isTyping","currentEmotion","weatherInfo","soundEnabled","typingSound","messageSound","getters","mutations","addMessage","message","push","setTyping","changeEmotion","emotion","setWeatherInfo","info","toggleSoundEffects","clearMessages","actions","sendMessage","commit","dispatch","text","trim","userMessage","isUser","timestamp","Date","isWeatherQuery","test","console","log","response","generateResponse","aiResponse","length","aiError","error","assistantMessage","analyzeEmotion","checkWeather","city","temp","Math","round","random","condition","floor","description","greetings","some","g","includes","emotions","happy","sad","angry","confused","defaultResponses","responses"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport XfyunService from '@/services/xfyun';\nimport SparkService from '@/services/sparkAI';\n\n// 创建SparkService实例\nconst sparkService = new SparkService();\n\nexport default {\n  namespaced: true,\n  state: {\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'happy',\n    weatherInfo: null,\n    soundEnabled: true,\n    typingSound: null,\n    messageSound: null\n  },\n  getters: {\n    messages: state => state.messages,\n    currentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    addMessage(state, message) {\n      state.messages.push(message);\n    },\n    setTyping(state, isTyping) {\n      state.isTyping = isTyping;\n    },\n    changeEmotion(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    setWeatherInfo(state, info) {\n      state.weatherInfo = info;\n    },\n    toggleSoundEffects(state) {\n      state.soundEnabled = !state.soundEnabled;\n    },\n    clearMessages(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    async sendMessage({ commit, state, dispatch }, text) {\n      // 确保text是字符串\n      if (!text || typeof text !== 'string' || !text.trim()) return;\n      \n      // 添加用户消息\n      const userMessage = {\n        text,\n        isUser: true,\n        timestamp: new Date()\n      };\n      commit('addMessage', userMessage);\n      \n      // 设置正在输入状态\n      commit('setTyping', true);\n      \n      // 分析情绪\n      dispatch('analyzeEmotion', text);\n      \n      // 检查是否是天气相关问题\n      const isWeatherQuery = /天气|温度|下雨|下雪|冷|热|气温|阴天|晴天|多云/i.test(text);\n      if (isWeatherQuery) {\n        await dispatch('checkWeather');\n      }\n      \n      try {\n        console.log('尝试使用星火大模型生成回复...');\n        // 默认使用本地回退逻辑生成一个回复\n        let response = generateResponse(text, state.currentEmotion);\n        \n        // 尝试使用星火大模型API生成回复\n        try {\n          const aiResponse = await sparkService.generateResponse(text, state.currentEmotion);\n          // 如果成功获取AI回复，则使用AI回复\n          if (aiResponse && aiResponse.length > 0) {\n            response = aiResponse;\n            console.log('成功获取AI回复');\n          }\n        } catch (aiError) {\n          console.error('使用AI生成回复失败，使用本地回退:', aiError);\n          // 使用本地生成的回复，已在上面生成\n        }\n        \n        // 添加助手消息\n        const assistantMessage = {\n          text: response,\n          isUser: false,\n          timestamp: new Date()\n        };\n        commit('addMessage', assistantMessage);\n      } catch (error) {\n        console.error('获取回复失败:', error);\n        // 错误发生时使用一个简单的回退回复\n        const assistantMessage = {\n          text: '糖球遇到一点小问题，请稍后再试~ (⁠◍•ᴗ•◍)',\n          isUser: false,\n          timestamp: new Date()\n        };\n        commit('addMessage', assistantMessage);\n      } finally {\n        // 无论成功失败，都关闭输入状态\n        commit('setTyping', false);\n      }\n    },\n    \n    analyzeEmotion({ commit }, text) {\n      if (typeof text !== 'string') return;\n      \n      const emotion = analyzeEmotion(text);\n      commit('changeEmotion', emotion);\n    },\n    \n    async checkWeather({ commit }) {\n      try {\n        // 模拟天气数据\n        const weatherInfo = {\n          city: '北京',\n          temp: Math.round(10 + Math.random() * 20),\n          condition: ['晴朗', '多云', '阴天', '小雨'][Math.floor(Math.random() * 4)],\n          description: '今天天气不错，适合出门玩耍~'\n        };\n        commit('setWeatherInfo', weatherInfo);\n      } catch (error) {\n        console.error('获取天气信息失败', error);\n      }\n    },\n    \n    clearMessages({ commit }) {\n      commit('clearMessages');\n    }\n  }\n};\n\n// 辅助函数\nfunction analyzeEmotion(text) {\n  if (typeof text !== 'string') return 'neutral';\n  \n  // 简单的关键词匹配来确定情绪\n  if (/开心|喜欢|棒|好|爱|感谢|谢谢|高兴/i.test(text)) {\n    return 'happy';\n  } else if (/难过|伤心|痛苦|悲|哭|嘤/i.test(text)) {\n    return 'sad';\n  } else if (/生气|烦|讨厌|恨|滚|笨蛋|蠢/i.test(text)) {\n    return 'angry';\n  } else if (/惊讶|哇|天啊|不会吧|不可能|真的|竟然/i.test(text)) {\n    return 'surprised';\n  } else if (/困惑|为什么|怎么|不懂|不理解|疑惑|问题/i.test(text)) {\n    return 'confused';\n  } else if (/困|累|疲倦|好困|好累|睡觉/i.test(text)) {\n    return 'tired';\n  } else if (/激动|兴奋|期待|等不及/i.test(text)) {\n    return 'excited';\n  }\n  return 'neutral';\n}\n\n// 本地回退函数，当API调用失败时使用\nfunction generateResponse(text, emotion) {\n  if (typeof text !== 'string') return '糖球不太明白你的意思呢~ (⁠◍•ᴗ•◍)';\n  \n  // 根据用户输入和当前情绪生成回复\n  const greetings = ['你好', '嗨', '早上好', '晚上好', '你好呀'];\n  if (greetings.some(g => text.includes(g))) {\n    return `嗨嗨！我是糖球呀~ 有什么我能帮到你的吗？ (⁠◍•ᴗ•◍)`;\n  }\n  \n  if (text.includes('介绍') && text.includes('甜梦星球')) {\n    return '甜梦星球是一个充满可爱角色的梦幻世界~我是这里的居民糖球，很高兴认识你！这里有博客、小游戏和许多好玩的东西呢 (⁠◍•ᴗ•◍)';\n  }\n  \n  if (text.includes('天气')) {\n    return '我正在查看窗外的天气呢~稍等一下，马上告诉你！(⁠◍•ᴗ•◍)';\n  }\n  \n  if (text.includes('游戏')) {\n    return '想玩游戏吗？我们有记忆配对和云朵农场哦！点击导航栏的\"游戏\"就能找到啦~ (⁠◍•ᴗ•◍)';\n  }\n  \n  const emotions = {\n    happy: [\n      '看到你这么开心，我也跟着高兴起来了！(⁠◍•ᴗ•◍)',\n      '嘿嘿，糖球也很开心呢~一起来分享快乐吧！(⁠◍•ᴗ•◍)',\n      '开心的日子真美好，希望你每天都这么快乐！(⁠◍•ᴗ•◍)'\n    ],\n    sad: [\n      '别难过啦，糖球给你一个柔软的抱抱~ (⁠◍•ᴗ•◍)',\n      '我变成一个毛绒抱枕陪着你，伤心的时候依靠我吧 (⁠◍•ᴗ•◍)',\n      '糖球不喜欢看到你难过，来听听轻松的音乐吧~ (⁠◍•ᴗ•◍)'\n    ],\n    angry: [\n      '深呼吸~生气对身体不好，糖球陪你冷静一下 (⁠◍•ᴗ•◍)',\n      '我变成一个解压球，来捏捏我消消气吧！(⁠◍•ᴗ•◍)',\n      '糖球在这里，有什么委屈可以告诉我哦~ (⁠◍•ᴗ•◍)'\n    ],\n    confused: [\n      '看起来你有些疑惑，需要我解释清楚吗？(⁠◍•ᴗ•◍)',\n      '问题有时候确实很复杂，让我们一起想想办法吧！(⁠◍•ᴗ•◍)',\n      '糖球虽然不是全知全能，但会尽力帮你解答疑惑~ (⁠◍•ᴗ•◍)'\n    ]\n  };\n  \n  const defaultResponses = [\n    '糖球在听呢！请继续说吧~ (⁠◍•ᴗ•◍)',\n    '嗯嗯，我明白你的意思！有什么需要帮忙的吗？(⁠◍•ᴗ•◍)',\n    '你说的真有趣！糖球很喜欢和你聊天呢~ (⁠◍•ᴗ•◍)',\n    '今天过得怎么样呀？有什么开心的事情吗？(⁠◍•ᴗ•◍)',\n    '糖球可以陪你聊天、查天气、玩游戏，需要我做什么呢？~ (⁠◍•ᴗ•◍)'\n  ];\n  \n  if (emotions[emotion]) {\n    const responses = emotions[emotion];\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n  \n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}