{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nclass WeatherService {\n  constructor() {\n    // 使用正确的API KEY和域名\n    this.key = '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://kv436fwcq8.re.qweatherapi.com/v7';\n\n    // 默认城市列表\n    this.defaultCities = [{\n      id: '101190101',\n      name: '南京'\n    }, {\n      id: '101020100',\n      name: '上海'\n    }, {\n      id: '101010100',\n      name: '北京'\n    }];\n    console.log('WeatherService initialized with custom domain');\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', weatherData);\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const {\n      temperature,\n      description,\n      cityName\n    } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('正在获取天气信息...');\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', weatherData);\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || {\n          name: '未知城市'\n        };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","key","baseUrl","defaultCities","id","name","console","log","getNowWeather","defaultCity","url","weatherResponse","fetch","headers","ok","Error","status","weatherData","json","code","temp","text","icon","now","temperature","condition","getWeatherCondition","description","cityName","updateTime","error","getDefaultWeather","generateWeatherDescription","weather","suggestion","parseInt","includes","conditions","sunny","cloudy","rainy","snowy","foggy","icons","Object","entries","Date","toISOString","switchCity","cityId","city","find","c","parseCityName"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\n  constructor() {\n    // 使用正确的API KEY和域名\n    this.key = '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://kv436fwcq8.re.qweatherapi.com/v7';\n    \n    // 默认城市列表\n    this.defaultCities = [\n      { id: '101190101', name: '南京' },\n      { id: '101020100', name: '上海' },\n      { id: '101010100', name: '北京' }\n    ];\n\n    console.log('WeatherService initialized with custom domain');\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      \n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      \n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', weatherData);\n\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const { temperature, description, cityName } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('正在获取天气信息...');\n      \n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      \n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', weatherData);\n\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || { name: '未知城市' };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}