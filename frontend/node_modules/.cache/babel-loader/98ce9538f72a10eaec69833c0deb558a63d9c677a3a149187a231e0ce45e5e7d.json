{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport router from '@/router';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:5000/api',\n  timeout: parseInt(process.env.VUE_APP_API_TIMEOUT) || 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 优先从localStorage获取token\n  const token = getToken() || store.state.auth.token;\n  console.log('请求拦截器 - token来源:', {\n    localStorage: getToken(),\n    store: store.state.auth.token,\n    final: token\n  });\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    console.log('请求头已添加token:', token);\n  }\n  console.log('请求配置:', {\n    url: config.url,\n    method: config.method,\n    headers: config.headers\n  });\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果响应成功但业务状态码不是 200，说明有错误\n  if (res.code && res.code !== 200) {\n    ElMessage({\n      message: res.message || '错误',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 处理特定错误码\n    if (res.code === 401) {\n      // token 过期或无效，清除用户状态并跳转到登录页\n      store.dispatch('auth/resetToken');\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.message || '错误'));\n  }\n  return response;\n}, error => {\n  console.error('响应错误:', error);\n  const message = error.response?.data?.message || error.message || '请求失败';\n  ElMessage({\n    message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n\n  // 处理 401 错误\n  if (error.response?.status === 401) {\n    store.dispatch('auth/resetToken');\n    router.push('/login');\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","router","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","parseInt","VUE_APP_API_TIMEOUT","headers","interceptors","request","use","config","token","getToken","state","auth","console","log","localStorage","final","url","method","error","Promise","reject","response","res","data","code","message","type","duration","dispatch","push","Error","status"],"sources":["E:/code/PersonalBolg1/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport router from '@/router'\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:5000/api',\r\n  timeout: parseInt(process.env.VUE_APP_API_TIMEOUT) || 5000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 优先从localStorage获取token\r\n    const token = getToken() || store.state.auth.token\r\n    console.log('请求拦截器 - token来源:', {\r\n      localStorage: getToken(),\r\n      store: store.state.auth.token,\r\n      final: token\r\n    })\r\n\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n      console.log('请求头已添加token:', token)\r\n    }\r\n\r\n    console.log('请求配置:', {\r\n      url: config.url,\r\n      method: config.method,\r\n      headers: config.headers\r\n    })\r\n\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求错误:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n\r\n    // 如果响应成功但业务状态码不是 200，说明有错误\r\n    if (res.code && res.code !== 200) {\r\n      ElMessage({\r\n        message: res.message || '错误',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n\r\n      // 处理特定错误码\r\n      if (res.code === 401) {\r\n        // token 过期或无效，清除用户状态并跳转到登录页\r\n        store.dispatch('auth/resetToken')\r\n        router.push('/login')\r\n      }\r\n      return Promise.reject(new Error(res.message || '错误'))\r\n    }\r\n\r\n    return response\r\n  },\r\n  error => {\r\n    console.error('响应错误:', error)\r\n    const message = error.response?.data?.message || error.message || '请求失败'\r\n\r\n    ElMessage({\r\n      message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n\r\n    // 处理 401 错误\r\n    if (error.response?.status === 401) {\r\n      store.dispatch('auth/resetToken')\r\n      router.push('/login')\r\n    }\r\n\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}