{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SparkService from '@/services/sparkAI';\nconst chat = {\n  namespaced: true,\n  state: () => ({\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'neutral',\n    weatherInfo: null,\n    soundEffects: true\n  }),\n  getters: {\n    getMessages: state => state.messages,\n    getIsTyping: state => state.isTyping,\n    getCurrentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message);\n    },\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping;\n    },\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    SET_WEATHER_INFO(state, weatherInfo) {\n      state.weatherInfo = weatherInfo;\n    },\n    TOGGLE_SOUND_EFFECTS(state, value) {\n      state.soundEffects = value;\n    },\n    CLEAR_MESSAGES(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    async sendMessage({\n      commit,\n      state,\n      dispatch\n    }, messageContent) {\n      // 添加用户消息\n      const userMessage = {\n        id: Date.now(),\n        content: messageContent,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      };\n      commit('ADD_MESSAGE', userMessage);\n\n      // 分析情感\n      const emotion = analyzeEmotion(messageContent);\n      if (emotion !== state.currentEmotion) {\n        commit('CHANGE_EMOTION', emotion);\n      }\n\n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(messageContent);\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo();\n        commit('SET_WEATHER_INFO', weatherInfo);\n      }\n\n      // 设置正在输入状态\n      commit('SET_TYPING', true);\n      try {\n        // 通过讯飞星火API获取回复\n        const aiResponse = await SparkService.generateResponse(messageContent, state.currentEmotion);\n\n        // 添加助手回复消息\n        const assistantMessage = {\n          id: Date.now() + 1,\n          content: aiResponse,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        };\n        commit('ADD_MESSAGE', assistantMessage);\n      } catch (error) {\n        console.error('无法从AI服务获取回复:', error);\n\n        // 使用本地响应作为备选\n        const fallbackResponse = generateResponse(messageContent, state.currentEmotion);\n\n        // 添加本地生成的回复\n        const fallbackMessage = {\n          id: Date.now() + 1,\n          content: fallbackResponse,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        };\n        commit('ADD_MESSAGE', fallbackMessage);\n      } finally {\n        // 结束输入状态\n        commit('SET_TYPING', false);\n      }\n    },\n    clearChat({\n      commit\n    }) {\n      commit('CLEAR_MESSAGES');\n    }\n  }\n};\n\n// 情感分析辅助函数\nfunction analyzeEmotion(message) {\n  const lowerMessage = message.toLowerCase();\n\n  // 快乐情绪关键词\n  const happyKeywords = ['开心', '高兴', '快乐', '棒', '太好了', '哈哈', '谢谢', '感谢', '喜欢', '爱'];\n\n  // 悲伤情绪关键词\n  const sadKeywords = ['难过', '伤心', '哭', '悲伤', '痛苦', '失望', '遗憾', '抱歉', '对不起', '难受'];\n\n  // 愤怒情绪关键词\n  const angryKeywords = ['生气', '愤怒', '讨厌', '恨', '烦', '滚', '闭嘴', '混蛋', '笨蛋', '讨厌'];\n\n  // 惊讶情绪关键词\n  const surprisedKeywords = ['哇', '天啊', '不会吧', '真的吗', '惊讶', '震惊', '不敢相信', '难以置信', '太神奇了'];\n\n  // 恐惧情绪关键词\n  const scaredKeywords = ['害怕', '恐惧', '担心', '怕', '紧张', '焦虑', '吓人', '恐怖'];\n\n  // 检查各情绪关键词\n  for (const keyword of happyKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'happy';\n    }\n  }\n  for (const keyword of sadKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'sad';\n    }\n  }\n  for (const keyword of angryKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'angry';\n    }\n  }\n  for (const keyword of surprisedKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'surprised';\n    }\n  }\n  for (const keyword of scaredKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'scared';\n    }\n  }\n\n  // 默认情绪为中性\n  return 'neutral';\n}\n\n// 检查是否是天气相关查询\nfunction checkForWeatherQuery(message) {\n  const weatherKeywords = ['天气', '下雨', '晴天', '多云', '气温', '冷', '热', '温度'];\n  const lowerMessage = message.toLowerCase();\n  return weatherKeywords.some(keyword => lowerMessage.includes(keyword));\n}\n\n// 模拟获取天气信息\nasync function getWeatherInfo() {\n  // 这里是模拟数据，实际应用中可以调用天气API\n  return {\n    temperature: Math.floor(Math.random() * 15) + 15,\n    // 随机15-30度\n    condition: ['晴朗', '多云', '阴天', '小雨', '雷阵雨'][Math.floor(Math.random() * 5)],\n    humidity: Math.floor(Math.random() * 30) + 40,\n    // 随机40-70%湿度\n    windSpeed: Math.floor(Math.random() * 10) + 1 // 随机1-10风速\n  };\n}\n\n// 生成本地响应（当AI服务不可用时的备选）\nfunction generateResponse(message, emotion) {\n  const lowerMessage = message.toLowerCase();\n\n  // 通用回复\n  const generalResponses = ['我在这里呢，有什么可以帮到你的吗？(●\\'◡\\'●)', '很高兴能和你聊天~有什么想聊的话题吗？', '作为你的好朋友，我很乐意倾听你的想法！', '嗯嗯，我明白你的意思了！还有什么想说的吗？', '谢谢你和我分享这些！(｡•ᴗ•｡)', '我们可以聊任何你感兴趣的话题哦~'];\n\n  // 问候回复\n  if (lowerMessage.includes('你好') || lowerMessage.includes('早上好') || lowerMessage.includes('晚上好') || lowerMessage.includes('下午好')) {\n    return '你好呀！今天过得怎么样？有什么我能帮到你的吗？(●\\'◡\\'●)';\n  }\n\n  // 询问回复\n  if (lowerMessage.includes('你是谁') || lowerMessage.includes('你叫什么')) {\n    return '我是糖球助手，很高兴认识你！我可以陪你聊天、回答问题，做你的好朋友！(｡•ᴗ•｡)';\n  }\n\n  // 感谢回复\n  if (lowerMessage.includes('谢谢') || lowerMessage.includes('感谢')) {\n    return '不客气！能帮到你我很开心哦~(●\\'◡\\'●)';\n  }\n\n  // 再见回复\n  if (lowerMessage.includes('再见') || lowerMessage.includes('拜拜') || lowerMessage.includes('晚安')) {\n    return '再见啦！期待下次与你聊天！祝你有个美好的时光~(｡•ᴗ•｡)';\n  }\n\n  // 基于情感的回复\n  if (emotion === 'happy') {\n    return '看到你这么开心，我也很高兴呢！(●\\'◡\\'●) 有什么好事想分享吗？';\n  } else if (emotion === 'sad') {\n    return '我能感觉到你有点难过，需要我陪你聊聊吗？记住，明天会更好的！(｡•ᴗ•｡)';\n  } else if (emotion === 'angry') {\n    return '深呼吸，放松一下~我在这里陪着你。要不要聊点轻松的话题转换心情？(●\\'◡\\'●)';\n  } else if (emotion === 'surprised') {\n    return '哇！这确实很令人惊讶呢！我也被吓了一跳！(≧▽≦)';\n  } else if (emotion === 'scared') {\n    return '不要害怕，我在这里陪着你。一切都会好起来的，我们一起面对！(｡•ᴗ•｡)';\n  }\n\n  // 如果以上都不匹配，返回一个随机的通用回复\n  return generalResponses[Math.floor(Math.random() * generalResponses.length)];\n}\nexport default chat;","map":{"version":3,"names":["SparkService","chat","namespaced","state","messages","isTyping","currentEmotion","weatherInfo","soundEffects","getters","getMessages","getIsTyping","getCurrentEmotion","mutations","ADD_MESSAGE","message","push","SET_TYPING","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","TOGGLE_SOUND_EFFECTS","value","CLEAR_MESSAGES","actions","sendMessage","commit","dispatch","messageContent","userMessage","id","Date","now","content","sender","timestamp","toISOString","analyzeEmotion","isWeatherQuery","checkForWeatherQuery","getWeatherInfo","aiResponse","generateResponse","assistantMessage","error","console","fallbackResponse","fallbackMessage","clearChat","lowerMessage","toLowerCase","happyKeywords","sadKeywords","angryKeywords","surprisedKeywords","scaredKeywords","keyword","includes","weatherKeywords","some","temperature","Math","floor","random","condition","humidity","windSpeed","generalResponses","length"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\n\nconst chat = {\n  namespaced: true,\n  \n  state: () => ({\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'neutral',\n    weatherInfo: null,\n    soundEffects: true\n  }),\n  \n  getters: {\n    getMessages: state => state.messages,\n    getIsTyping: state => state.isTyping,\n    getCurrentEmotion: state => state.currentEmotion\n  },\n  \n  mutations: {\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message)\n    },\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping\n    },\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion\n    },\n    SET_WEATHER_INFO(state, weatherInfo) {\n      state.weatherInfo = weatherInfo\n    },\n    TOGGLE_SOUND_EFFECTS(state, value) {\n      state.soundEffects = value\n    },\n    CLEAR_MESSAGES(state) {\n      state.messages = []\n    }\n  },\n  \n  actions: {\n    async sendMessage({ commit, state, dispatch }, messageContent) {\n      // 添加用户消息\n      const userMessage = {\n        id: Date.now(),\n        content: messageContent,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      }\n      commit('ADD_MESSAGE', userMessage)\n      \n      // 分析情感\n      const emotion = analyzeEmotion(messageContent)\n      if (emotion !== state.currentEmotion) {\n        commit('CHANGE_EMOTION', emotion)\n      }\n      \n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(messageContent)\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo()\n        commit('SET_WEATHER_INFO', weatherInfo)\n      }\n      \n      // 设置正在输入状态\n      commit('SET_TYPING', true)\n      \n      try {\n        // 通过讯飞星火API获取回复\n        const aiResponse = await SparkService.generateResponse(\n          messageContent, \n          state.currentEmotion\n        )\n        \n        // 添加助手回复消息\n        const assistantMessage = {\n          id: Date.now() + 1,\n          content: aiResponse,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        }\n        commit('ADD_MESSAGE', assistantMessage)\n      } catch (error) {\n        console.error('无法从AI服务获取回复:', error)\n        \n        // 使用本地响应作为备选\n        const fallbackResponse = generateResponse(messageContent, state.currentEmotion)\n        \n        // 添加本地生成的回复\n        const fallbackMessage = {\n          id: Date.now() + 1,\n          content: fallbackResponse,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        }\n        commit('ADD_MESSAGE', fallbackMessage)\n      } finally {\n        // 结束输入状态\n        commit('SET_TYPING', false)\n      }\n    },\n    \n    clearChat({ commit }) {\n      commit('CLEAR_MESSAGES')\n    }\n  }\n}\n\n// 情感分析辅助函数\nfunction analyzeEmotion(message) {\n  const lowerMessage = message.toLowerCase()\n  \n  // 快乐情绪关键词\n  const happyKeywords = ['开心', '高兴', '快乐', '棒', '太好了', '哈哈', '谢谢', '感谢', '喜欢', '爱']\n  \n  // 悲伤情绪关键词\n  const sadKeywords = ['难过', '伤心', '哭', '悲伤', '痛苦', '失望', '遗憾', '抱歉', '对不起', '难受']\n  \n  // 愤怒情绪关键词\n  const angryKeywords = ['生气', '愤怒', '讨厌', '恨', '烦', '滚', '闭嘴', '混蛋', '笨蛋', '讨厌']\n  \n  // 惊讶情绪关键词\n  const surprisedKeywords = ['哇', '天啊', '不会吧', '真的吗', '惊讶', '震惊', '不敢相信', '难以置信', '太神奇了']\n  \n  // 恐惧情绪关键词\n  const scaredKeywords = ['害怕', '恐惧', '担心', '怕', '紧张', '焦虑', '吓人', '恐怖']\n  \n  // 检查各情绪关键词\n  for (const keyword of happyKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'happy'\n    }\n  }\n  \n  for (const keyword of sadKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'sad'\n    }\n  }\n  \n  for (const keyword of angryKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'angry'\n    }\n  }\n  \n  for (const keyword of surprisedKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'surprised'\n    }\n  }\n  \n  for (const keyword of scaredKeywords) {\n    if (lowerMessage.includes(keyword)) {\n      return 'scared'\n    }\n  }\n  \n  // 默认情绪为中性\n  return 'neutral'\n}\n\n// 检查是否是天气相关查询\nfunction checkForWeatherQuery(message) {\n  const weatherKeywords = ['天气', '下雨', '晴天', '多云', '气温', '冷', '热', '温度']\n  const lowerMessage = message.toLowerCase()\n  \n  return weatherKeywords.some(keyword => lowerMessage.includes(keyword))\n}\n\n// 模拟获取天气信息\nasync function getWeatherInfo() {\n  // 这里是模拟数据，实际应用中可以调用天气API\n  return {\n    temperature: Math.floor(Math.random() * 15) + 15, // 随机15-30度\n    condition: ['晴朗', '多云', '阴天', '小雨', '雷阵雨'][Math.floor(Math.random() * 5)],\n    humidity: Math.floor(Math.random() * 30) + 40, // 随机40-70%湿度\n    windSpeed: Math.floor(Math.random() * 10) + 1 // 随机1-10风速\n  }\n}\n\n// 生成本地响应（当AI服务不可用时的备选）\nfunction generateResponse(message, emotion) {\n  const lowerMessage = message.toLowerCase()\n  \n  // 通用回复\n  const generalResponses = [\n    '我在这里呢，有什么可以帮到你的吗？(●\\'◡\\'●)',\n    '很高兴能和你聊天~有什么想聊的话题吗？',\n    '作为你的好朋友，我很乐意倾听你的想法！',\n    '嗯嗯，我明白你的意思了！还有什么想说的吗？',\n    '谢谢你和我分享这些！(｡•ᴗ•｡)',\n    '我们可以聊任何你感兴趣的话题哦~'\n  ]\n  \n  // 问候回复\n  if (lowerMessage.includes('你好') || lowerMessage.includes('早上好') || \n      lowerMessage.includes('晚上好') || lowerMessage.includes('下午好')) {\n    return '你好呀！今天过得怎么样？有什么我能帮到你的吗？(●\\'◡\\'●)'\n  }\n  \n  // 询问回复\n  if (lowerMessage.includes('你是谁') || lowerMessage.includes('你叫什么')) {\n    return '我是糖球助手，很高兴认识你！我可以陪你聊天、回答问题，做你的好朋友！(｡•ᴗ•｡)'\n  }\n  \n  // 感谢回复\n  if (lowerMessage.includes('谢谢') || lowerMessage.includes('感谢')) {\n    return '不客气！能帮到你我很开心哦~(●\\'◡\\'●)'\n  }\n  \n  // 再见回复\n  if (lowerMessage.includes('再见') || lowerMessage.includes('拜拜') || \n      lowerMessage.includes('晚安')) {\n    return '再见啦！期待下次与你聊天！祝你有个美好的时光~(｡•ᴗ•｡)'\n  }\n  \n  // 基于情感的回复\n  if (emotion === 'happy') {\n    return '看到你这么开心，我也很高兴呢！(●\\'◡\\'●) 有什么好事想分享吗？'\n  } else if (emotion === 'sad') {\n    return '我能感觉到你有点难过，需要我陪你聊聊吗？记住，明天会更好的！(｡•ᴗ•｡)'\n  } else if (emotion === 'angry') {\n    return '深呼吸，放松一下~我在这里陪着你。要不要聊点轻松的话题转换心情？(●\\'◡\\'●)'\n  } else if (emotion === 'surprised') {\n    return '哇！这确实很令人惊讶呢！我也被吓了一跳！(≧▽≦)'\n  } else if (emotion === 'scared') {\n    return '不要害怕，我在这里陪着你。一切都会好起来的，我们一起面对！(｡•ᴗ•｡)'\n  }\n  \n  // 如果以上都不匹配，返回一个随机的通用回复\n  return generalResponses[Math.floor(Math.random() * generalResponses.length)]\n}\n\nexport default chat"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}