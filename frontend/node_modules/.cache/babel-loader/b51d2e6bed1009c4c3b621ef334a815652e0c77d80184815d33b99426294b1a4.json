{"ast":null,"code":"// 音效管理器\nclass SoundManager {\n  constructor() {\n    this.sounds = new Map();\n    this.context = null;\n    this.initialized = false;\n  }\n\n  // 初始化音频上下文\n  init() {\n    if (this.initialized) return;\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      this.context = new AudioContext();\n      this.initialized = true;\n    } catch (e) {\n      console.error('Web Audio API is not supported in this browser');\n    }\n  }\n\n  // 加载音效\n  async loadSound(name, url) {\n    if (!this.initialized) this.init();\n    if (!this.context) return;\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      this.sounds.set(name, audioBuffer);\n    } catch (e) {\n      console.error(`Error loading sound ${name}:`, e);\n    }\n  }\n\n  // 播放音效\n  play(name, options = {}) {\n    if (!this.initialized || !this.context) return;\n    const sound = this.sounds.get(name);\n    if (!sound) {\n      console.warn(`Sound ${name} not found`);\n      return;\n    }\n    const source = this.context.createBufferSource();\n    source.buffer = sound;\n\n    // 创建音量控制\n    const gainNode = this.context.createGain();\n    gainNode.gain.value = options.volume || 1;\n\n    // 连接节点\n    source.connect(gainNode);\n    gainNode.connect(this.context.destination);\n\n    // 播放选项\n    source.loop = options.loop || false;\n\n    // 开始播放\n    source.start(0);\n    return {\n      stop: () => source.stop(),\n      setVolume: value => {\n        gainNode.gain.value = value;\n      }\n    };\n  }\n}\n\n// 创建音效实例\nconst soundManager = new SoundManager();\n\n// 预定义的音效\nconst SOUNDS = {\n  PURR: '/sounds/purr.mp3',\n  RAIN: '/sounds/rain.mp3',\n  MUSIC: '/sounds/music.mp3',\n  CLICK: '/sounds/click.mp3',\n  SEND: '/sounds/send.mp3'\n};\n\n// 预加载音效\nexport const initSounds = async () => {\n  for (const [name, url] of Object.entries(SOUNDS)) {\n    await soundManager.loadSound(name, url);\n  }\n};\nexport default soundManager;","map":{"version":3,"names":["SoundManager","constructor","sounds","Map","context","initialized","init","window","AudioContext","webkitAudioContext","e","console","error","loadSound","name","url","response","fetch","arrayBuffer","audioBuffer","decodeAudioData","set","play","options","sound","get","warn","source","createBufferSource","buffer","gainNode","createGain","gain","value","volume","connect","destination","loop","start","stop","setVolume","soundManager","SOUNDS","PURR","RAIN","MUSIC","CLICK","SEND","initSounds","Object","entries"],"sources":["E:/code/PersonalBolg1/frontend/src/utils/sound.js"],"sourcesContent":["// 音效管理器\nclass SoundManager {\n  constructor() {\n    this.sounds = new Map();\n    this.context = null;\n    this.initialized = false;\n  }\n\n  // 初始化音频上下文\n  init() {\n    if (this.initialized) return;\n    \n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      this.context = new AudioContext();\n      this.initialized = true;\n    } catch (e) {\n      console.error('Web Audio API is not supported in this browser');\n    }\n  }\n\n  // 加载音效\n  async loadSound(name, url) {\n    if (!this.initialized) this.init();\n    if (!this.context) return;\n\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      this.sounds.set(name, audioBuffer);\n    } catch (e) {\n      console.error(`Error loading sound ${name}:`, e);\n    }\n  }\n\n  // 播放音效\n  play(name, options = {}) {\n    if (!this.initialized || !this.context) return;\n    \n    const sound = this.sounds.get(name);\n    if (!sound) {\n      console.warn(`Sound ${name} not found`);\n      return;\n    }\n\n    const source = this.context.createBufferSource();\n    source.buffer = sound;\n\n    // 创建音量控制\n    const gainNode = this.context.createGain();\n    gainNode.gain.value = options.volume || 1;\n\n    // 连接节点\n    source.connect(gainNode);\n    gainNode.connect(this.context.destination);\n\n    // 播放选项\n    source.loop = options.loop || false;\n    \n    // 开始播放\n    source.start(0);\n\n    return {\n      stop: () => source.stop(),\n      setVolume: (value) => {\n        gainNode.gain.value = value;\n      }\n    };\n  }\n}\n\n// 创建音效实例\nconst soundManager = new SoundManager();\n\n// 预定义的音效\nconst SOUNDS = {\n  PURR: '/sounds/purr.mp3',\n  RAIN: '/sounds/rain.mp3',\n  MUSIC: '/sounds/music.mp3',\n  CLICK: '/sounds/click.mp3',\n  SEND: '/sounds/send.mp3'\n};\n\n// 预加载音效\nexport const initSounds = async () => {\n  for (const [name, url] of Object.entries(SOUNDS)) {\n    await soundManager.loadSound(name, url);\n  }\n};\n\nexport default soundManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}