{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n * 星火认知大模型服务\n * 用于集成讯飞星火大模型API\n */\nimport CryptoJS from 'crypto-js';\nclass SparkService {\n  constructor() {\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appId: process.env.VUE_APP_SPARK_APPID,\n        apiKey: process.env.VUE_APP_SPARK_API_KEY,\n        apiSecret: process.env.VUE_APP_SPARK_API_SECRET,\n        apiUrl: process.env.VUE_APP_SPARK_API_URL || 'wss://spark-api.xf-yun.com/v1.1/chat'\n      };\n\n      // 日志配置信息（隐藏敏感信息）\n      console.log('星火服务配置:', {\n        appId: this.config.appId,\n        apiKey: this.config.apiKey ? '******' + this.config.apiKey.substring(this.config.apiKey.length - 4) : '未配置',\n        apiSecret: this.config.apiSecret ? '******' : '未配置',\n        apiUrl: this.config.apiUrl\n      });\n      if (!this.config.appId || !this.config.apiKey || !this.config.apiSecret) {\n        console.warn('星火大模型服务配置不完整，请检查环境变量');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      throw new Error('星火大模型服务初始化失败');\n    }\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 带鉴权参数的WebSocket URL\n   */\n  generateAuthUrl() {\n    try {\n      const apiUrl = this.config.apiUrl;\n      const {\n        host,\n        path\n      } = this._parseUrl(apiUrl);\n      const date = new Date().toGMTString();\n      const algorithm = 'hmac-sha256';\n      const headers = 'host date request-line';\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET ${path} HTTP/1.1`;\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.config.apiSecret);\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n      const authorizationOrigin = `api_key=\"${this.config.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n      return `${apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n    } catch (error) {\n      console.error('生成鉴权URL失败:', error);\n      throw new Error('生成鉴权URL失败');\n    }\n  }\n\n  /**\n   * 解析URL获取host和path\n   * @param {string} url API URL\n   * @returns {Object} 包含host和path的对象\n   */\n  _parseUrl(url) {\n    try {\n      const urlObj = new URL(url);\n      return {\n        host: urlObj.host,\n        path: urlObj.pathname\n      };\n    } catch (error) {\n      console.error('URL解析失败:', error);\n      throw new Error('URL解析失败');\n    }\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message 用户消息\n   * @param {Array} history 历史消息记录\n   * @param {Object} options 可选参数\n   * @returns {Promise<Object>} 响应结果\n   */\n  async sendMessage(message, history = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      try {\n        const authUrl = this.generateAuthUrl();\n        const ws = new WebSocket(authUrl);\n        let response = '';\n        let isError = false;\n        ws.onopen = () => {\n          console.log('星火WebSocket连接已建立');\n\n          // 构建消息历史\n          const messages = [...history];\n          // 添加当前用户消息\n          messages.push({\n            role: 'user',\n            content: message\n          });\n\n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.config.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: options.domain || 'lite',\n                temperature: options.temperature || 0.7,\n                max_tokens: options.maxTokens || 1024\n              }\n            },\n            payload: {\n              message: {\n                text: messages\n              }\n            }\n          };\n\n          // 发送请求\n          ws.send(JSON.stringify(requestData));\n        };\n        ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n\n            // 检查是否有错误\n            if (data.header.code !== 0) {\n              isError = true;\n              ws.close();\n              reject(new Error(`错误码: ${data.header.code}, 错误信息: ${data.header.message}`));\n              return;\n            }\n\n            // 获取回复内容\n            if (data.payload && data.payload.choices && data.payload.choices.text) {\n              const content = data.payload.choices.text[0].content;\n              response += content;\n            }\n\n            // 检查是否结束\n            if (data.header.status === 2) {\n              ws.close();\n              resolve({\n                content: response,\n                status: 'success'\n              });\n            }\n          } catch (e) {\n            console.error('处理WebSocket消息错误:', e);\n            isError = true;\n            ws.close();\n            reject(new Error('处理响应数据失败'));\n          }\n        };\n        ws.onerror = error => {\n          console.error('WebSocket连接错误:', error);\n          isError = true;\n          reject(error);\n        };\n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n          if (!isError && !response) {\n            reject(new Error('WebSocket连接关闭但未收到响应'));\n          }\n        };\n\n        // 设置连接超时\n        setTimeout(() => {\n          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {\n            isError = true;\n            ws.close();\n            reject(new Error('连接超时'));\n          }\n        }, 10000); // 10秒超时\n      } catch (error) {\n        console.error('发送消息错误:', error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 根据情绪生成特定风格的回复\n   * @param {string} text 用户输入\n   * @param {string} emotion 情绪类型\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(text, emotion = 'neutral') {\n    try {\n      // 构建 prompt\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下\n要求回复:\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(●ˇ∀ˇ●)\n3. 回复长度控制在100字以内\n4. 当前用户情绪: ${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说: ${text}`;\n\n      // 发送到星火API\n      const response = await this.sendMessage(prompt, [], {\n        temperature: 0.8\n      });\n      return response.content;\n    } catch (error) {\n      console.error('生成回复出错:', error);\n      // 降级处理，返回默认回复\n      return `抱歉，糖球现在有点迷糊，请稍后再试吧~ (●ˇ∀ˇ●)`;\n    }\n  }\n}\nexport default SparkService;","map":{"version":3,"names":["CryptoJS","SparkService","constructor","config","appId","process","env","VUE_APP_SPARK_APPID","apiKey","VUE_APP_SPARK_API_KEY","apiSecret","VUE_APP_SPARK_API_SECRET","apiUrl","VUE_APP_SPARK_API_URL","console","log","substring","length","warn","error","Error","generateAuthUrl","host","path","_parseUrl","date","Date","toGMTString","algorithm","headers","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","url","urlObj","URL","pathname","sendMessage","message","history","options","Promise","resolve","reject","authUrl","ws","WebSocket","response","isError","onopen","messages","push","role","content","requestData","header","app_id","uid","now","parameter","chat","domain","temperature","max_tokens","maxTokens","payload","text","send","JSON","onmessage","event","data","parse","code","close","choices","status","e","onerror","onclose","setTimeout","readyState","CONNECTING","OPEN","generateResponse","emotion","prompt"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["/**\n * 星火认知大模型服务\n * 用于集成讯飞星火大模型API\n */\nimport CryptoJS from 'crypto-js';\n\nclass SparkService {\n  constructor() {\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appId: process.env.VUE_APP_SPARK_APPID,\n        apiKey: process.env.VUE_APP_SPARK_API_KEY,\n        apiSecret: process.env.VUE_APP_SPARK_API_SECRET,\n        apiUrl: process.env.VUE_APP_SPARK_API_URL || 'wss://spark-api.xf-yun.com/v1.1/chat'\n      };\n\n      // 日志配置信息（隐藏敏感信息）\n      console.log('星火服务配置:', {\n        appId: this.config.appId,\n        apiKey: this.config.apiKey ? '******' + this.config.apiKey.substring(this.config.apiKey.length - 4) : '未配置',\n        apiSecret: this.config.apiSecret ? '******' : '未配置',\n        apiUrl: this.config.apiUrl\n      });\n\n      if (!this.config.appId || !this.config.apiKey || !this.config.apiSecret) {\n        console.warn('星火大模型服务配置不完整，请检查环境变量');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      throw new Error('星火大模型服务初始化失败');\n    }\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 带鉴权参数的WebSocket URL\n   */\n  generateAuthUrl() {\n    try {\n      const apiUrl = this.config.apiUrl;\n      const { host, path } = this._parseUrl(apiUrl);\n      const date = new Date().toGMTString();\n      const algorithm = 'hmac-sha256';\n      const headers = 'host date request-line';\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET ${path} HTTP/1.1`;\n      const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.config.apiSecret);\n      const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n      const authorizationOrigin = `api_key=\"${this.config.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n\n      return `${apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n    } catch (error) {\n      console.error('生成鉴权URL失败:', error);\n      throw new Error('生成鉴权URL失败');\n    }\n  }\n\n  /**\n   * 解析URL获取host和path\n   * @param {string} url API URL\n   * @returns {Object} 包含host和path的对象\n   */\n  _parseUrl(url) {\n    try {\n      const urlObj = new URL(url);\n      return {\n        host: urlObj.host,\n        path: urlObj.pathname\n      };\n    } catch (error) {\n      console.error('URL解析失败:', error);\n      throw new Error('URL解析失败');\n    }\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message 用户消息\n   * @param {Array} history 历史消息记录\n   * @param {Object} options 可选参数\n   * @returns {Promise<Object>} 响应结果\n   */\n  async sendMessage(message, history = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      try {\n        const authUrl = this.generateAuthUrl();\n        const ws = new WebSocket(authUrl);\n        let response = '';\n        let isError = false;\n        \n        ws.onopen = () => {\n          console.log('星火WebSocket连接已建立');\n          \n          // 构建消息历史\n          const messages = [...history];\n          // 添加当前用户消息\n          messages.push({ role: 'user', content: message });\n          \n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.config.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: options.domain || 'lite',\n                temperature: options.temperature || 0.7,\n                max_tokens: options.maxTokens || 1024\n              }\n            },\n            payload: {\n              message: {\n                text: messages\n              }\n            }\n          };\n          \n          // 发送请求\n          ws.send(JSON.stringify(requestData));\n        };\n        \n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            \n            // 检查是否有错误\n            if (data.header.code !== 0) {\n              isError = true;\n              ws.close();\n              reject(new Error(`错误码: ${data.header.code}, 错误信息: ${data.header.message}`));\n              return;\n            }\n            \n            // 获取回复内容\n            if (data.payload && data.payload.choices && data.payload.choices.text) {\n              const content = data.payload.choices.text[0].content;\n              response += content;\n            }\n            \n            // 检查是否结束\n            if (data.header.status === 2) {\n              ws.close();\n              resolve({ content: response, status: 'success' });\n            }\n          } catch (e) {\n            console.error('处理WebSocket消息错误:', e);\n            isError = true;\n            ws.close();\n            reject(new Error('处理响应数据失败'));\n          }\n        };\n        \n        ws.onerror = (error) => {\n          console.error('WebSocket连接错误:', error);\n          isError = true;\n          reject(error);\n        };\n        \n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n          if (!isError && !response) {\n            reject(new Error('WebSocket连接关闭但未收到响应'));\n          }\n        };\n        \n        // 设置连接超时\n        setTimeout(() => {\n          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {\n            isError = true;\n            ws.close();\n            reject(new Error('连接超时'));\n          }\n        }, 10000); // 10秒超时\n      } catch (error) {\n        console.error('发送消息错误:', error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 根据情绪生成特定风格的回复\n   * @param {string} text 用户输入\n   * @param {string} emotion 情绪类型\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(text, emotion = 'neutral') {\n    try {\n      // 构建 prompt\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下\n要求回复:\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(●ˇ∀ˇ●)\n3. 回复长度控制在100字以内\n4. 当前用户情绪: ${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说: ${text}`;\n\n      // 发送到星火API\n      const response = await this.sendMessage(prompt, [], { temperature: 0.8 });\n      return response.content;\n    } catch (error) {\n      console.error('生成回复出错:', error);\n      // 降级处理，返回默认回复\n      return `抱歉，糖球现在有点迷糊，请稍后再试吧~ (●ˇ∀ˇ●)`;\n    }\n  }\n}\n\nexport default SparkService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}