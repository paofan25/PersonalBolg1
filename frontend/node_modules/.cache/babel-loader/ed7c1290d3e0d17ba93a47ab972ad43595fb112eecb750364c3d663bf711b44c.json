{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// 游戏状态管理模块\nexport default {\n  namespaced: true,\n  state: {\n    // 记忆游戏状态\n    memoryGame: {\n      highScore: localStorage.getItem('memoryGameHighScore') || 0,\n      playCount: parseInt(localStorage.getItem('memoryGamePlayCount')) || 0,\n      lastScore: 0\n    },\n    // 云朵农场状态\n    cloudFarm: {\n      level: parseInt(localStorage.getItem('cloudFarmLevel')) || 1,\n      experience: parseInt(localStorage.getItem('cloudFarmExp')) || 0,\n      coins: parseInt(localStorage.getItem('cloudFarmCoins')) || 100,\n      harvestCount: parseInt(localStorage.getItem('cloudFarmHarvest')) || 0,\n      crops: JSON.parse(localStorage.getItem('cloudFarmCrops')) || [],\n      inventory: JSON.parse(localStorage.getItem('cloudFarmInventory')) || [],\n      decorations: JSON.parse(localStorage.getItem('cloudFarmDecorations')) || []\n    },\n    // 成就系统\n    achievements: JSON.parse(localStorage.getItem('gameAchievements')) || {\n      memoryMaster: false,\n      farmExpert: false,\n      collector: false\n    }\n  },\n  getters: {\n    // 记忆游戏\n    memoryGameStats: state => state.memoryGame,\n    // 云朵农场\n    cloudFarmStats: state => state.cloudFarm,\n    farmProgress: state => {\n      const currentLevelExp = state.cloudFarm.level * 1000;\n      return state.cloudFarm.experience / currentLevelExp * 100;\n    },\n    // 成就\n    unlockedAchievements: state => {\n      return Object.values(state.achievements).filter(unlocked => unlocked).length;\n    },\n    achievementProgress: state => {\n      return Object.entries(state.achievements).map(([key, unlocked]) => ({\n        id: key,\n        unlocked\n      }));\n    }\n  },\n  mutations: {\n    // 记忆游戏\n    UPDATE_MEMORY_SCORE(state, score) {\n      state.memoryGame.lastScore = score;\n      if (score > state.memoryGame.highScore) {\n        state.memoryGame.highScore = score;\n        localStorage.setItem('memoryGameHighScore', score);\n      }\n    },\n    INCREMENT_MEMORY_PLAYS(state) {\n      state.memoryGame.playCount++;\n      localStorage.setItem('memoryGamePlayCount', state.memoryGame.playCount);\n    },\n    // 云朵农场\n    UPDATE_FARM_LEVEL(state, {\n      level,\n      experience\n    }) {\n      state.cloudFarm.level = level;\n      state.cloudFarm.experience = experience;\n      localStorage.setItem('cloudFarmLevel', level);\n      localStorage.setItem('cloudFarmExp', experience);\n    },\n    UPDATE_FARM_COINS(state, coins) {\n      state.cloudFarm.coins = coins;\n      localStorage.setItem('cloudFarmCoins', coins);\n    },\n    UPDATE_CROPS(state, crops) {\n      state.cloudFarm.crops = crops;\n      localStorage.setItem('cloudFarmCrops', JSON.stringify(crops));\n    },\n    ADD_TO_INVENTORY(state, item) {\n      state.cloudFarm.inventory.push(item);\n      localStorage.setItem('cloudFarmInventory', JSON.stringify(state.cloudFarm.inventory));\n    },\n    INCREMENT_HARVEST_COUNT(state) {\n      state.cloudFarm.harvestCount++;\n      localStorage.setItem('cloudFarmHarvest', state.cloudFarm.harvestCount);\n    },\n    // 成就\n    UNLOCK_ACHIEVEMENT(state, achievementId) {\n      if (!state.achievements[achievementId]) {\n        state.achievements[achievementId] = true;\n        localStorage.setItem('gameAchievements', JSON.stringify(state.achievements));\n      }\n    }\n  },\n  actions: {\n    // 记忆游戏\n    submitMemoryScore({\n      commit\n    }, score) {\n      commit('UPDATE_MEMORY_SCORE', score);\n      commit('INCREMENT_MEMORY_PLAYS');\n\n      // 检查成就\n      if (score >= 3000) {\n        commit('UNLOCK_ACHIEVEMENT', 'memoryMaster');\n      }\n    },\n    // 云朵农场\n    harvestCrop({\n      commit,\n      state\n    }, {\n      cropId,\n      reward\n    }) {\n      // 更新金币\n      const newCoins = state.cloudFarm.coins + reward.coins;\n      commit('UPDATE_FARM_COINS', newCoins);\n\n      // 更新经验\n      const currentExp = state.cloudFarm.experience + reward.experience;\n      const currentLevel = state.cloudFarm.level;\n      const expNeeded = currentLevel * 1000;\n      if (currentExp >= expNeeded) {\n        // 升级\n        commit('UPDATE_FARM_LEVEL', {\n          level: currentLevel + 1,\n          experience: currentExp - expNeeded\n        });\n\n        // 检查成就\n        if (currentLevel + 1 >= 5) {\n          commit('UNLOCK_ACHIEVEMENT', 'farmExpert');\n        }\n      } else {\n        commit('UPDATE_FARM_LEVEL', {\n          level: currentLevel,\n          experience: currentExp\n        });\n      }\n\n      // 更新作物状态\n      const updatedCrops = state.cloudFarm.crops.filter(crop => crop.id !== cropId);\n      commit('UPDATE_CROPS', updatedCrops);\n\n      // 添加收获物品到背包\n      if (reward.item) {\n        commit('ADD_TO_INVENTORY', reward.item);\n      }\n\n      // 更新收获计数\n      commit('INCREMENT_HARVEST_COUNT');\n\n      // 检查收藏家成就\n      const uniqueItems = new Set(state.cloudFarm.inventory.map(item => item.id));\n      if (uniqueItems.size >= 20) {\n        commit('UNLOCK_ACHIEVEMENT', 'collector');\n      }\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","memoryGame","highScore","localStorage","getItem","playCount","parseInt","lastScore","cloudFarm","level","experience","coins","harvestCount","crops","JSON","parse","inventory","decorations","achievements","memoryMaster","farmExpert","collector","getters","memoryGameStats","cloudFarmStats","farmProgress","currentLevelExp","unlockedAchievements","Object","values","filter","unlocked","length","achievementProgress","entries","map","key","id","mutations","UPDATE_MEMORY_SCORE","score","setItem","INCREMENT_MEMORY_PLAYS","UPDATE_FARM_LEVEL","UPDATE_FARM_COINS","UPDATE_CROPS","stringify","ADD_TO_INVENTORY","item","push","INCREMENT_HARVEST_COUNT","UNLOCK_ACHIEVEMENT","achievementId","actions","submitMemoryScore","commit","harvestCrop","cropId","reward","newCoins","currentExp","currentLevel","expNeeded","updatedCrops","crop","uniqueItems","Set","size"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/games.js"],"sourcesContent":["// 游戏状态管理模块\nexport default {\n  namespaced: true,\n  \n  state: {\n    // 记忆游戏状态\n    memoryGame: {\n      highScore: localStorage.getItem('memoryGameHighScore') || 0,\n      playCount: parseInt(localStorage.getItem('memoryGamePlayCount')) || 0,\n      lastScore: 0\n    },\n    \n    // 云朵农场状态\n    cloudFarm: {\n      level: parseInt(localStorage.getItem('cloudFarmLevel')) || 1,\n      experience: parseInt(localStorage.getItem('cloudFarmExp')) || 0,\n      coins: parseInt(localStorage.getItem('cloudFarmCoins')) || 100,\n      harvestCount: parseInt(localStorage.getItem('cloudFarmHarvest')) || 0,\n      crops: JSON.parse(localStorage.getItem('cloudFarmCrops')) || [],\n      inventory: JSON.parse(localStorage.getItem('cloudFarmInventory')) || [],\n      decorations: JSON.parse(localStorage.getItem('cloudFarmDecorations')) || []\n    },\n    \n    // 成就系统\n    achievements: JSON.parse(localStorage.getItem('gameAchievements')) || {\n      memoryMaster: false,\n      farmExpert: false,\n      collector: false\n    }\n  },\n  \n  getters: {\n    // 记忆游戏\n    memoryGameStats: state => state.memoryGame,\n    \n    // 云朵农场\n    cloudFarmStats: state => state.cloudFarm,\n    farmProgress: state => {\n      const currentLevelExp = state.cloudFarm.level * 1000;\n      return (state.cloudFarm.experience / currentLevelExp) * 100;\n    },\n    \n    // 成就\n    unlockedAchievements: state => {\n      return Object.values(state.achievements).filter(unlocked => unlocked).length;\n    },\n    achievementProgress: state => {\n      return Object.entries(state.achievements).map(([key, unlocked]) => ({\n        id: key,\n        unlocked\n      }));\n    }\n  },\n  \n  mutations: {\n    // 记忆游戏\n    UPDATE_MEMORY_SCORE(state, score) {\n      state.memoryGame.lastScore = score;\n      if (score > state.memoryGame.highScore) {\n        state.memoryGame.highScore = score;\n        localStorage.setItem('memoryGameHighScore', score);\n      }\n    },\n    INCREMENT_MEMORY_PLAYS(state) {\n      state.memoryGame.playCount++;\n      localStorage.setItem('memoryGamePlayCount', state.memoryGame.playCount);\n    },\n    \n    // 云朵农场\n    UPDATE_FARM_LEVEL(state, { level, experience }) {\n      state.cloudFarm.level = level;\n      state.cloudFarm.experience = experience;\n      localStorage.setItem('cloudFarmLevel', level);\n      localStorage.setItem('cloudFarmExp', experience);\n    },\n    UPDATE_FARM_COINS(state, coins) {\n      state.cloudFarm.coins = coins;\n      localStorage.setItem('cloudFarmCoins', coins);\n    },\n    UPDATE_CROPS(state, crops) {\n      state.cloudFarm.crops = crops;\n      localStorage.setItem('cloudFarmCrops', JSON.stringify(crops));\n    },\n    ADD_TO_INVENTORY(state, item) {\n      state.cloudFarm.inventory.push(item);\n      localStorage.setItem('cloudFarmInventory', JSON.stringify(state.cloudFarm.inventory));\n    },\n    INCREMENT_HARVEST_COUNT(state) {\n      state.cloudFarm.harvestCount++;\n      localStorage.setItem('cloudFarmHarvest', state.cloudFarm.harvestCount);\n    },\n    \n    // 成就\n    UNLOCK_ACHIEVEMENT(state, achievementId) {\n      if (!state.achievements[achievementId]) {\n        state.achievements[achievementId] = true;\n        localStorage.setItem('gameAchievements', JSON.stringify(state.achievements));\n      }\n    }\n  },\n  \n  actions: {\n    // 记忆游戏\n    submitMemoryScore({ commit }, score) {\n      commit('UPDATE_MEMORY_SCORE', score);\n      commit('INCREMENT_MEMORY_PLAYS');\n      \n      // 检查成就\n      if (score >= 3000) {\n        commit('UNLOCK_ACHIEVEMENT', 'memoryMaster');\n      }\n    },\n    \n    // 云朵农场\n    harvestCrop({ commit, state }, { cropId, reward }) {\n      // 更新金币\n      const newCoins = state.cloudFarm.coins + reward.coins;\n      commit('UPDATE_FARM_COINS', newCoins);\n      \n      // 更新经验\n      const currentExp = state.cloudFarm.experience + reward.experience;\n      const currentLevel = state.cloudFarm.level;\n      const expNeeded = currentLevel * 1000;\n      \n      if (currentExp >= expNeeded) {\n        // 升级\n        commit('UPDATE_FARM_LEVEL', {\n          level: currentLevel + 1,\n          experience: currentExp - expNeeded\n        });\n        \n        // 检查成就\n        if (currentLevel + 1 >= 5) {\n          commit('UNLOCK_ACHIEVEMENT', 'farmExpert');\n        }\n      } else {\n        commit('UPDATE_FARM_LEVEL', {\n          level: currentLevel,\n          experience: currentExp\n        });\n      }\n      \n      // 更新作物状态\n      const updatedCrops = state.cloudFarm.crops.filter(crop => crop.id !== cropId);\n      commit('UPDATE_CROPS', updatedCrops);\n      \n      // 添加收获物品到背包\n      if (reward.item) {\n        commit('ADD_TO_INVENTORY', reward.item);\n      }\n      \n      // 更新收获计数\n      commit('INCREMENT_HARVEST_COUNT');\n      \n      // 检查收藏家成就\n      const uniqueItems = new Set(state.cloudFarm.inventory.map(item => item.id));\n      if (uniqueItems.size >= 20) {\n        commit('UNLOCK_ACHIEVEMENT', 'collector');\n      }\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}