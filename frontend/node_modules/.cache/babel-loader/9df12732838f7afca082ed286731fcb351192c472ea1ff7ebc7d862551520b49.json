{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport CryptoJS from 'crypto-js';\nclass SparkService {\n  constructor() {\n    // 讯飞星火认知大模型API配置\n    this.appId = '12345678'; // 替换为您的appId\n    this.apiKey = 'abcdefghijklmnopqrstuvwxyz'; // 替换为您的apiKey\n    this.apiSecret = 'abcdefghijklmnopqrstuvwxyz1234567890'; // 替换为您的apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.1/chat';\n    this.ws = null;\n    this.resolveFunction = null;\n    this.rejectFunction = null;\n    this.totalAnswer = '';\n  }\n\n  // 生成鉴权URL\n  genAuthUrl() {\n    const host = this.apiUrl.replace(/^wss?:\\/\\//, '').replace(/\\/.*$/, '');\n    const date = new Date().toUTCString();\n    const algorithm = 'hmac-sha256';\n    const headers = 'host date request-line';\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${this.apiUrl}?authorization=${authorization}&date=${encodeURIComponent(date)}&host=${host}`;\n  }\n\n  // 解析API URL\n  parseApiUrl() {\n    try {\n      return this.genAuthUrl();\n    } catch (error) {\n      console.error('解析API URL失败:', error);\n      throw error;\n    }\n  }\n\n  // 发送消息\n  async sendMessage(content, emotion = 'neutral') {\n    return new Promise((resolve, reject) => {\n      try {\n        // 存储Promise的resolve和reject函数\n        this.resolveFunction = resolve;\n        this.rejectFunction = reject;\n        this.totalAnswer = '';\n\n        // 生成API URL\n        const url = this.parseApiUrl();\n        console.log('正在连接WebSocket:', url);\n\n        // 创建WebSocket连接\n        this.ws = new WebSocket(url);\n\n        // 监听WebSocket事件\n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开，正在发送消息...');\n\n          // 构建请求数据\n          const message = this.formatPrompt(content, emotion);\n          console.log('发送的消息:', message);\n\n          // 发送数据\n          this.ws.send(JSON.stringify(message));\n        };\n        this.ws.onmessage = e => {\n          try {\n            const data = JSON.parse(e.data);\n            console.log('收到数据:', data);\n\n            // 检查是否有错误\n            if (data.header.code !== 0) {\n              this.rejectFunction(new Error(`请求错误: ${data.header.message}`));\n              this.ws.close();\n              return;\n            }\n\n            // 提取回答\n            if (data.payload.choices.text && data.payload.choices.text.length > 0) {\n              const content = data.payload.choices.text[0].content;\n              this.totalAnswer += content;\n            }\n\n            // 检查会话是否结束\n            if (data.header.status === 2) {\n              console.log('会话结束，完整回答:', this.totalAnswer);\n              this.resolveFunction(this.totalAnswer);\n              this.ws.close();\n            }\n          } catch (error) {\n            console.error('处理WebSocket消息错误:', error);\n            this.rejectFunction(error);\n            this.ws.close();\n          }\n        };\n        this.ws.onerror = e => {\n          console.error('WebSocket错误:', e);\n          this.rejectFunction(new Error('WebSocket连接错误'));\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n        };\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        reject(error);\n      }\n    });\n  }\n\n  // 格式化提示词\n  formatPrompt(content, emotion) {\n    // 根据情感添加相应的提示词\n    let emotionPrompt = '';\n    switch (emotion) {\n      case 'happy':\n        emotionPrompt = '用户心情很好，请用开心活泼的语气回应。';\n        break;\n      case 'sad':\n        emotionPrompt = '用户情绪低落，请用温暖安慰的语气回应。';\n        break;\n      case 'angry':\n        emotionPrompt = '用户似乎有些生气，请用冷静理解的语气回应。';\n        break;\n      case 'surprised':\n        emotionPrompt = '用户感到惊讶，请用惊喜的语气回应。';\n        break;\n      case 'scared':\n        emotionPrompt = '用户感到害怕，请用安抚的语气回应，给予支持和鼓励。';\n        break;\n      default:\n        emotionPrompt = '用平和自然的语气回应。';\n    }\n\n    // 构建系统提示词\n    const systemPrompt = `\n      你是糖球助手，一个可爱、温暖、贴心的AI助手。\n      你的特点是：\n      1. 语气温暖亲切，善于使用可爱的语气词和颜文字\n      2. 了解用户的情感需求，给予情感支持\n      3. 知识丰富但表达方式简单易懂\n      4. 偶尔使用适当的颜文字表达情感，如(●'◡'●)、(｡•ᴗ•｡)等\n      5. 回答简洁明了，避免过长解释\n      ${emotionPrompt}\n      回答中可以偶尔使用颜文字，但不要过多，保持自然。\n      不要提及你是AI或机器人，就像一个真实的助手一样交流。\n    `.trim();\n\n    // 构建请求数据\n    return {\n      header: {\n        app_id: this.appId,\n        uid: 'user_001'\n      },\n      parameter: {\n        chat: {\n          domain: 'generalv3.1',\n          temperature: 0.5,\n          max_tokens: 1024\n        }\n      },\n      payload: {\n        message: {\n          text: [{\n            role: 'system',\n            content: systemPrompt\n          }, {\n            role: 'user',\n            content: content\n          }]\n        }\n      }\n    };\n  }\n\n  // 生成回复（静态方法，便于调用）\n  static async generateResponse(content, emotion = 'neutral') {\n    try {\n      const service = new SparkService();\n      return await service.sendMessage(content, emotion);\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      throw error;\n    }\n  }\n}\nexport default SparkService;","map":{"version":3,"names":["CryptoJS","SparkService","constructor","appId","apiKey","apiSecret","apiUrl","ws","resolveFunction","rejectFunction","totalAnswer","genAuthUrl","host","replace","date","Date","toUTCString","algorithm","headers","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","encodeURIComponent","parseApiUrl","error","console","sendMessage","content","emotion","Promise","resolve","reject","url","log","WebSocket","onopen","message","formatPrompt","send","JSON","onmessage","e","data","parse","header","code","Error","close","payload","choices","text","length","status","onerror","onclose","emotionPrompt","systemPrompt","trim","app_id","uid","parameter","chat","domain","temperature","max_tokens","role","generateResponse","service"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["import CryptoJS from 'crypto-js'\n\nclass SparkService {\n  constructor() {\n    // 讯飞星火认知大模型API配置\n    this.appId = '12345678'     // 替换为您的appId\n    this.apiKey = 'abcdefghijklmnopqrstuvwxyz'   // 替换为您的apiKey\n    this.apiSecret = 'abcdefghijklmnopqrstuvwxyz1234567890'  // 替换为您的apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.1/chat'\n    \n    this.ws = null\n    this.resolveFunction = null\n    this.rejectFunction = null\n    this.totalAnswer = ''\n  }\n\n  // 生成鉴权URL\n  genAuthUrl() {\n    const host = this.apiUrl.replace(/^wss?:\\/\\//, '').replace(/\\/.*$/, '')\n    const date = new Date().toUTCString()\n    const algorithm = 'hmac-sha256'\n    const headers = 'host date request-line'\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret)\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha)\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`\n    const authorization = btoa(authorizationOrigin)\n    \n    return `${this.apiUrl}?authorization=${authorization}&date=${encodeURIComponent(date)}&host=${host}`\n  }\n  \n  // 解析API URL\n  parseApiUrl() {\n    try {\n      return this.genAuthUrl()\n    } catch (error) {\n      console.error('解析API URL失败:', error)\n      throw error\n    }\n  }\n  \n  // 发送消息\n  async sendMessage(content, emotion = 'neutral') {\n    return new Promise((resolve, reject) => {\n      try {\n        // 存储Promise的resolve和reject函数\n        this.resolveFunction = resolve\n        this.rejectFunction = reject\n        this.totalAnswer = ''\n        \n        // 生成API URL\n        const url = this.parseApiUrl()\n        console.log('正在连接WebSocket:', url)\n        \n        // 创建WebSocket连接\n        this.ws = new WebSocket(url)\n        \n        // 监听WebSocket事件\n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开，正在发送消息...')\n          \n          // 构建请求数据\n          const message = this.formatPrompt(content, emotion)\n          console.log('发送的消息:', message)\n          \n          // 发送数据\n          this.ws.send(JSON.stringify(message))\n        }\n        \n        this.ws.onmessage = (e) => {\n          try {\n            const data = JSON.parse(e.data)\n            console.log('收到数据:', data)\n            \n            // 检查是否有错误\n            if (data.header.code !== 0) {\n              this.rejectFunction(new Error(`请求错误: ${data.header.message}`))\n              this.ws.close()\n              return\n            }\n            \n            // 提取回答\n            if (data.payload.choices.text && data.payload.choices.text.length > 0) {\n              const content = data.payload.choices.text[0].content\n              this.totalAnswer += content\n            }\n            \n            // 检查会话是否结束\n            if (data.header.status === 2) {\n              console.log('会话结束，完整回答:', this.totalAnswer)\n              this.resolveFunction(this.totalAnswer)\n              this.ws.close()\n            }\n          } catch (error) {\n            console.error('处理WebSocket消息错误:', error)\n            this.rejectFunction(error)\n            this.ws.close()\n          }\n        }\n        \n        this.ws.onerror = (e) => {\n          console.error('WebSocket错误:', e)\n          this.rejectFunction(new Error('WebSocket连接错误'))\n        }\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭')\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error)\n        reject(error)\n      }\n    })\n  }\n  \n  // 格式化提示词\n  formatPrompt(content, emotion) {\n    // 根据情感添加相应的提示词\n    let emotionPrompt = ''\n    \n    switch(emotion) {\n      case 'happy':\n        emotionPrompt = '用户心情很好，请用开心活泼的语气回应。'\n        break\n      case 'sad':\n        emotionPrompt = '用户情绪低落，请用温暖安慰的语气回应。'\n        break\n      case 'angry':\n        emotionPrompt = '用户似乎有些生气，请用冷静理解的语气回应。'\n        break\n      case 'surprised':\n        emotionPrompt = '用户感到惊讶，请用惊喜的语气回应。'\n        break\n      case 'scared':\n        emotionPrompt = '用户感到害怕，请用安抚的语气回应，给予支持和鼓励。'\n        break\n      default:\n        emotionPrompt = '用平和自然的语气回应。'\n    }\n    \n    // 构建系统提示词\n    const systemPrompt = `\n      你是糖球助手，一个可爱、温暖、贴心的AI助手。\n      你的特点是：\n      1. 语气温暖亲切，善于使用可爱的语气词和颜文字\n      2. 了解用户的情感需求，给予情感支持\n      3. 知识丰富但表达方式简单易懂\n      4. 偶尔使用适当的颜文字表达情感，如(●'◡'●)、(｡•ᴗ•｡)等\n      5. 回答简洁明了，避免过长解释\n      ${emotionPrompt}\n      回答中可以偶尔使用颜文字，但不要过多，保持自然。\n      不要提及你是AI或机器人，就像一个真实的助手一样交流。\n    `.trim()\n    \n    // 构建请求数据\n    return {\n      header: {\n        app_id: this.appId,\n        uid: 'user_001'\n      },\n      parameter: {\n        chat: {\n          domain: 'generalv3.1',\n          temperature: 0.5,\n          max_tokens: 1024\n        }\n      },\n      payload: {\n        message: {\n          text: [\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: content }\n          ]\n        }\n      }\n    }\n  }\n  \n  // 生成回复（静态方法，便于调用）\n  static async generateResponse(content, emotion = 'neutral') {\n    try {\n      const service = new SparkService()\n      return await service.sendMessage(content, emotion)\n    } catch (error) {\n      console.error('生成回复失败:', error)\n      throw error\n    }\n  }\n}\n\nexport default SparkService"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}