{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nclass SparkService {\n  constructor() {\n    // 配置信息\n    this.appId = '12345678';\n    this.apiKey = 'abcdefghijklmnopqrstuvwxyz';\n    this.apiSecret = '1a2b3c4d5e6f7g8h9i0j';\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.5/chat';\n    this.ws = null;\n    this.responseData = '';\n    this.resolvePromise = null;\n    this.rejectPromise = null;\n  }\n\n  // 生成认证URL\n  generateAuthUrl() {\n    try {\n      const date = new Date().toGMTString();\n      const uri = '/';\n      const host = new URL(this.apiUrl).host;\n      const algorithm = 'hmac-sha256';\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET ${uri} HTTP/1.1`;\n\n      // 注意：由于客户端无法实现HMAC-SHA256签名，这里只是模拟结构\n      const signature = '模拟签名结果';\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"host date request-line\", signature=\"${signature}\"`;\n      const authorization = btoa(authorizationOrigin);\n\n      // 构建URL参数\n      const url = `${this.apiUrl}?authorization=${encodeURIComponent(authorization)}&date=${encodeURIComponent(date)}&host=${host}`;\n      return url;\n    } catch (error) {\n      console.error('生成认证URL失败:', error);\n      throw new Error('生成认证URL失败');\n    }\n  }\n\n  // 解析API URL\n  parseApiUrl() {\n    try {\n      // 由于WebSocket URL可能不同，这里模拟处理\n      const url = this.apiUrl.replace('http://', 'ws://').replace('https://', 'wss://');\n      return url;\n    } catch (error) {\n      console.error('解析API URL失败:', error);\n      throw new Error('解析API URL失败');\n    }\n  }\n\n  // 发送消息\n  async sendMessage(message) {\n    try {\n      return new Promise((resolve, reject) => {\n        this.resolvePromise = resolve;\n        this.rejectPromise = reject;\n        this.responseData = '';\n\n        // 创建WebSocket连接\n        const url = this.parseApiUrl();\n        console.log('连接到WebSocket:', url);\n        this.ws = new WebSocket(url);\n\n        // 绑定事件处理器\n        this.ws.onopen = this.onOpen.bind(this, message);\n        this.ws.onmessage = this.onMessage.bind(this);\n        this.ws.onerror = this.onError.bind(this);\n        this.ws.onclose = this.onClose.bind(this);\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw new Error('发送消息失败:' + error.message);\n    }\n  }\n\n  // WebSocket打开连接时\n  onOpen(message, event) {\n    try {\n      console.log('WebSocket连接已建立');\n\n      // 构建请求数据\n      const messageJson = this.formatPrompt(message);\n      console.log('发送消息:', messageJson);\n\n      // 发送数据\n      this.ws.send(JSON.stringify(messageJson));\n    } catch (error) {\n      console.error('WebSocket发送数据失败:', error);\n      this.rejectPromise && this.rejectPromise(new Error('WebSocket发送数据失败:' + error.message));\n      this.ws.close();\n    }\n  }\n\n  // 接收WebSocket消息\n  onMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('收到WebSocket消息:', data);\n\n      // 处理返回的数据\n      if (data.code !== 0) {\n        console.error('API返回错误:', data);\n        this.rejectPromise && this.rejectPromise(new Error('API返回错误:' + data.message));\n        this.ws.close();\n        return;\n      }\n\n      // 累积响应数据\n      if (data.data && data.data.text) {\n        this.responseData += data.data.text;\n      }\n\n      // 如果接收完成\n      if (data.data && data.data.is_end) {\n        console.log('响应完成:', this.responseData);\n        this.resolvePromise && this.resolvePromise(this.responseData);\n        this.ws.close();\n      }\n    } catch (error) {\n      console.error('处理WebSocket消息失败:', error);\n      this.rejectPromise && this.rejectPromise(new Error('处理WebSocket消息失败:' + error.message));\n      this.ws.close();\n    }\n  }\n\n  // WebSocket错误处理\n  onError(event) {\n    console.error('WebSocket错误:', event);\n    this.rejectPromise && this.rejectPromise(new Error('WebSocket错误'));\n  }\n\n  // WebSocket关闭连接\n  onClose(event) {\n    console.log('WebSocket连接已关闭:', event);\n    if (this.responseData === '' && this.rejectPromise) {\n      this.rejectPromise(new Error('WebSocket连接关闭，未收到有效响应'));\n    }\n  }\n\n  // 格式化提示词\n  formatPrompt(message) {\n    return {\n      header: {\n        app_id: this.appId\n      },\n      parameter: {\n        chat: {\n          domain: \"general\",\n          temperature: 0.5,\n          max_tokens: 1024\n        }\n      },\n      payload: {\n        message: {\n          text: [{\n            role: \"user\",\n            content: message\n          }]\n        }\n      }\n    };\n  }\n\n  // 生成响应（供外部调用）\n  async generateResponse(message, emotion = 'neutral') {\n    try {\n      // 增强提示词，包含情感信息\n      const enhancedMessage = `用户情绪:${emotion}。用户消息:${message}`;\n      const response = await this.sendMessage(enhancedMessage);\n      return response;\n    } catch (error) {\n      console.error('生成响应失败:', error);\n      throw error;\n    }\n  }\n}\nexport default new SparkService();","map":{"version":3,"names":["SparkService","constructor","appId","apiKey","apiSecret","apiUrl","ws","responseData","resolvePromise","rejectPromise","generateAuthUrl","date","Date","toGMTString","uri","host","URL","algorithm","signatureOrigin","signature","authorizationOrigin","authorization","btoa","url","encodeURIComponent","error","console","Error","parseApiUrl","replace","sendMessage","message","Promise","resolve","reject","log","WebSocket","onopen","onOpen","bind","onmessage","onMessage","onerror","onError","onclose","onClose","event","messageJson","formatPrompt","send","JSON","stringify","close","data","parse","code","text","is_end","header","app_id","parameter","chat","domain","temperature","max_tokens","payload","role","content","generateResponse","emotion","enhancedMessage","response"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["class SparkService {\n  constructor() {\n    // 配置信息\n    this.appId = '12345678'\n    this.apiKey = 'abcdefghijklmnopqrstuvwxyz'\n    this.apiSecret = '1a2b3c4d5e6f7g8h9i0j'\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.5/chat'\n    \n    this.ws = null\n    this.responseData = ''\n    this.resolvePromise = null\n    this.rejectPromise = null\n  }\n\n  // 生成认证URL\n  generateAuthUrl() {\n    try {\n      const date = new Date().toGMTString()\n      const uri = '/'\n      const host = new URL(this.apiUrl).host\n      const algorithm = 'hmac-sha256'\n      const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET ${uri} HTTP/1.1`\n      \n      // 注意：由于客户端无法实现HMAC-SHA256签名，这里只是模拟结构\n      const signature = '模拟签名结果'\n      const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"host date request-line\", signature=\"${signature}\"`\n      const authorization = btoa(authorizationOrigin)\n      \n      // 构建URL参数\n      const url = `${this.apiUrl}?authorization=${encodeURIComponent(authorization)}&date=${encodeURIComponent(date)}&host=${host}`\n      \n      return url\n    } catch (error) {\n      console.error('生成认证URL失败:', error)\n      throw new Error('生成认证URL失败')\n    }\n  }\n\n  // 解析API URL\n  parseApiUrl() {\n    try {\n      // 由于WebSocket URL可能不同，这里模拟处理\n      const url = this.apiUrl.replace('http://', 'ws://').replace('https://', 'wss://')\n      return url\n    } catch (error) {\n      console.error('解析API URL失败:', error)\n      throw new Error('解析API URL失败')\n    }\n  }\n\n  // 发送消息\n  async sendMessage(message) {\n    try {\n      return new Promise((resolve, reject) => {\n        this.resolvePromise = resolve\n        this.rejectPromise = reject\n        this.responseData = ''\n        \n        // 创建WebSocket连接\n        const url = this.parseApiUrl()\n        console.log('连接到WebSocket:', url)\n        this.ws = new WebSocket(url)\n        \n        // 绑定事件处理器\n        this.ws.onopen = this.onOpen.bind(this, message)\n        this.ws.onmessage = this.onMessage.bind(this)\n        this.ws.onerror = this.onError.bind(this)\n        this.ws.onclose = this.onClose.bind(this)\n      })\n    } catch (error) {\n      console.error('发送消息失败:', error)\n      throw new Error('发送消息失败:' + error.message)\n    }\n  }\n\n  // WebSocket打开连接时\n  onOpen(message, event) {\n    try {\n      console.log('WebSocket连接已建立')\n      \n      // 构建请求数据\n      const messageJson = this.formatPrompt(message)\n      console.log('发送消息:', messageJson)\n      \n      // 发送数据\n      this.ws.send(JSON.stringify(messageJson))\n    } catch (error) {\n      console.error('WebSocket发送数据失败:', error)\n      this.rejectPromise && this.rejectPromise(new Error('WebSocket发送数据失败:' + error.message))\n      this.ws.close()\n    }\n  }\n\n  // 接收WebSocket消息\n  onMessage(event) {\n    try {\n      const data = JSON.parse(event.data)\n      console.log('收到WebSocket消息:', data)\n      \n      // 处理返回的数据\n      if (data.code !== 0) {\n        console.error('API返回错误:', data)\n        this.rejectPromise && this.rejectPromise(new Error('API返回错误:' + data.message))\n        this.ws.close()\n        return\n      }\n      \n      // 累积响应数据\n      if (data.data && data.data.text) {\n        this.responseData += data.data.text\n      }\n      \n      // 如果接收完成\n      if (data.data && data.data.is_end) {\n        console.log('响应完成:', this.responseData)\n        this.resolvePromise && this.resolvePromise(this.responseData)\n        this.ws.close()\n      }\n    } catch (error) {\n      console.error('处理WebSocket消息失败:', error)\n      this.rejectPromise && this.rejectPromise(new Error('处理WebSocket消息失败:' + error.message))\n      this.ws.close()\n    }\n  }\n\n  // WebSocket错误处理\n  onError(event) {\n    console.error('WebSocket错误:', event)\n    this.rejectPromise && this.rejectPromise(new Error('WebSocket错误'))\n  }\n\n  // WebSocket关闭连接\n  onClose(event) {\n    console.log('WebSocket连接已关闭:', event)\n    if (this.responseData === '' && this.rejectPromise) {\n      this.rejectPromise(new Error('WebSocket连接关闭，未收到有效响应'))\n    }\n  }\n\n  // 格式化提示词\n  formatPrompt(message) {\n    return {\n      header: {\n        app_id: this.appId\n      },\n      parameter: {\n        chat: {\n          domain: \"general\",\n          temperature: 0.5,\n          max_tokens: 1024\n        }\n      },\n      payload: {\n        message: {\n          text: [\n            {\n              role: \"user\",\n              content: message\n            }\n          ]\n        }\n      }\n    }\n  }\n\n  // 生成响应（供外部调用）\n  async generateResponse(message, emotion = 'neutral') {\n    try {\n      // 增强提示词，包含情感信息\n      const enhancedMessage = `用户情绪:${emotion}。用户消息:${message}`\n      const response = await this.sendMessage(enhancedMessage)\n      return response\n    } catch (error) {\n      console.error('生成响应失败:', error)\n      throw error\n    }\n  }\n}\n\nexport default new SparkService()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}