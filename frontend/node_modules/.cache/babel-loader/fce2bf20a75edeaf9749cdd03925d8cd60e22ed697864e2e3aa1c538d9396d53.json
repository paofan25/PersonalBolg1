{"ast":null,"code":"import { mapState, mapActions, mapMutations } from 'vuex';\nexport default {\n  name: 'ChatAssistant',\n  data() {\n    return {\n      userInput: '',\n      messageSound: null,\n      typingSound: null\n    };\n  },\n  computed: {\n    ...mapState('chat', ['messages', 'isTyping', 'currentEmotion', 'soundEnabled'])\n  },\n  methods: {\n    ...mapActions('chat', ['sendUserMessage', 'clearChatHistory']),\n    ...mapMutations('chat', ['toggleSoundEffects']),\n    sendMessage() {\n      if (this.userInput.trim() && !this.isTyping) {\n        this.sendUserMessage(this.userInput);\n        this.userInput = '';\n        this.playMessageSound();\n      }\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    scrollToBottom() {\n      setTimeout(() => {\n        if (this.$refs.messagesContainer) {\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n        }\n      }, 50);\n    },\n    playMessageSound() {\n      if (this.soundEnabled && this.messageSound) {\n        this.messageSound.currentTime = 0;\n        this.messageSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    playTypingSound() {\n      if (this.soundEnabled && this.typingSound && this.isTyping) {\n        this.typingSound.currentTime = 0;\n        this.typingSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    clearChat() {\n      if (confirm('确定要清空所有聊天记录吗？')) {\n        this.clearChatHistory();\n      }\n    },\n    toggleSound() {\n      this.toggleSoundEffects();\n    },\n    initSounds() {\n      // 创建音频对象\n      this.messageSound = new Audio();\n      this.messageSound.src = require('@/assets/sounds/message.mp3').default || require('@/assets/sounds/message.mp3');\n      this.messageSound.volume = 0.5;\n      this.typingSound = new Audio();\n      this.typingSound.src = require('@/assets/sounds/typing.mp3').default || require('@/assets/sounds/typing.mp3');\n      this.typingSound.volume = 0.3;\n      this.typingSound.loop = true;\n    }\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    },\n    isTyping(newVal) {\n      if (newVal) {\n        this.playTypingSound();\n      } else if (this.typingSound) {\n        this.typingSound.pause();\n      }\n      this.scrollToBottom();\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n    try {\n      this.initSounds();\n    } catch (error) {\n      console.error('初始化声音失败:', error);\n    }\n  },\n  beforeDestroy() {\n    if (this.typingSound) {\n      this.typingSound.pause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","mapMutations","name","data","userInput","messageSound","typingSound","computed","methods","sendMessage","trim","isTyping","sendUserMessage","playMessageSound","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","scrollToBottom","setTimeout","$refs","messagesContainer","scrollTop","scrollHeight","soundEnabled","currentTime","play","catch","err","console","error","playTypingSound","clearChat","confirm","clearChatHistory","toggleSound","toggleSoundEffects","initSounds","Audio","src","require","default","volume","loop","watch","messages","newVal","pause","mounted","beforeDestroy"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\components\\ChatAssistant.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 机器人形象区域 -->\n    <div class=\"assistant-avatar\">\n      <div class=\"avatar-image\" :class=\"currentEmotion\">\n        <div class=\"face\">\n          <div class=\"eyes\">\n            <div class=\"eye left\"></div>\n            <div class=\"eye right\"></div>\n          </div>\n          <div class=\"mouth\" :class=\"currentEmotion\"></div>\n        </div>\n      </div>\n      <div class=\"assistant-name\">梦梦</div>\n      <div class=\"assistant-status\">{{ isTyping ? '正在输入...' : '在线' }}</div>\n    </div>\n\n    <!-- 聊天消息区域 -->\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\n      <div v-for=\"(message, index) in messages\" :key=\"index\" \n           :class=\"['message', message.sender === 'user' ? 'user-message' : 'assistant-message']\">\n        <div class=\"message-content\">\n          {{ message.content }}\n        </div>\n        <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n      </div>\n      <div v-if=\"isTyping\" class=\"message assistant-message typing\">\n        <div class=\"typing-indicator\">\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n    </div>\n\n    <!-- 输入区域 -->\n    <div class=\"chat-input\">\n      <input \n        type=\"text\" \n        v-model=\"userInput\" \n        @keyup.enter=\"sendMessage\" \n        placeholder=\"和梦梦聊天吧...\" \n        :disabled=\"isTyping\"\n      />\n      <button @click=\"sendMessage\" :disabled=\"isTyping || !userInput.trim()\">\n        <span class=\"send-icon\">✉️</span>\n      </button>\n      <button @click=\"clearChat\" class=\"clear-button\" title=\"清空聊天\">\n        <span class=\"clear-icon\">🗑️</span>\n      </button>\n      <button @click=\"toggleSound\" class=\"sound-button\" :title=\"soundEnabled ? '关闭声音' : '打开声音'\">\n        <span class=\"sound-icon\">{{ soundEnabled ? '🔊' : '🔇' }}</span>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapMutations } from 'vuex';\n\nexport default {\n  name: 'ChatAssistant',\n  data() {\n    return {\n      userInput: '',\n      messageSound: null,\n      typingSound: null\n    };\n  },\n  computed: {\n    ...mapState('chat', [\n      'messages', \n      'isTyping', \n      'currentEmotion',\n      'soundEnabled'\n    ])\n  },\n  methods: {\n    ...mapActions('chat', [\n      'sendUserMessage',\n      'clearChatHistory'\n    ]),\n    ...mapMutations('chat', [\n      'toggleSoundEffects'\n    ]),\n    sendMessage() {\n      if (this.userInput.trim() && !this.isTyping) {\n        this.sendUserMessage(this.userInput);\n        this.userInput = '';\n        this.playMessageSound();\n      }\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    },\n    scrollToBottom() {\n      setTimeout(() => {\n        if (this.$refs.messagesContainer) {\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n        }\n      }, 50);\n    },\n    playMessageSound() {\n      if (this.soundEnabled && this.messageSound) {\n        this.messageSound.currentTime = 0;\n        this.messageSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    playTypingSound() {\n      if (this.soundEnabled && this.typingSound && this.isTyping) {\n        this.typingSound.currentTime = 0;\n        this.typingSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    clearChat() {\n      if (confirm('确定要清空所有聊天记录吗？')) {\n        this.clearChatHistory();\n      }\n    },\n    toggleSound() {\n      this.toggleSoundEffects();\n    },\n    initSounds() {\n      // 创建音频对象\n      this.messageSound = new Audio();\n      this.messageSound.src = require('@/assets/sounds/message.mp3').default || require('@/assets/sounds/message.mp3');\n      this.messageSound.volume = 0.5;\n      \n      this.typingSound = new Audio();\n      this.typingSound.src = require('@/assets/sounds/typing.mp3').default || require('@/assets/sounds/typing.mp3');\n      this.typingSound.volume = 0.3;\n      this.typingSound.loop = true;\n    }\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    },\n    isTyping(newVal) {\n      if (newVal) {\n        this.playTypingSound();\n      } else if (this.typingSound) {\n        this.typingSound.pause();\n      }\n      this.scrollToBottom();\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n    try {\n      this.initSounds();\n    } catch (error) {\n      console.error('初始化声音失败:', error);\n    }\n  },\n  beforeDestroy() {\n    if (this.typingSound) {\n      this.typingSound.pause();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-width: 100%;\n  background-color: #f8f9fe;\n  border-radius: 16px;\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 机器人形象区域 */\n.assistant-avatar {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #ffeef8;\n  border-bottom: 1px solid #f0e6ff;\n}\n\n.avatar-image {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #ffccd5 0%, #ffb3d9 100%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 10px;\n  box-shadow: 0 4px 12px rgba(255, 179, 217, 0.4);\n  transition: all 0.3s ease;\n}\n\n.avatar-image.happy {\n  background: linear-gradient(135deg, #ffccd5 0%, #ffb3d9 100%);\n}\n\n.avatar-image.sad {\n  background: linear-gradient(135deg, #b3e0ff 0%, #99ccff 100%);\n}\n\n.avatar-image.neutral {\n  background: linear-gradient(135deg, #e6e6ff 0%, #d9d9f2 100%);\n}\n\n.avatar-image.excited {\n  background: linear-gradient(135deg, #ffffb3 0%, #ffeb99 100%);\n}\n\n.face {\n  position: relative;\n  width: 60px;\n  height: 60px;\n}\n\n.eyes {\n  display: flex;\n  justify-content: space-around;\n  padding-top: 20px;\n}\n\n.eye {\n  width: 12px;\n  height: 12px;\n  background-color: #333;\n  border-radius: 50%;\n  position: relative;\n}\n\n.mouth {\n  width: 30px;\n  height: 10px;\n  border-bottom: 3px solid #333;\n  border-radius: 50%;\n  margin: 10px auto 0;\n  transition: all 0.3s ease;\n}\n\n.mouth.happy {\n  border-bottom: 3px solid #333;\n  border-radius: 0 0 10px 10px;\n  transform: rotate(180deg);\n}\n\n.mouth.sad {\n  border-bottom: 3px solid #333;\n  border-radius: 0 0 10px 10px;\n}\n\n.mouth.neutral {\n  width: 20px;\n  height: 3px;\n  border: none;\n  background-color: #333;\n  border-radius: 3px;\n  margin-top: 15px;\n}\n\n.mouth.excited {\n  border-bottom: 5px solid #333;\n  border-radius: 0 0 15px 15px;\n  transform: rotate(180deg);\n  width: 35px;\n}\n\n.assistant-name {\n  font-weight: bold;\n  color: #6b5b95;\n  margin-bottom: 5px;\n  font-size: 18px;\n}\n\n.assistant-status {\n  font-size: 12px;\n  color: #888;\n}\n\n/* 聊天消息区域 */\n.chat-messages {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message {\n  max-width: 80%;\n  padding: 12px 15px;\n  border-radius: 18px;\n  position: relative;\n  animation: fadeIn 0.3s ease;\n  word-break: break-word;\n}\n\n.user-message {\n  align-self: flex-end;\n  background-color: #e1f5fe;\n  border-bottom-right-radius: 4px;\n  color: #0277bd;\n}\n\n.assistant-message {\n  align-self: flex-start;\n  background-color: #fff1f0;\n  border-bottom-left-radius: 4px;\n  color: #c41d7f;\n}\n\n.message-content {\n  margin-bottom: 5px;\n  line-height: 1.4;\n}\n\n.message-time {\n  font-size: 10px;\n  color: #999;\n  text-align: right;\n}\n\n.typing-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px 10px;\n}\n\n.typing-indicator span {\n  width: 8px;\n  height: 8px;\n  background-color: #c41d7f;\n  border-radius: 50%;\n  margin: 0 2px;\n  animation: bounce 1.3s ease infinite;\n  opacity: 0.6;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.15s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.3s;\n}\n\n/* 输入区域 */\n.chat-input {\n  display: flex;\n  padding: 15px;\n  background-color: #fff;\n  border-top: 1px solid #f0e6ff;\n}\n\n.chat-input input {\n  flex: 1;\n  padding: 10px 15px;\n  border-radius: 20px;\n  border: 1px solid #e6e6fa;\n  outline: none;\n  font-size: 14px;\n  transition: all 0.2s;\n}\n\n.chat-input input:focus {\n  border-color: #d0c4f2;\n  box-shadow: 0 0 0 2px rgba(208, 196, 242, 0.3);\n}\n\n.chat-input button {\n  margin-left: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: none;\n  background-color: #ffb3d9;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.chat-input button:hover {\n  background-color: #ff99cc;\n  transform: scale(1.05);\n}\n\n.chat-input button:disabled {\n  background-color: #e6e6e6;\n  cursor: not-allowed;\n}\n\n.clear-button, .sound-button {\n  background-color: #f0e6ff !important;\n}\n\n.clear-button:hover, .sound-button:hover {\n  background-color: #e6d9ff !important;\n}\n\n.send-icon, .clear-icon, .sound-icon {\n  font-size: 16px;\n}\n\n/* 动画 */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes bounce {\n  0%, 80%, 100% { transform: translateY(0); }\n  40% { transform: translateY(-8px); }\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .message {\n    max-width: 90%;\n  }\n  \n  .avatar-image {\n    width: 60px;\n    height: 60px;\n  }\n  \n  .face {\n    width: 45px;\n    height: 45px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}