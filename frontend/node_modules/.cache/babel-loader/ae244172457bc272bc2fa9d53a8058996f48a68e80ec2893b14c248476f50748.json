{"ast":null,"code":"/**\n * 和风天气服务\n * 用于获取天气信息\n */\n\nclass WeatherService {\n  constructor() {\n    // 配置信息\n    this.config = {\n      key: '12345678abcdefgh',\n      // 替换为您的和风天气API密钥\n      baseUrl: 'https://devapi.qweather.com/v7'\n    };\n  }\n\n  /**\n   * 获取实时天气\n   * @param {string} location 城市ID或经纬度坐标\n   * @returns {Promise<Object>} 天气数据\n   */\n  async getNowWeather(location = '101010100') {\n    try {\n      const url = `${this.config.baseUrl}/weather/now?location=${location}&key=${this.config.key}`;\n      console.log('获取天气数据:', url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`天气API请求失败: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.code !== '200') {\n        throw new Error(`天气API返回错误: ${data.code}`);\n      }\n\n      // 生成天气描述\n      const weatherDescription = this.generateWeatherDescription(data.now);\n      return {\n        success: true,\n        city: location,\n        temp: data.now.temp,\n        condition: data.now.text,\n        description: weatherDescription,\n        icon: data.now.icon,\n        data: data.now\n      };\n    } catch (error) {\n      console.error('获取天气数据失败:', error);\n      // 返回模拟数据作为备用\n      return {\n        success: false,\n        city: '北京',\n        temp: Math.round(10 + Math.random() * 20),\n        condition: ['晴朗', '多云', '阴天', '小雨'][Math.floor(Math.random() * 4)],\n        description: '无法获取天气数据，显示模拟天气~'\n      };\n    }\n  }\n\n  /**\n   * 根据天气数据生成友好的天气描述\n   * @param {Object} weatherData 天气数据\n   * @returns {string} 天气描述\n   */\n  generateWeatherDescription(weatherData) {\n    if (!weatherData) return '今天天气数据暂时无法获取~';\n    const temp = parseInt(weatherData.temp);\n    const condition = weatherData.text;\n    let description = `今天${condition}，气温${temp}°C，`;\n\n    // 根据温度添加建议\n    if (temp < 5) {\n      description += '天气寒冷，出门要多穿点哦~';\n    } else if (temp < 15) {\n      description += '天气有点凉，记得添加衣物~';\n    } else if (temp < 25) {\n      description += '温度舒适，适合出门活动~';\n    } else {\n      description += '天气偏热，注意防晒和补充水分~';\n    }\n\n    // 根据天气状况添加建议\n    if (condition.includes('雨')) {\n      description += '记得带伞哦！';\n    } else if (condition.includes('雪')) {\n      description += '记得穿防滑的鞋子！';\n    } else if (condition.includes('晴')) {\n      description += '阳光不错，心情也会很棒！';\n    }\n    return description;\n  }\n}\nexport default WeatherService;","map":{"version":3,"names":["WeatherService","constructor","config","key","baseUrl","getNowWeather","location","url","console","log","response","fetch","ok","Error","status","data","json","code","weatherDescription","generateWeatherDescription","now","success","city","temp","condition","text","description","icon","error","Math","round","random","floor","weatherData","parseInt","includes"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["/**\n * 和风天气服务\n * 用于获取天气信息\n */\n\nclass WeatherService {\n  constructor() {\n    // 配置信息\n    this.config = {\n      key: '12345678abcdefgh', // 替换为您的和风天气API密钥\n      baseUrl: 'https://devapi.qweather.com/v7'\n    };\n  }\n\n  /**\n   * 获取实时天气\n   * @param {string} location 城市ID或经纬度坐标\n   * @returns {Promise<Object>} 天气数据\n   */\n  async getNowWeather(location = '101010100') {\n    try {\n      const url = `${this.config.baseUrl}/weather/now?location=${location}&key=${this.config.key}`;\n      console.log('获取天气数据:', url);\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`天气API请求失败: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      if (data.code !== '200') {\n        throw new Error(`天气API返回错误: ${data.code}`);\n      }\n      \n      // 生成天气描述\n      const weatherDescription = this.generateWeatherDescription(data.now);\n      \n      return {\n        success: true,\n        city: location,\n        temp: data.now.temp,\n        condition: data.now.text,\n        description: weatherDescription,\n        icon: data.now.icon,\n        data: data.now\n      };\n    } catch (error) {\n      console.error('获取天气数据失败:', error);\n      // 返回模拟数据作为备用\n      return {\n        success: false,\n        city: '北京',\n        temp: Math.round(10 + Math.random() * 20),\n        condition: ['晴朗', '多云', '阴天', '小雨'][Math.floor(Math.random() * 4)],\n        description: '无法获取天气数据，显示模拟天气~'\n      };\n    }\n  }\n\n  /**\n   * 根据天气数据生成友好的天气描述\n   * @param {Object} weatherData 天气数据\n   * @returns {string} 天气描述\n   */\n  generateWeatherDescription(weatherData) {\n    if (!weatherData) return '今天天气数据暂时无法获取~';\n    \n    const temp = parseInt(weatherData.temp);\n    const condition = weatherData.text;\n    \n    let description = `今天${condition}，气温${temp}°C，`;\n    \n    // 根据温度添加建议\n    if (temp < 5) {\n      description += '天气寒冷，出门要多穿点哦~';\n    } else if (temp < 15) {\n      description += '天气有点凉，记得添加衣物~';\n    } else if (temp < 25) {\n      description += '温度舒适，适合出门活动~';\n    } else {\n      description += '天气偏热，注意防晒和补充水分~';\n    }\n    \n    // 根据天气状况添加建议\n    if (condition.includes('雨')) {\n      description += '记得带伞哦！';\n    } else if (condition.includes('雪')) {\n      description += '记得穿防滑的鞋子！';\n    } else if (condition.includes('晴')) {\n      description += '阳光不错，心情也会很棒！';\n    }\n    \n    return description;\n  }\n}\n\nexport default WeatherService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}