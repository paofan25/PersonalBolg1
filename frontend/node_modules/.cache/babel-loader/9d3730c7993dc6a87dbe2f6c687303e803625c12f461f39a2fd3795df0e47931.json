{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vShow as _vShow, normalizeStyle as _normalizeStyle, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"emoji-categories\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  class: \"emoji-list\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"recently-used\"\n};\nconst _hoisted_6 = {\n  class: \"emoji-list\"\n};\nconst _hoisted_7 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _withDirectives((_openBlock(), _createElementBlock(\"div\", {\n    class: \"emoji-picker\",\n    style: _normalizeStyle($props.position)\n  }, [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, category => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: category.name,\n      class: _normalizeClass([\"category-btn\", {\n        active: $data.currentCategory === category.name\n      }]),\n      onClick: $event => $data.currentCategory = category.name\n    }, _toDisplayString(category.icon), 11 /* TEXT, CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentEmojis, emoji => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: emoji.char,\n      class: \"emoji-btn\",\n      onClick: $event => $options.selectEmoji(emoji)\n    }, _toDisplayString(emoji.char), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.recentEmojis.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"section-title\"\n  }, \"最近使用\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.recentEmojis, emoji => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: emoji.char,\n      class: \"emoji-btn\",\n      onClick: $event => $options.selectEmoji(emoji)\n    }, _toDisplayString(emoji.char), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)), [[_vShow, $props.visible]]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","style","_normalizeStyle","$props","position","_createElementVNode","_hoisted_1","_Fragment","_renderList","$data","categories","category","name","_normalizeClass","active","currentCategory","onClick","$event","icon","_hoisted_2","_hoisted_3","$options","currentEmojis","emoji","char","selectEmoji","_hoisted_4","recentEmojis","length","_hoisted_5","_hoisted_6","_hoisted_7","_createCommentVNode","visible"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\components\\EmojiPicker.vue"],"sourcesContent":["<template>\n  <div class=\"emoji-picker\" v-show=\"visible\" :style=\"position\">\n    <div class=\"emoji-categories\">\n      <button \n        v-for=\"category in categories\" \n        :key=\"category.name\"\n        class=\"category-btn\"\n        :class=\"{ active: currentCategory === category.name }\"\n        @click=\"currentCategory = category.name\">\n        {{ category.icon }}\n      </button>\n    </div>\n    <div class=\"emoji-list\">\n      <button \n        v-for=\"emoji in currentEmojis\" \n        :key=\"emoji.char\"\n        class=\"emoji-btn\"\n        @click=\"selectEmoji(emoji)\">\n        {{ emoji.char }}\n      </button>\n    </div>\n    <div class=\"recently-used\" v-if=\"recentEmojis.length\">\n      <div class=\"section-title\">最近使用</div>\n      <div class=\"emoji-list\">\n        <button \n          v-for=\"emoji in recentEmojis\" \n          :key=\"emoji.char\"\n          class=\"emoji-btn\"\n          @click=\"selectEmoji(emoji)\">\n          {{ emoji.char }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst CATEGORIES = [\n  {\n    name: 'faces',\n    icon: '😊',\n    emojis: [\n      { char: '😊', name: 'smile' },\n      { char: '😂', name: 'joy' },\n      { char: '🥰', name: 'love' },\n      { char: '😴', name: 'sleepy' },\n      { char: '😢', name: 'cry' },\n      { char: '😍', name: 'heart_eyes' },\n      { char: '🤔', name: 'thinking' },\n      { char: '😮', name: 'wow' },\n      { char: '🥺', name: 'pleading' },\n      { char: '😋', name: 'yum' }\n    ]\n  },\n  {\n    name: 'animals',\n    icon: '🐱',\n    emojis: [\n      { char: '🐱', name: 'cat' },\n      { char: '🐰', name: 'rabbit' },\n      { char: '🐶', name: 'dog' },\n      { char: '🦊', name: 'fox' },\n      { char: '🐼', name: 'panda' },\n      { char: '🐨', name: 'koala' },\n      { char: '🦁', name: 'lion' },\n      { char: '🐯', name: 'tiger' },\n      { char: '🐭', name: 'mouse' },\n      { char: '🦄', name: 'unicorn' }\n    ]\n  },\n  {\n    name: 'food',\n    icon: '🍰',\n    emojis: [\n      { char: '🍰', name: 'cake' },\n      { char: '🍪', name: 'cookie' },\n      { char: '🍦', name: 'icecream' },\n      { char: '🍡', name: 'dango' },\n      { char: '🍫', name: 'chocolate' },\n      { char: '🧁', name: 'cupcake' },\n      { char: '🍮', name: 'pudding' },\n      { char: '🍭', name: 'lollipop' },\n      { char: '🍬', name: 'candy' },\n      { char: '🍯', name: 'honey' }\n    ]\n  },\n  {\n    name: 'weather',\n    icon: '☀️',\n    emojis: [\n      { char: '☀️', name: 'sun' },\n      { char: '☁️', name: 'cloud' },\n      { char: '🌧️', name: 'rain' },\n      { char: '⛈️', name: 'storm' },\n      { char: '🌈', name: 'rainbow' },\n      { char: '❄️', name: 'snow' },\n      { char: '🌙', name: 'moon' },\n      { char: '⭐', name: 'star' },\n      { char: '✨', name: 'sparkles' },\n      { char: '🌸', name: 'flower' }\n    ]\n  }\n];\n\nconst MAX_RECENT = 20;\n\nexport default {\n  name: 'EmojiPicker',\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      categories: CATEGORIES,\n      currentCategory: 'faces',\n      recentEmojis: []\n    };\n  },\n  computed: {\n    currentEmojis() {\n      const category = this.categories.find(c => c.name === this.currentCategory);\n      return category ? category.emojis : [];\n    }\n  },\n  methods: {\n    selectEmoji(emoji) {\n      this.$emit('select', emoji);\n      this.addToRecent(emoji);\n    },\n    addToRecent(emoji) {\n      const index = this.recentEmojis.findIndex(e => e.char === emoji.char);\n      if (index > -1) {\n        this.recentEmojis.splice(index, 1);\n      }\n      this.recentEmojis.unshift(emoji);\n      if (this.recentEmojis.length > MAX_RECENT) {\n        this.recentEmojis.pop();\n      }\n      this.saveRecent();\n    },\n    saveRecent() {\n      localStorage.setItem('recentEmojis', JSON.stringify(this.recentEmojis));\n    },\n    loadRecent() {\n      const saved = localStorage.getItem('recentEmojis');\n      if (saved) {\n        try {\n          this.recentEmojis = JSON.parse(saved);\n        } catch (e) {\n          console.error('Error loading recent emojis:', e);\n        }\n      }\n    }\n  },\n  mounted() {\n    this.loadRecent();\n  }\n};\n</script>\n\n<style scoped>\n.emoji-picker {\n  position: absolute;\n  width: 360px;\n  background: white;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-lg);\n  padding: 10px;\n  z-index: 1000;\n}\n\n.emoji-categories {\n  display: flex;\n  border-bottom: 1px solid var(--border-color);\n  padding-bottom: 8px;\n  margin-bottom: 8px;\n}\n\n.category-btn {\n  background: none;\n  border: none;\n  padding: 6px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  opacity: 0.6;\n  transition: all var(--transition-fast);\n}\n\n.category-btn.active {\n  opacity: 1;\n  transform: scale(1.1);\n}\n\n.category-btn:hover {\n  opacity: 1;\n}\n\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  gap: 4px;\n  padding: 8px 0;\n}\n\n.emoji-btn {\n  background: none;\n  border: none;\n  padding: 6px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: transform var(--transition-fast);\n  border-radius: 4px;\n}\n\n.emoji-btn:hover {\n  background: var(--bg-secondary);\n  transform: scale(1.2);\n}\n\n.section-title {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  margin: 8px 0 4px;\n}\n\n.recently-used {\n  border-top: 1px solid var(--border-color);\n  margin-top: 8px;\n  padding-top: 8px;\n}\n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAAkB;mBAFjC;;EAYSA,KAAK,EAAC;AAAY;mBAZ3B;;EAAAC,GAAA;EAqBSD,KAAK,EAAC;;;EAEJA,KAAK,EAAC;AAAY;mBAvB7B;;wCACEE,mBAAA,CAgCM;IAhCDF,KAAK,EAAC,cAAc;IAAmBG,KAAK,EADnDC,eAAA,CACqDC,MAAA,CAAAC,QAAQ;MACzDC,mBAAA,CASM,OATNC,UASM,I,kBARJN,mBAAA,CAOSO,SAAA,QAVfC,WAAA,CAI2BC,KAAA,CAAAC,UAAU,EAAtBC,QAAQ;yBADjBX,mBAAA,CAOS;MALND,GAAG,EAAEY,QAAQ,CAACC,IAAI;MACnBd,KAAK,EANbe,eAAA,EAMc,cAAc;QAAAC,MAAA,EACFL,KAAA,CAAAM,eAAe,KAAKJ,QAAQ,CAACC;MAAI;MAClDI,OAAK,EAAAC,MAAA,IAAER,KAAA,CAAAM,eAAe,GAAGJ,QAAQ,CAACC;wBAChCD,QAAQ,CAACO,IAAI,gCATxBC,UAAA;oCAYId,mBAAA,CAQM,OARNe,UAQM,I,kBAPJpB,mBAAA,CAMSO,SAAA,QAnBfC,WAAA,CAcwBa,QAAA,CAAAC,aAAa,EAAtBC,KAAK;yBADdvB,mBAAA,CAMS;MAJND,GAAG,EAAEwB,KAAK,CAACC,IAAI;MAChB1B,KAAK,EAAC,WAAW;MAChBkB,OAAK,EAAAC,MAAA,IAAEI,QAAA,CAAAI,WAAW,CAACF,KAAK;wBACtBA,KAAK,CAACC,IAAI,wBAlBrBE,UAAA;oCAqBqCjB,KAAA,CAAAkB,YAAY,CAACC,MAAM,I,cAApD5B,mBAAA,CAWM,OAXN6B,UAWM,G,0BAVJxB,mBAAA,CAAqC;IAAhCP,KAAK,EAAC;EAAe,GAAC,MAAI,sBAC/BO,mBAAA,CAQM,OARNyB,UAQM,I,kBAPJ9B,mBAAA,CAMSO,SAAA,QA9BjBC,WAAA,CAyB0BC,KAAA,CAAAkB,YAAY,EAArBJ,KAAK;yBADdvB,mBAAA,CAMS;MAJND,GAAG,EAAEwB,KAAK,CAACC,IAAI;MAChB1B,KAAK,EAAC,WAAW;MAChBkB,OAAK,EAAAC,MAAA,IAAEI,QAAA,CAAAI,WAAW,CAACF,KAAK;wBACtBA,KAAK,CAACC,IAAI,wBA7BvBO,UAAA;wCAAAC,mBAAA,e,6BACoC7B,MAAA,CAAA8B,OAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}