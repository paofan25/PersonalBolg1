{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nclass WeatherService {\n  constructor() {\n    // 使用环境变量或默认值\n    this.key = process.env.VUE_APP_WEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = process.env.VUE_APP_WEATHER_URL || 'https://kv436fwcq8.re.qweatherapi.com/v7';\n\n    // 城市缓存，格式: { cityName: { data, timestamp } }\n    this.weatherCache = new Map();\n    // 缓存有效期（5分钟）\n    this.cacheExpiration = 5 * 60 * 1000;\n\n    // 默认城市列表（包含全国省会城市）\n    this.defaultCities = [\n    // 直辖市\n    {\n      id: '101010100',\n      name: '北京'\n    }, {\n      id: '101020100',\n      name: '上海'\n    }, {\n      id: '101030100',\n      name: '天津'\n    }, {\n      id: '101040100',\n      name: '重庆'\n    },\n    // 省会城市\n    {\n      id: '101190101',\n      name: '南京',\n      province: '江苏'\n    }, {\n      id: '101210101',\n      name: '杭州',\n      province: '浙江'\n    }, {\n      id: '101280101',\n      name: '广州',\n      province: '广东'\n    }, {\n      id: '101200101',\n      name: '武汉',\n      province: '湖北'\n    }, {\n      id: '101180101',\n      name: '郑州',\n      province: '河南'\n    }, {\n      id: '101110101',\n      name: '西安',\n      province: '陕西'\n    }, {\n      id: '101270101',\n      name: '成都',\n      province: '四川'\n    }, {\n      id: '101230101',\n      name: '福州',\n      province: '福建'\n    }, {\n      id: '101220101',\n      name: '合肥',\n      province: '安徽'\n    }, {\n      id: '101240101',\n      name: '南昌',\n      province: '江西'\n    }, {\n      id: '101250101',\n      name: '长沙',\n      province: '湖南'\n    }, {\n      id: '101050101',\n      name: '哈尔滨',\n      province: '黑龙江'\n    }, {\n      id: '101060101',\n      name: '长春',\n      province: '吉林'\n    }, {\n      id: '101070101',\n      name: '沈阳',\n      province: '辽宁'\n    }, {\n      id: '101100101',\n      name: '太原',\n      province: '山西'\n    }, {\n      id: '101090101',\n      name: '石家庄',\n      province: '河北'\n    }, {\n      id: '101120101',\n      name: '济南',\n      province: '山东'\n    }, {\n      id: '101150101',\n      name: '西宁',\n      province: '青海'\n    }, {\n      id: '101160101',\n      name: '兰州',\n      province: '甘肃'\n    }, {\n      id: '101170101',\n      name: '银川',\n      province: '宁夏'\n    }, {\n      id: '101130101',\n      name: '乌鲁木齐',\n      province: '新疆'\n    }, {\n      id: '101140101',\n      name: '拉萨',\n      province: '西藏'\n    }, {\n      id: '101290101',\n      name: '昆明',\n      province: '云南'\n    }, {\n      id: '101300101',\n      name: '南宁',\n      province: '广西'\n    }, {\n      id: '101310101',\n      name: '海口',\n      province: '海南'\n    }, {\n      id: '101320101',\n      name: '香港'\n    }, {\n      id: '101330101',\n      name: '澳门'\n    },\n    // 浙江省主要城市\n    {\n      id: '101210201',\n      name: '湖州',\n      province: '浙江'\n    }, {\n      id: '101210301',\n      name: '嘉兴',\n      province: '浙江'\n    }, {\n      id: '101210401',\n      name: '宁波',\n      province: '浙江'\n    }, {\n      id: '101210501',\n      name: '绍兴',\n      province: '浙江'\n    }, {\n      id: '101210601',\n      name: '台州',\n      province: '浙江'\n    }, {\n      id: '101210701',\n      name: '温州',\n      province: '浙江'\n    }, {\n      id: '101210801',\n      name: '丽水',\n      province: '浙江'\n    }, {\n      id: '101210901',\n      name: '金华',\n      province: '浙江'\n    }, {\n      id: '101211001',\n      name: '衢州',\n      province: '浙江'\n    }, {\n      id: '101211101',\n      name: '舟山',\n      province: '浙江'\n    }];\n    console.log('WeatherService initialized with API Host:', this.baseUrl);\n  }\n\n  // 获取指定城市的天气\n  async getCityWeather(cityName) {\n    try {\n      console.log('获取城市天气:', cityName);\n\n      // 检查缓存\n      const cached = this.weatherCache.get(cityName);\n      if (cached && Date.now() - cached.timestamp < this.cacheExpiration) {\n        console.log('使用缓存的天气数据:', cached.data);\n        return cached.data;\n      }\n\n      // 查找城市ID\n      const city = this.defaultCities.find(c => c.name === cityName);\n      if (!city) {\n        console.log('未找到城市:', cityName);\n        throw new Error(`抱歉，暂不支持查询${cityName}的天气`);\n      }\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      const weatherData = await this.fetchWeatherData(url);\n      weatherData.cityName = cityName; // 确保使用请求时的城市名\n\n      // 更新缓存\n      this.weatherCache.set(cityName, {\n        data: weatherData,\n        timestamp: Date.now()\n      });\n      return weatherData;\n    } catch (error) {\n      console.error('获取城市天气失败:', error);\n      throw error;\n    }\n  }\n\n  // 获取当前位置天气\n  async getLocationWeather() {\n    try {\n      console.log('获取当前位置天气');\n      const position = await this.getCurrentPosition();\n      console.log('获取到位置:', position);\n\n      // 构建请求URL，使用经纬度\n      const url = `${this.baseUrl}/weather/now?location=${position.longitude},${position.latitude}&key=${this.key}`;\n      return await this.fetchWeatherData(url);\n    } catch (error) {\n      console.error('获取当前位置天气失败:', error);\n      // 降级使用默认城市\n      return this.getCityWeather(this.defaultCities[0].name);\n    }\n  }\n\n  // 获取当前位置\n  getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('浏览器不支持地理定位'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error('地理定位失败:', error);\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    });\n  }\n\n  // 统一的天气数据获取方法\n  async fetchWeatherData(url) {\n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Accept-Encoding': 'gzip'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`天气API请求失败: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API返回的天气数据:', data);\n    if (data.code === '200') {\n      const {\n        temp,\n        text,\n        icon\n      } = data.now;\n      const locationId = data.location?.id;\n      const city = this.defaultCities.find(c => c.id === locationId);\n      const weatherData = {\n        temperature: temp,\n        condition: this.getWeatherCondition(icon),\n        description: text,\n        cityName: city ? city.name : data.location?.name,\n        cityId: locationId,\n        updateTime: data.updateTime\n      };\n      console.log('处理后的天气数据:', weatherData);\n      return weatherData;\n    } else {\n      throw new Error(`天气API返回错误: ${data.code}`);\n    }\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n\n      // 发送请求，添加必要的请求头\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n\n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n\n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    if (!weather) {\n      console.error('天气数据为空');\n      return '抱歉，暂时无法获取天气信息';\n    }\n    const {\n      temperature,\n      description,\n      cityName\n    } = weather;\n    console.log('生成天气描述，使用的数据:', weather);\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: '25',\n      // 注意这里返回字符串以保持一致性\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      console.log('切换城市, ID:', cityId);\n\n      // 构建URL\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('切换城市请求URL:', url);\n\n      // 发送请求\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n\n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n\n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        const city = this.defaultCities.find(c => c.id === cityId) || {\n          name: '未知城市'\n        };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    // 处理省份\n    for (const city of this.defaultCities) {\n      if (city.province && text === city.province) {\n        return city; // 返回该省的省会城市\n      }\n    }\n\n    // 处理具体城市\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","key","process","env","VUE_APP_WEATHER_KEY","baseUrl","VUE_APP_WEATHER_URL","weatherCache","Map","cacheExpiration","defaultCities","id","name","province","console","log","getCityWeather","cityName","cached","get","Date","now","timestamp","data","city","find","c","Error","url","weatherData","fetchWeatherData","set","error","getLocationWeather","position","getCurrentPosition","longitude","latitude","Promise","resolve","reject","navigator","geolocation","coords","enableHighAccuracy","timeout","maximumAge","response","fetch","headers","ok","status","json","code","temp","text","icon","locationId","location","temperature","condition","getWeatherCondition","description","cityId","updateTime","getNowWeather","defaultCity","weatherResponse","responseText","JSON","stringify","getDefaultWeather","generateWeatherDescription","weather","suggestion","parseInt","includes","conditions","sunny","cloudy","rainy","snowy","foggy","icons","Object","entries","toISOString","switchCity","parseCityName"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\n  constructor() {\n    // 使用环境变量或默认值\n    this.key = process.env.VUE_APP_WEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = process.env.VUE_APP_WEATHER_URL || 'https://kv436fwcq8.re.qweatherapi.com/v7';\n    \n    // 城市缓存，格式: { cityName: { data, timestamp } }\n    this.weatherCache = new Map();\n    // 缓存有效期（5分钟）\n    this.cacheExpiration = 5 * 60 * 1000;\n    \n    // 默认城市列表（包含全国省会城市）\n    this.defaultCities = [\n      // 直辖市\n      { id: '101010100', name: '北京' },\n      { id: '101020100', name: '上海' },\n      { id: '101030100', name: '天津' },\n      { id: '101040100', name: '重庆' },\n      // 省会城市\n      { id: '101190101', name: '南京', province: '江苏' },\n      { id: '101210101', name: '杭州', province: '浙江' },\n      { id: '101280101', name: '广州', province: '广东' },\n      { id: '101200101', name: '武汉', province: '湖北' },\n      { id: '101180101', name: '郑州', province: '河南' },\n      { id: '101110101', name: '西安', province: '陕西' },\n      { id: '101270101', name: '成都', province: '四川' },\n      { id: '101230101', name: '福州', province: '福建' },\n      { id: '101220101', name: '合肥', province: '安徽' },\n      { id: '101240101', name: '南昌', province: '江西' },\n      { id: '101250101', name: '长沙', province: '湖南' },\n      { id: '101050101', name: '哈尔滨', province: '黑龙江' },\n      { id: '101060101', name: '长春', province: '吉林' },\n      { id: '101070101', name: '沈阳', province: '辽宁' },\n      { id: '101100101', name: '太原', province: '山西' },\n      { id: '101090101', name: '石家庄', province: '河北' },\n      { id: '101120101', name: '济南', province: '山东' },\n      { id: '101150101', name: '西宁', province: '青海' },\n      { id: '101160101', name: '兰州', province: '甘肃' },\n      { id: '101170101', name: '银川', province: '宁夏' },\n      { id: '101130101', name: '乌鲁木齐', province: '新疆' },\n      { id: '101140101', name: '拉萨', province: '西藏' },\n      { id: '101290101', name: '昆明', province: '云南' },\n      { id: '101300101', name: '南宁', province: '广西' },\n      { id: '101310101', name: '海口', province: '海南' },\n      { id: '101320101', name: '香港' },\n      { id: '101330101', name: '澳门' },\n      // 浙江省主要城市\n      { id: '101210201', name: '湖州', province: '浙江' },\n      { id: '101210301', name: '嘉兴', province: '浙江' },\n      { id: '101210401', name: '宁波', province: '浙江' },\n      { id: '101210501', name: '绍兴', province: '浙江' },\n      { id: '101210601', name: '台州', province: '浙江' },\n      { id: '101210701', name: '温州', province: '浙江' },\n      { id: '101210801', name: '丽水', province: '浙江' },\n      { id: '101210901', name: '金华', province: '浙江' },\n      { id: '101211001', name: '衢州', province: '浙江' },\n      { id: '101211101', name: '舟山', province: '浙江' }\n    ];\n\n    console.log('WeatherService initialized with API Host:', this.baseUrl);\n  }\n\n  // 获取指定城市的天气\n  async getCityWeather(cityName) {\n    try {\n      console.log('获取城市天气:', cityName);\n      \n      // 检查缓存\n      const cached = this.weatherCache.get(cityName);\n      if (cached && Date.now() - cached.timestamp < this.cacheExpiration) {\n        console.log('使用缓存的天气数据:', cached.data);\n        return cached.data;\n      }\n\n      // 查找城市ID\n      const city = this.defaultCities.find(c => c.name === cityName);\n      if (!city) {\n        console.log('未找到城市:', cityName);\n        throw new Error(`抱歉，暂不支持查询${cityName}的天气`);\n      }\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      \n      const weatherData = await this.fetchWeatherData(url);\n      weatherData.cityName = cityName; // 确保使用请求时的城市名\n      \n      // 更新缓存\n      this.weatherCache.set(cityName, {\n        data: weatherData,\n        timestamp: Date.now()\n      });\n\n      return weatherData;\n    } catch (error) {\n      console.error('获取城市天气失败:', error);\n      throw error;\n    }\n  }\n\n  // 获取当前位置天气\n  async getLocationWeather() {\n    try {\n      console.log('获取当前位置天气');\n      \n      const position = await this.getCurrentPosition();\n      console.log('获取到位置:', position);\n\n      // 构建请求URL，使用经纬度\n      const url = `${this.baseUrl}/weather/now?location=${position.longitude},${position.latitude}&key=${this.key}`;\n      return await this.fetchWeatherData(url);\n    } catch (error) {\n      console.error('获取当前位置天气失败:', error);\n      // 降级使用默认城市\n      return this.getCityWeather(this.defaultCities[0].name);\n    }\n  }\n\n  // 获取当前位置\n  getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('浏览器不支持地理定位'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.error('地理定位失败:', error);\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0\n        }\n      );\n    });\n  }\n\n  // 统一的天气数据获取方法\n  async fetchWeatherData(url) {\n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Accept-Encoding': 'gzip'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`天气API请求失败: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('API返回的天气数据:', data);\n    \n    if (data.code === '200') {\n      const { temp, text, icon } = data.now;\n      const locationId = data.location?.id;\n      const city = this.defaultCities.find(c => c.id === locationId);\n      \n      const weatherData = {\n        temperature: temp,\n        condition: this.getWeatherCondition(icon),\n        description: text,\n        cityName: city ? city.name : data.location?.name,\n        cityId: locationId,\n        updateTime: data.updateTime\n      };\n      \n      console.log('处理后的天气数据:', weatherData);\n      return weatherData;\n    } else {\n      throw new Error(`天气API返回错误: ${data.code}`);\n    }\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      \n      // 发送请求，添加必要的请求头\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n      \n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    if (!weather) {\n      console.error('天气数据为空');\n      return '抱歉，暂时无法获取天气信息';\n    }\n\n    const { temperature, description, cityName } = weather;\n    console.log('生成天气描述，使用的数据:', weather);\n    \n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: '25',  // 注意这里返回字符串以保持一致性\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      console.log('切换城市, ID:', cityId);\n      \n      // 构建URL\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('切换城市请求URL:', url);\n      \n      // 发送请求\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n      \n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        const city = this.defaultCities.find(c => c.id === cityId) || { name: '未知城市' };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    // 处理省份\n    for (const city of this.defaultCities) {\n      if (city.province && text === city.province) {\n        return city; // 返回该省的省会城市\n      }\n    }\n    \n    // 处理具体城市\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}