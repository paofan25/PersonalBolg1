{"ast":null,"code":"import CryptoJS from 'crypto-js';\nclass SparkService {\n  constructor() {\n    // 配置信息\n    this.appId = '12345';\n    this.apiKey = 'your_api_key_here';\n    this.apiSecret = 'your_api_secret_here';\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.1/chat';\n    this.ws = null;\n    this.connectionPromise = null;\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 鉴权后的URL\n   */\n  genAuthUrl() {\n    const host = 'spark-api.xf-yun.com';\n    const date = new Date().toUTCString();\n    const algorithm = 'hmac-sha256';\n\n    // 拼接待签名字符串\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n\n    // 使用apiSecret签名\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n\n    // 拼接authorization\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"host date request-line\", signature=\"${signature}\"`;\n    const authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(authorizationOrigin));\n\n    // 拼接URL\n    return `${this.apiUrl}?authorization=${authorization}&date=${encodeURI(date)}&host=${host}`;\n  }\n\n  /**\n   * 解析API URL\n   * @returns {string} 解析后的URL\n   */\n  parseApiUrl() {\n    try {\n      console.log('开始生成鉴权URL');\n      const url = this.genAuthUrl();\n      console.log('鉴权URL生成成功');\n      return url;\n    } catch (error) {\n      console.error('解析API URL失败:', error);\n      throw new Error('解析API URL失败');\n    }\n  }\n\n  /**\n   * 发送消息到AI模型并获取回复\n   * @param {string} message - 用户消息\n   * @returns {Promise<string>} AI的回复\n   */\n  sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      try {\n        const url = this.parseApiUrl();\n        console.log('连接WebSocket:', url);\n\n        // 创建WebSocket连接\n        const ws = new WebSocket(url);\n        this.ws = ws;\n        let finalAnswer = '';\n\n        // WebSocket事件处理\n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n          const prompt = this.formatPrompt(message);\n\n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: 'generalv3',\n                temperature: 0.7,\n                max_tokens: 2048\n              }\n            },\n            payload: {\n              message: {\n                text: prompt\n              }\n            }\n          };\n          console.log('发送数据到Spark AI:', JSON.stringify(requestData));\n          ws.send(JSON.stringify(requestData));\n        };\n        ws.onmessage = event => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('接收到消息:', response);\n\n            // 解析回复内容\n            if (response.payload && response.payload.choices && response.payload.choices.text) {\n              const content = response.payload.choices.text[0].content;\n              finalAnswer += content;\n            }\n\n            // 检查是否结束\n            if (response.header && response.header.status === 2) {\n              console.log('AI回复完成:', finalAnswer);\n              ws.close();\n              resolve(finalAnswer);\n            }\n          } catch (error) {\n            console.error('处理消息出错:', error);\n            ws.close();\n            reject(error);\n          }\n        };\n        ws.onerror = error => {\n          console.error('WebSocket出错:', error);\n          reject(error);\n        };\n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n          if (!finalAnswer) {\n            reject(new Error('WebSocket连接已关闭，未收到回复'));\n          }\n        };\n\n        // 设置超时\n        setTimeout(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.close();\n            reject(new Error('请求超时'));\n          }\n        }, 30000);\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 格式化提示词\n   * @param {string} message - 用户消息\n   * @param {string} emotion - 用户情绪\n   * @returns {string} 格式化后的提示词\n   */\n  formatPrompt(message, emotion = 'neutral') {\n    let prompt = `\n用户消息: ${message}\n\n你是一个名为\"糖球助手\"的AI助手，性格可爱，充满童趣，总是使用温暖、活泼的语气和表情符号来回应用户。\n你的回复应该:\n1. 简短友好，每次回复不超过100字\n2. 使用可爱的表情符号，如(^_^)、(>_<)、(*^_^*)等\n3. 偶尔使用一些可爱的语气词，如\"呢\"、\"哦\"、\"啦\"\n4. 展现出温暖积极的态度\n\n用户情绪状态: ${emotion}\n\n请直接回复用户，不需要解释你在做什么，不要使用Markdown格式。\n`;\n    return prompt;\n  }\n\n  /**\n   * 生成回复\n   * @param {string} message - 用户消息\n   * @param {string} emotion - 用户情绪\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(message, emotion = 'neutral') {\n    try {\n      const response = await this.sendMessage(this.formatPrompt(message, emotion));\n      return response;\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      throw error;\n    }\n  }\n}\nexport default new SparkService();","map":{"version":3,"names":["CryptoJS","SparkService","constructor","appId","apiKey","apiSecret","apiUrl","ws","connectionPromise","genAuthUrl","host","date","Date","toUTCString","algorithm","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","Utf8","parse","encodeURI","parseApiUrl","console","log","url","error","Error","sendMessage","message","Promise","resolve","reject","WebSocket","finalAnswer","onopen","prompt","formatPrompt","requestData","header","app_id","uid","now","parameter","chat","domain","temperature","max_tokens","payload","text","JSON","send","onmessage","event","response","data","choices","content","status","close","onerror","onclose","setTimeout","readyState","OPEN","emotion","generateResponse"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["import CryptoJS from 'crypto-js'\n\nclass SparkService {\n  constructor() {\n    // 配置信息\n    this.appId = '12345'\n    this.apiKey = 'your_api_key_here'\n    this.apiSecret = 'your_api_secret_here'\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.1/chat'\n    \n    this.ws = null\n    this.connectionPromise = null\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 鉴权后的URL\n   */\n  genAuthUrl() {\n    const host = 'spark-api.xf-yun.com'\n    const date = new Date().toUTCString()\n    const algorithm = 'hmac-sha256'\n    \n    // 拼接待签名字符串\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`\n    \n    // 使用apiSecret签名\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret)\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha)\n    \n    // 拼接authorization\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"${algorithm}\", headers=\"host date request-line\", signature=\"${signature}\"`\n    const authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(authorizationOrigin))\n    \n    // 拼接URL\n    return `${this.apiUrl}?authorization=${authorization}&date=${encodeURI(date)}&host=${host}`\n  }\n\n  /**\n   * 解析API URL\n   * @returns {string} 解析后的URL\n   */\n  parseApiUrl() {\n    try {\n      console.log('开始生成鉴权URL')\n      const url = this.genAuthUrl()\n      console.log('鉴权URL生成成功')\n      return url\n    } catch (error) {\n      console.error('解析API URL失败:', error)\n      throw new Error('解析API URL失败')\n    }\n  }\n\n  /**\n   * 发送消息到AI模型并获取回复\n   * @param {string} message - 用户消息\n   * @returns {Promise<string>} AI的回复\n   */\n  sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      try {\n        const url = this.parseApiUrl()\n        console.log('连接WebSocket:', url)\n        \n        // 创建WebSocket连接\n        const ws = new WebSocket(url)\n        this.ws = ws\n        \n        let finalAnswer = ''\n        \n        // WebSocket事件处理\n        ws.onopen = () => {\n          console.log('WebSocket连接已建立')\n          \n          const prompt = this.formatPrompt(message)\n          \n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: 'generalv3',\n                temperature: 0.7,\n                max_tokens: 2048\n              }\n            },\n            payload: {\n              message: {\n                text: prompt\n              }\n            }\n          }\n          \n          console.log('发送数据到Spark AI:', JSON.stringify(requestData))\n          ws.send(JSON.stringify(requestData))\n        }\n        \n        ws.onmessage = (event) => {\n          try {\n            const response = JSON.parse(event.data)\n            console.log('接收到消息:', response)\n            \n            // 解析回复内容\n            if (response.payload && response.payload.choices && response.payload.choices.text) {\n              const content = response.payload.choices.text[0].content\n              finalAnswer += content\n            }\n            \n            // 检查是否结束\n            if (response.header && response.header.status === 2) {\n              console.log('AI回复完成:', finalAnswer)\n              ws.close()\n              resolve(finalAnswer)\n            }\n          } catch (error) {\n            console.error('处理消息出错:', error)\n            ws.close()\n            reject(error)\n          }\n        }\n        \n        ws.onerror = (error) => {\n          console.error('WebSocket出错:', error)\n          reject(error)\n        }\n        \n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭')\n          if (!finalAnswer) {\n            reject(new Error('WebSocket连接已关闭，未收到回复'))\n          }\n        }\n        \n        // 设置超时\n        setTimeout(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.close()\n            reject(new Error('请求超时'))\n          }\n        }, 30000)\n      } catch (error) {\n        console.error('发送消息失败:', error)\n        reject(error)\n      }\n    })\n  }\n  \n  /**\n   * 格式化提示词\n   * @param {string} message - 用户消息\n   * @param {string} emotion - 用户情绪\n   * @returns {string} 格式化后的提示词\n   */\n  formatPrompt(message, emotion = 'neutral') {\n    let prompt = `\n用户消息: ${message}\n\n你是一个名为\"糖球助手\"的AI助手，性格可爱，充满童趣，总是使用温暖、活泼的语气和表情符号来回应用户。\n你的回复应该:\n1. 简短友好，每次回复不超过100字\n2. 使用可爱的表情符号，如(^_^)、(>_<)、(*^_^*)等\n3. 偶尔使用一些可爱的语气词，如\"呢\"、\"哦\"、\"啦\"\n4. 展现出温暖积极的态度\n\n用户情绪状态: ${emotion}\n\n请直接回复用户，不需要解释你在做什么，不要使用Markdown格式。\n`\n    return prompt\n  }\n  \n  /**\n   * 生成回复\n   * @param {string} message - 用户消息\n   * @param {string} emotion - 用户情绪\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(message, emotion = 'neutral') {\n    try {\n      const response = await this.sendMessage(this.formatPrompt(message, emotion))\n      return response\n    } catch (error) {\n      console.error('生成回复失败:', error)\n      throw error\n    }\n  }\n}\n\nexport default new SparkService()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}