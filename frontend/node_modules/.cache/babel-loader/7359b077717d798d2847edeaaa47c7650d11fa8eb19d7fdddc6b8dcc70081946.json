{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport CryptoJS from 'crypto-js';\nclass WeatherService {\n  constructor() {\n    // 使用开发者密钥\n    this.publicId = 'HE2305231516011731'; // 公钥\n    this.privateKey = '7fc6f5e5e8374b3b9407a792c4d6a799'; // 私钥\n    this.baseUrl = 'https://devapi.qweather.com/v7';\n\n    // 默认城市列表\n    this.defaultCities = [{\n      id: '101190101',\n      name: '南京'\n    }, {\n      id: '101020100',\n      name: '上海'\n    }, {\n      id: '101010100',\n      name: '北京'\n    }];\n    console.log('WeatherService initialized');\n  }\n\n  // 生成签名\n  generateSignature(params = {}) {\n    const date = Math.floor(Date.now() / 1000);\n    const allParams = {\n      ...params,\n      t: date,\n      publicid: this.publicId\n    };\n\n    // 按照key的字母顺序排序\n    const sortedKeys = Object.keys(allParams).sort();\n    const signStr = sortedKeys.map(key => `${key}=${allParams[key]}`).join('&');\n\n    // 加上私钥\n    const stringToSign = signStr + this.privateKey;\n\n    // 计算MD5\n    const signature = CryptoJS.MD5(stringToSign).toString();\n    return {\n      t: date,\n      publicid: this.publicId,\n      sign: signature\n    };\n  }\n\n  // 构建完整的URL\n  buildUrl(path, params = {}) {\n    const signParams = this.generateSignature(params);\n    const allParams = {\n      ...params,\n      ...signParams\n    };\n    const queryString = Object.entries(allParams).map(([key, value]) => `${key}=${encodeURIComponent(value)}`).join('&');\n    return `${this.baseUrl}${path}?${queryString}`;\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n      const url = this.buildUrl('/weather/now', {\n        location: defaultCity.id\n      });\n      console.log('请求天气URL:', url);\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', weatherData);\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const {\n      temperature,\n      description,\n      cityName\n    } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      const url = this.buildUrl('/weather/now', {\n        location: cityId\n      });\n      console.log('正在获取天气信息...');\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', weatherData);\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || {\n          name: '未知城市'\n        };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["CryptoJS","WeatherService","constructor","publicId","privateKey","baseUrl","defaultCities","id","name","console","log","generateSignature","params","date","Math","floor","Date","now","allParams","t","publicid","sortedKeys","Object","keys","sort","signStr","map","key","join","stringToSign","signature","MD5","toString","sign","buildUrl","path","signParams","queryString","entries","value","encodeURIComponent","getNowWeather","defaultCity","url","location","weatherResponse","fetch","headers","ok","Error","status","weatherData","json","code","temp","text","icon","temperature","condition","getWeatherCondition","description","cityName","updateTime","error","getDefaultWeather","generateWeatherDescription","weather","suggestion","parseInt","includes","conditions","sunny","cloudy","rainy","snowy","foggy","icons","toISOString","switchCity","cityId","city","find","c","parseCityName"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nclass WeatherService {\n  constructor() {\n    // 使用开发者密钥\n    this.publicId = 'HE2305231516011731';  // 公钥\n    this.privateKey = '7fc6f5e5e8374b3b9407a792c4d6a799'; // 私钥\n    this.baseUrl = 'https://devapi.qweather.com/v7';\n    \n    // 默认城市列表\n    this.defaultCities = [\n      { id: '101190101', name: '南京' },\n      { id: '101020100', name: '上海' },\n      { id: '101010100', name: '北京' }\n    ];\n\n    console.log('WeatherService initialized');\n  }\n\n  // 生成签名\n  generateSignature(params = {}) {\n    const date = Math.floor(Date.now() / 1000);\n    const allParams = {\n      ...params,\n      t: date,\n      publicid: this.publicId\n    };\n\n    // 按照key的字母顺序排序\n    const sortedKeys = Object.keys(allParams).sort();\n    const signStr = sortedKeys.map(key => `${key}=${allParams[key]}`).join('&');\n    \n    // 加上私钥\n    const stringToSign = signStr + this.privateKey;\n    \n    // 计算MD5\n    const signature = CryptoJS.MD5(stringToSign).toString();\n    \n    return {\n      t: date,\n      publicid: this.publicId,\n      sign: signature\n    };\n  }\n\n  // 构建完整的URL\n  buildUrl(path, params = {}) {\n    const signParams = this.generateSignature(params);\n    const allParams = { ...params, ...signParams };\n    const queryString = Object.entries(allParams)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&');\n    \n    return `${this.baseUrl}${path}?${queryString}`;\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n\n      const url = this.buildUrl('/weather/now', { location: defaultCity.id });\n      console.log('请求天气URL:', url);\n      \n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      \n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', weatherData);\n\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const { temperature, description, cityName } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      const url = this.buildUrl('/weather/now', { location: cityId });\n      console.log('正在获取天气信息...');\n      \n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n      \n      if (!weatherResponse.ok) {\n        throw new Error(`HTTP error! status: ${weatherResponse.status}`);\n      }\n      \n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', weatherData);\n\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        const city = this.defaultCities.find(c => c.id === cityId) || { name: '未知城市' };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}