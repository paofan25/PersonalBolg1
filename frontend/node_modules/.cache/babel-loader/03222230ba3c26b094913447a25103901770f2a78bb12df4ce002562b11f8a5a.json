{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SparkService from '@/services/sparkAI';\n\n// 聊天模块\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n};\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion\n};\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message);\n  },\n  SET_TYPING(state, isTyping) {\n    state.isTyping = isTyping;\n  },\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion;\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info;\n  },\n  TOGGLE_SOUND_EFFECTS(state) {\n    state.soundEffects = !state.soundEffects;\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = [];\n  }\n};\nconst actions = {\n  // 发送消息\n  async sendMessage({\n    commit,\n    state\n  }, message) {\n    try {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        text: message,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      });\n\n      // 设置助手正在输入状态\n      commit('SET_TYPING', true);\n\n      // 分析情绪\n      const emotion = analyzeEmotion(message);\n      commit('CHANGE_EMOTION', emotion);\n\n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(message);\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo();\n        commit('SET_WEATHER_INFO', weatherInfo);\n      }\n      let response = '';\n      try {\n        // 尝试使用AI服务获取响应\n        response = await SparkService.generateResponse(message, emotion);\n        console.log('AI响应:', response);\n      } catch (error) {\n        console.error('AI服务错误，使用本地响应:', error);\n        // 如果AI服务失败，使用本地生成的响应\n        response = generateResponse(message, emotion);\n      }\n\n      // 添加助手响应\n      commit('ADD_MESSAGE', {\n        id: Date.now() + 1,\n        text: response,\n        sender: 'assistant',\n        timestamp: new Date().toISOString(),\n        emotion: state.currentEmotion\n      });\n\n      // 取消助手正在输入状态\n      commit('SET_TYPING', false);\n      return response;\n    } catch (error) {\n      console.error('处理消息失败:', error);\n      commit('SET_TYPING', false);\n      throw error;\n    }\n  },\n  // 清空聊天历史\n  clearChat({\n    commit\n  }) {\n    commit('CLEAR_MESSAGES');\n  }\n};\n\n// 辅助函数：分析情绪\nfunction analyzeEmotion(message) {\n  const lowerMessage = message.toLowerCase();\n\n  // 简单的关键词匹配\n  if (/高兴|开心|快乐|棒|好|喜欢|爱|感谢|谢谢/.test(lowerMessage)) {\n    return 'happy';\n  }\n  if (/难过|伤心|悲伤|痛苦|失望|不开心|哭/.test(lowerMessage)) {\n    return 'sad';\n  }\n  if (/生气|愤怒|烦|讨厌|恨|滚|闭嘴|笨蛋|傻/.test(lowerMessage)) {\n    return 'angry';\n  }\n  if (/惊讶|哇|啊|天啊|不会吧|真的吗/.test(lowerMessage)) {\n    return 'surprised';\n  }\n  if (/害怕|恐惧|怕|担心|紧张|焦虑/.test(lowerMessage)) {\n    return 'scared';\n  }\n  return 'neutral';\n}\n\n// 辅助函数：检查天气相关查询\nfunction checkForWeatherQuery(message) {\n  const lowerMessage = message.toLowerCase();\n  return /天气|气温|下雨|下雪|晴天|阴天|温度|冷|热/.test(lowerMessage);\n}\n\n// 辅助函数：获取天气信息（模拟）\nasync function getWeatherInfo() {\n  // 模拟API调用延迟\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // 模拟天气数据\n  const weathers = ['晴天', '多云', '阴天', '小雨', '中雨', '大雨', '雷阵雨', '小雪', '中雪', '大雪'];\n  const weatherType = weathers[Math.floor(Math.random() * weathers.length)];\n  const temperature = Math.floor(Math.random() * 35) - 5; // -5到30度\n\n  return {\n    city: '当前城市',\n    weatherType,\n    temperature,\n    humidity: Math.floor(Math.random() * 100),\n    windSpeed: Math.floor(Math.random() * 10),\n    updated: new Date().toISOString()\n  };\n}\n\n// 辅助函数：生成本地响应\nfunction generateResponse(message, emotion) {\n  // 根据情绪生成不同类型的响应\n  switch (emotion) {\n    case 'happy':\n      return '我很高兴看到你这么开心！有什么我能帮助你的吗？';\n    case 'sad':\n      return '看起来你有点难过。不要担心，我在这里陪着你。有什么想聊的吗？';\n    case 'angry':\n      return '我理解你现在可能有些不愉快。深呼吸，我们一起来解决问题。';\n    case 'surprised':\n      return '哇！这确实很令人惊讶呢！我能了解更多吗？';\n    case 'scared':\n      return '别担心，一切都会好起来的。有什么特别让你担心的事情吗？';\n    default:\n      // 检查是否是问候\n      if (/你好|早上好|晚上好|嗨|哈喽|hi|hello/.test(message.toLowerCase())) {\n        return '你好呀！很高兴和你聊天。我是糖球助手，有什么我能帮你的吗？';\n      }\n\n      // 检查是否是感谢\n      if (/谢谢|感谢|thank/.test(message.toLowerCase())) {\n        return '不用谢！能帮到你我很开心。还有其他问题吗？';\n      }\n\n      // 检查是否是询问机器人\n      if (/你是谁|你叫什么|介绍一下/.test(message.toLowerCase())) {\n        return '我是糖球助手，你的AI聊天伙伴。我喜欢帮助人们、回答问题，和大家聊天！';\n      }\n\n      // 默认响应\n      const defaultResponses = ['嗯，这个问题很有趣。能告诉我更多吗？', '我理解你的想法。让我们继续探讨这个话题吧！', '谢谢分享！我很想听听你更多的想法。', '这是个好问题！让我思考一下...', '我们可以从不同角度来看这个问题。你有什么特别关注的方面吗？'];\n      return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  }\n}\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["SparkService","state","messages","isTyping","currentEmotion","weatherInfo","soundEffects","getters","allMessages","mutations","ADD_MESSAGE","message","push","SET_TYPING","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND_EFFECTS","CLEAR_MESSAGES","actions","sendMessage","commit","id","Date","now","text","sender","timestamp","toISOString","analyzeEmotion","isWeatherQuery","checkForWeatherQuery","getWeatherInfo","response","generateResponse","console","log","error","clearChat","lowerMessage","toLowerCase","test","Promise","resolve","setTimeout","weathers","weatherType","Math","floor","random","length","temperature","city","humidity","windSpeed","updated","defaultResponses","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\n\n// 聊天模块\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n}\n\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion\n}\n\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message)\n  },\n  SET_TYPING(state, isTyping) {\n    state.isTyping = isTyping\n  },\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info\n  },\n  TOGGLE_SOUND_EFFECTS(state) {\n    state.soundEffects = !state.soundEffects\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = []\n  }\n}\n\nconst actions = {\n  // 发送消息\n  async sendMessage({ commit, state }, message) {\n    try {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        text: message,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      })\n      \n      // 设置助手正在输入状态\n      commit('SET_TYPING', true)\n      \n      // 分析情绪\n      const emotion = analyzeEmotion(message)\n      commit('CHANGE_EMOTION', emotion)\n      \n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(message)\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo()\n        commit('SET_WEATHER_INFO', weatherInfo)\n      }\n      \n      let response = ''\n      try {\n        // 尝试使用AI服务获取响应\n        response = await SparkService.generateResponse(message, emotion)\n        console.log('AI响应:', response)\n      } catch (error) {\n        console.error('AI服务错误，使用本地响应:', error)\n        // 如果AI服务失败，使用本地生成的响应\n        response = generateResponse(message, emotion)\n      }\n      \n      // 添加助手响应\n      commit('ADD_MESSAGE', {\n        id: Date.now() + 1,\n        text: response,\n        sender: 'assistant',\n        timestamp: new Date().toISOString(),\n        emotion: state.currentEmotion\n      })\n      \n      // 取消助手正在输入状态\n      commit('SET_TYPING', false)\n      \n      return response\n    } catch (error) {\n      console.error('处理消息失败:', error)\n      commit('SET_TYPING', false)\n      throw error\n    }\n  },\n  \n  // 清空聊天历史\n  clearChat({ commit }) {\n    commit('CLEAR_MESSAGES')\n  }\n}\n\n// 辅助函数：分析情绪\nfunction analyzeEmotion(message) {\n  const lowerMessage = message.toLowerCase()\n  \n  // 简单的关键词匹配\n  if (/高兴|开心|快乐|棒|好|喜欢|爱|感谢|谢谢/.test(lowerMessage)) {\n    return 'happy'\n  }\n  if (/难过|伤心|悲伤|痛苦|失望|不开心|哭/.test(lowerMessage)) {\n    return 'sad'\n  }\n  if (/生气|愤怒|烦|讨厌|恨|滚|闭嘴|笨蛋|傻/.test(lowerMessage)) {\n    return 'angry'\n  }\n  if (/惊讶|哇|啊|天啊|不会吧|真的吗/.test(lowerMessage)) {\n    return 'surprised'\n  }\n  if (/害怕|恐惧|怕|担心|紧张|焦虑/.test(lowerMessage)) {\n    return 'scared'\n  }\n  \n  return 'neutral'\n}\n\n// 辅助函数：检查天气相关查询\nfunction checkForWeatherQuery(message) {\n  const lowerMessage = message.toLowerCase()\n  return /天气|气温|下雨|下雪|晴天|阴天|温度|冷|热/.test(lowerMessage)\n}\n\n// 辅助函数：获取天气信息（模拟）\nasync function getWeatherInfo() {\n  // 模拟API调用延迟\n  await new Promise(resolve => setTimeout(resolve, 500))\n  \n  // 模拟天气数据\n  const weathers = ['晴天', '多云', '阴天', '小雨', '中雨', '大雨', '雷阵雨', '小雪', '中雪', '大雪']\n  const weatherType = weathers[Math.floor(Math.random() * weathers.length)]\n  const temperature = Math.floor(Math.random() * 35) - 5 // -5到30度\n  \n  return {\n    city: '当前城市',\n    weatherType,\n    temperature,\n    humidity: Math.floor(Math.random() * 100),\n    windSpeed: Math.floor(Math.random() * 10),\n    updated: new Date().toISOString()\n  }\n}\n\n// 辅助函数：生成本地响应\nfunction generateResponse(message, emotion) {\n  // 根据情绪生成不同类型的响应\n  switch (emotion) {\n    case 'happy':\n      return '我很高兴看到你这么开心！有什么我能帮助你的吗？'\n    case 'sad':\n      return '看起来你有点难过。不要担心，我在这里陪着你。有什么想聊的吗？'\n    case 'angry':\n      return '我理解你现在可能有些不愉快。深呼吸，我们一起来解决问题。'\n    case 'surprised':\n      return '哇！这确实很令人惊讶呢！我能了解更多吗？'\n    case 'scared':\n      return '别担心，一切都会好起来的。有什么特别让你担心的事情吗？'\n    default:\n      // 检查是否是问候\n      if (/你好|早上好|晚上好|嗨|哈喽|hi|hello/.test(message.toLowerCase())) {\n        return '你好呀！很高兴和你聊天。我是糖球助手，有什么我能帮你的吗？'\n      }\n      \n      // 检查是否是感谢\n      if (/谢谢|感谢|thank/.test(message.toLowerCase())) {\n        return '不用谢！能帮到你我很开心。还有其他问题吗？'\n      }\n      \n      // 检查是否是询问机器人\n      if (/你是谁|你叫什么|介绍一下/.test(message.toLowerCase())) {\n        return '我是糖球助手，你的AI聊天伙伴。我喜欢帮助人们、回答问题，和大家聊天！'\n      }\n      \n      // 默认响应\n      const defaultResponses = [\n        '嗯，这个问题很有趣。能告诉我更多吗？',\n        '我理解你的想法。让我们继续探讨这个话题吧！',\n        '谢谢分享！我很想听听你更多的想法。',\n        '这是个好问题！让我思考一下...',\n        '我们可以从不同角度来看这个问题。你有什么特别关注的方面吗？'\n      ]\n      return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}