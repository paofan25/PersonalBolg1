{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"assistant-avatar\"\n};\nconst _hoisted_3 = {\n  class: \"face\"\n};\nconst _hoisted_4 = {\n  class: \"assistant-status\"\n};\nconst _hoisted_5 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_6 = {\n  class: \"message-content\"\n};\nconst _hoisted_7 = {\n  class: \"message-time\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"message assistant-message typing\"\n};\nconst _hoisted_9 = {\n  class: \"chat-input\"\n};\nconst _hoisted_10 = [\"disabled\"];\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"title\"];\nconst _hoisted_13 = {\n  class: \"sound-icon\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 机器人形象区域 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"avatar-image\", _ctx.currentEmotion])\n  }, [_createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"eyes\"\n  }, [_createElementVNode(\"div\", {\n    class: \"eye left\"\n  }), _createElementVNode(\"div\", {\n    class: \"eye right\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"mouth\", _ctx.currentEmotion])\n  }, null, 2 /* CLASS */)])], 2 /* CLASS */), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"assistant-name\"\n  }, \"梦梦\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, _toDisplayString(_ctx.isTyping ? '正在输入...' : '在线'), 1 /* TEXT */)]), _createCommentVNode(\" 聊天消息区域 \"), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.sender === 'user' ? 'user-message' : 'assistant-message'])\n    }, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(message.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($options.formatTime(message.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), _ctx.isTyping ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _cache[7] || (_cache[7] = [_createElementVNode(\"div\", {\n    class: \"typing-indicator\"\n  }, [_createElementVNode(\"span\"), _createElementVNode(\"span\"), _createElementVNode(\"span\")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */), _createCommentVNode(\" 输入区域 \"), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"和梦梦聊天吧...\",\n    disabled: _ctx.isTyping\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_10), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: _ctx.isTyping || !$data.userInput.trim()\n  }, _cache[8] || (_cache[8] = [_createElementVNode(\"span\", {\n    class: \"send-icon\"\n  }, \"✉️\", -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_11), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.clearChat && $options.clearChat(...args)),\n    class: \"clear-button\",\n    title: \"清空聊天\"\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"span\", {\n    class: \"clear-icon\"\n  }, \"🗑️\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleSound && $options.toggleSound(...args)),\n    class: \"sound-button\",\n    title: _ctx.soundEnabled ? '关闭声音' : '打开声音'\n  }, [_createElementVNode(\"span\", _hoisted_13, _toDisplayString(_ctx.soundEnabled ? '🔊' : '🔇'), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_12)])]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_normalizeClass","_ctx","currentEmotion","_hoisted_3","_hoisted_4","_toDisplayString","isTyping","_hoisted_5","_Fragment","_renderList","messages","message","index","sender","_hoisted_6","content","_hoisted_7","$options","formatTime","timestamp","_hoisted_8","_cache","_hoisted_9","type","$event","$data","userInput","onKeyup","_withKeys","args","sendMessage","placeholder","disabled","_hoisted_10","onClick","trim","_hoisted_11","clearChat","title","toggleSound","soundEnabled","_hoisted_13","_hoisted_12"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\components\\ChatAssistant.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 机器人形象区域 -->\n    <div class=\"assistant-avatar\">\n      <div class=\"avatar-image\" :class=\"currentEmotion\">\n        <div class=\"face\">\n          <div class=\"eyes\">\n            <div class=\"eye left\"></div>\n            <div class=\"eye right\"></div>\n          </div>\n          <div class=\"mouth\" :class=\"currentEmotion\"></div>\n        </div>\n      </div>\n      <div class=\"assistant-name\">梦梦</div>\n      <div class=\"assistant-status\">{{ isTyping ? '正在输入...' : '在线' }}</div>\n    </div>\n\n    <!-- 聊天消息区域 -->\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\n      <div v-for=\"(message, index) in messages\" :key=\"index\" \n           :class=\"['message', message.sender === 'user' ? 'user-message' : 'assistant-message']\">\n        <div class=\"message-content\">\n          {{ message.content }}\n        </div>\n        <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n      </div>\n      <div v-if=\"isTyping\" class=\"message assistant-message typing\">\n        <div class=\"typing-indicator\">\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n    </div>\n\n    <!-- 输入区域 -->\n    <div class=\"chat-input\">\n      <input \n        type=\"text\" \n        v-model=\"userInput\" \n        @keyup.enter=\"sendMessage\" \n        placeholder=\"和梦梦聊天吧...\" \n        :disabled=\"isTyping\"\n      />\n      <button @click=\"sendMessage\" :disabled=\"isTyping || !userInput.trim()\">\n        <span class=\"send-icon\">✉️</span>\n      </button>\n      <button @click=\"clearChat\" class=\"clear-button\" title=\"清空聊天\">\n        <span class=\"clear-icon\">🗑️</span>\n      </button>\n      <button @click=\"toggleSound\" class=\"sound-button\" :title=\"soundEnabled ? '关闭声音' : '打开声音'\">\n        <span class=\"sound-icon\">{{ soundEnabled ? '🔊' : '🔇' }}</span>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapMutations } from 'vuex';\n\nexport default {\n  name: 'ChatAssistant',\n  data() {\n    return {\n      userInput: '',\n      messageSound: null,\n      typingSound: null\n    };\n  },\n  computed: {\n    ...mapState('chat', [\n      'messages', \n      'isTyping', \n      'currentEmotion',\n      'soundEnabled'\n    ])\n  },\n  methods: {\n    ...mapActions('chat', [\n      'sendUserMessage',\n      'clearChatHistory'\n    ]),\n    ...mapMutations('chat', [\n      'toggleSoundEffects'\n    ]),\n    sendMessage() {\n      if (this.userInput.trim() && !this.isTyping) {\n        this.sendUserMessage(this.userInput);\n        this.userInput = '';\n        this.playMessageSound();\n      }\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    },\n    scrollToBottom() {\n      setTimeout(() => {\n        if (this.$refs.messagesContainer) {\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n        }\n      }, 50);\n    },\n    playMessageSound() {\n      if (this.soundEnabled && this.messageSound) {\n        this.messageSound.currentTime = 0;\n        this.messageSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    playTypingSound() {\n      if (this.soundEnabled && this.typingSound && this.isTyping) {\n        this.typingSound.currentTime = 0;\n        this.typingSound.play().catch(err => console.error('播放声音失败:', err));\n      }\n    },\n    clearChat() {\n      if (confirm('确定要清空所有聊天记录吗？')) {\n        this.clearChatHistory();\n      }\n    },\n    toggleSound() {\n      this.toggleSoundEffects();\n    },\n    initSounds() {\n      // 创建音频对象\n      this.messageSound = new Audio();\n      this.messageSound.src = require('@/assets/sounds/message.mp3').default || require('@/assets/sounds/message.mp3');\n      this.messageSound.volume = 0.5;\n      \n      this.typingSound = new Audio();\n      this.typingSound.src = require('@/assets/sounds/typing.mp3').default || require('@/assets/sounds/typing.mp3');\n      this.typingSound.volume = 0.3;\n      this.typingSound.loop = true;\n    }\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    },\n    isTyping(newVal) {\n      if (newVal) {\n        this.playTypingSound();\n      } else if (this.typingSound) {\n        this.typingSound.pause();\n      }\n      this.scrollToBottom();\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n    try {\n      this.initSounds();\n    } catch (error) {\n      console.error('初始化声音失败:', error);\n    }\n  },\n  beforeDestroy() {\n    if (this.typingSound) {\n      this.typingSound.pause();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-width: 100%;\n  background-color: #f8f9fe;\n  border-radius: 16px;\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 机器人形象区域 */\n.assistant-avatar {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #ffeef8;\n  border-bottom: 1px solid #f0e6ff;\n}\n\n.avatar-image {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #ffccd5 0%, #ffb3d9 100%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 10px;\n  box-shadow: 0 4px 12px rgba(255, 179, 217, 0.4);\n  transition: all 0.3s ease;\n}\n\n.avatar-image.happy {\n  background: linear-gradient(135deg, #ffccd5 0%, #ffb3d9 100%);\n}\n\n.avatar-image.sad {\n  background: linear-gradient(135deg, #b3e0ff 0%, #99ccff 100%);\n}\n\n.avatar-image.neutral {\n  background: linear-gradient(135deg, #e6e6ff 0%, #d9d9f2 100%);\n}\n\n.avatar-image.excited {\n  background: linear-gradient(135deg, #ffffb3 0%, #ffeb99 100%);\n}\n\n.face {\n  position: relative;\n  width: 60px;\n  height: 60px;\n}\n\n.eyes {\n  display: flex;\n  justify-content: space-around;\n  padding-top: 20px;\n}\n\n.eye {\n  width: 12px;\n  height: 12px;\n  background-color: #333;\n  border-radius: 50%;\n  position: relative;\n}\n\n.mouth {\n  width: 30px;\n  height: 10px;\n  border-bottom: 3px solid #333;\n  border-radius: 50%;\n  margin: 10px auto 0;\n  transition: all 0.3s ease;\n}\n\n.mouth.happy {\n  border-bottom: 3px solid #333;\n  border-radius: 0 0 10px 10px;\n  transform: rotate(180deg);\n}\n\n.mouth.sad {\n  border-bottom: 3px solid #333;\n  border-radius: 0 0 10px 10px;\n}\n\n.mouth.neutral {\n  width: 20px;\n  height: 3px;\n  border: none;\n  background-color: #333;\n  border-radius: 3px;\n  margin-top: 15px;\n}\n\n.mouth.excited {\n  border-bottom: 5px solid #333;\n  border-radius: 0 0 15px 15px;\n  transform: rotate(180deg);\n  width: 35px;\n}\n\n.assistant-name {\n  font-weight: bold;\n  color: #6b5b95;\n  margin-bottom: 5px;\n  font-size: 18px;\n}\n\n.assistant-status {\n  font-size: 12px;\n  color: #888;\n}\n\n/* 聊天消息区域 */\n.chat-messages {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message {\n  max-width: 80%;\n  padding: 12px 15px;\n  border-radius: 18px;\n  position: relative;\n  animation: fadeIn 0.3s ease;\n  word-break: break-word;\n}\n\n.user-message {\n  align-self: flex-end;\n  background-color: #e1f5fe;\n  border-bottom-right-radius: 4px;\n  color: #0277bd;\n}\n\n.assistant-message {\n  align-self: flex-start;\n  background-color: #fff1f0;\n  border-bottom-left-radius: 4px;\n  color: #c41d7f;\n}\n\n.message-content {\n  margin-bottom: 5px;\n  line-height: 1.4;\n}\n\n.message-time {\n  font-size: 10px;\n  color: #999;\n  text-align: right;\n}\n\n.typing-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px 10px;\n}\n\n.typing-indicator span {\n  width: 8px;\n  height: 8px;\n  background-color: #c41d7f;\n  border-radius: 50%;\n  margin: 0 2px;\n  animation: bounce 1.3s ease infinite;\n  opacity: 0.6;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.15s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.3s;\n}\n\n/* 输入区域 */\n.chat-input {\n  display: flex;\n  padding: 15px;\n  background-color: #fff;\n  border-top: 1px solid #f0e6ff;\n}\n\n.chat-input input {\n  flex: 1;\n  padding: 10px 15px;\n  border-radius: 20px;\n  border: 1px solid #e6e6fa;\n  outline: none;\n  font-size: 14px;\n  transition: all 0.2s;\n}\n\n.chat-input input:focus {\n  border-color: #d0c4f2;\n  box-shadow: 0 0 0 2px rgba(208, 196, 242, 0.3);\n}\n\n.chat-input button {\n  margin-left: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: none;\n  background-color: #ffb3d9;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.chat-input button:hover {\n  background-color: #ff99cc;\n  transform: scale(1.05);\n}\n\n.chat-input button:disabled {\n  background-color: #e6e6e6;\n  cursor: not-allowed;\n}\n\n.clear-button, .sound-button {\n  background-color: #f0e6ff !important;\n}\n\n.clear-button:hover, .sound-button:hover {\n  background-color: #e6d9ff !important;\n}\n\n.send-icon, .clear-icon, .sound-icon {\n  font-size: 16px;\n}\n\n/* 动画 */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes bounce {\n  0%, 80%, 100% { transform: translateY(0); }\n  40% { transform: translateY(-8px); }\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .message {\n    max-width: 90%;\n  }\n  \n  .avatar-image {\n    width: 60px;\n    height: 60px;\n  }\n  \n  .face {\n    width: 45px;\n    height: 45px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}