{"ast":null,"code":"import { computed, ref, onMounted, nextTick, watch } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'ChatAssistant',\n  components: {\n    // 暂时移除表情选择器组件\n  },\n  setup() {\n    const store = useStore();\n    const inputText = ref('');\n    const emojiPickerVisible = ref(false);\n    const messageContainer = ref(null);\n    const assistantAvatar = ref(null);\n    const inputArea = ref(null);\n\n    // Vuex 状态\n    const messages = computed(() => store.getters['chat/getAllMessages'] || []);\n    const messagesArray = computed(() => {\n      return Array.isArray(messages.value) ? messages.value : [];\n    });\n    const isTyping = computed(() => store.getters['chat/getIsTyping'] || false);\n    const currentEmotion = computed(() => store.getters['chat/getCurrentEmotion'] || 'neutral');\n\n    // 发送欢迎消息\n    onMounted(() => {\n      console.log('[ChatView] 组件挂载');\n      store.dispatch('chat/clearChat');\n\n      // 添加欢迎消息\n      store.commit('chat/ADD_MESSAGE', {\n        text: '你好呀！我是糖球助手，有什么可以帮到你的吗？可以问我天气哦~ 😊',\n        type: 'assistant',\n        timestamp: new Date()\n      });\n      nextTick(() => {\n        scrollToBottom();\n      });\n    });\n\n    // 发送消息方法\n    const sendMessage = () => {\n      const text = inputText.value.trim();\n      console.log('[ChatView] 准备发送消息:', text);\n      if (!text || isTyping.value) return;\n      try {\n        // 发送消息\n        store.dispatch('chat/sendMessage', text);\n\n        // 清空输入框\n        inputText.value = '';\n\n        // 滚动到底部\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('[ChatView] 发送消息失败:', error);\n      }\n    };\n\n    // 格式化时间\n    const formatTime = timestamp => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messageContainer.value) {\n          messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\n        }\n      });\n    };\n\n    // 处理动作按钮点击\n    const handleAction = action => {\n      console.log('[ChatView] 处理动作:', action);\n      // 这里可以扩展各种交互动作\n    };\n\n    // 获取动作按钮标签\n    const getActionLabel = action => {\n      const labels = {\n        'sound-purr': '听呼噜声',\n        'sound-rain': '听雨声',\n        'sound-music': '听音乐',\n        'animation-bounce': '一起跳舞',\n        'animation-think': '思考中'\n      };\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\n    };\n\n    // 插入表情符号\n    const insertEmoji = emoji => {\n      if (!emoji) return;\n      const textarea = inputArea.value;\n      if (textarea) {\n        const start = textarea.selectionStart;\n        const end = textarea.selectionEnd;\n        inputText.value = inputText.value.substring(0, start) + emoji.char + inputText.value.substring(end);\n        nextTick(() => {\n          textarea.focus();\n          textarea.selectionStart = textarea.selectionEnd = start + emoji.char.length;\n        });\n      }\n      emojiPickerVisible.value = false;\n    };\n\n    // 监听消息变化，这里使用可选链以避免messagesArray为undefined的情况\n    watch(() => messagesArray.value?.length, () => {\n      scrollToBottom();\n    });\n    return {\n      inputText,\n      emojiPickerVisible,\n      messageContainer,\n      assistantAvatar,\n      inputArea,\n      messages,\n      messagesArray,\n      isTyping,\n      currentEmotion,\n      sendMessage,\n      formatTime,\n      scrollToBottom,\n      handleAction,\n      getActionLabel,\n      insertEmoji\n    };\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","nextTick","watch","useStore","name","components","setup","store","inputText","emojiPickerVisible","messageContainer","assistantAvatar","inputArea","messages","getters","messagesArray","Array","isArray","value","isTyping","currentEmotion","console","log","dispatch","commit","text","type","timestamp","Date","scrollToBottom","sendMessage","trim","error","formatTime","date","toLocaleTimeString","hour","minute","scrollTop","scrollHeight","handleAction","action","getActionLabel","labels","sound","insertEmoji","emoji","textarea","start","selectionStart","end","selectionEnd","substring","char","focus","length"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\views\\ChatAssistant.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 聊天头部 -->\r\n    <div class=\"chat-header sweet-card\">\r\n      <div class=\"assistant-info\">\r\n        <div class=\"assistant-avatar\" :class=\"currentEmotion\" ref=\"assistantAvatar\">\r\n          <div class=\"mochi-body\">\r\n            <div class=\"mochi-face\">\r\n              <div class=\"eyes\">\r\n                <div class=\"eye\"></div>\r\n                <div class=\"eye\"></div>\r\n              </div>\r\n              <div class=\"mouth\" :class=\"currentEmotion\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"assistant-status\">\r\n          <h2>糖球助手</h2>\r\n          <p class=\"status\" v-if=\"isTyping\">正在输入中...</p>\r\n          <p class=\"status\" v-else>在线</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 聊天内容区 -->\r\n    <div class=\"chat-messages\" ref=\"messageContainer\">\r\n      <div v-for=\"(message, index) in messagesArray\" \r\n           :key=\"index\" \r\n           class=\"message-wrapper\"\r\n           :class=\"message.type\">\r\n        <div class=\"message sweet-card\">\r\n          <!-- 用户消息 -->\r\n          <template v-if=\"message.type === 'user'\">\r\n            <div class=\"message-content\">{{ message.text }}</div>\r\n            <div class=\"message-time\">{{ formatTime(message.timestamp || new Date()) }}</div>\r\n          </template>\r\n          \r\n          <!-- 助手消息 -->\r\n          <template v-else>\r\n            <div class=\"message-content\">\r\n              <div class=\"text\">{{ message.text }}</div>\r\n              \r\n              <!-- 天气信息卡片 -->\r\n              <div v-if=\"message.weather\" class=\"weather-card\">\r\n                <div class=\"weather-icon\" :class=\"message.weather.condition\"></div>\r\n                <div class=\"weather-info\">\r\n                  <div class=\"temperature\">{{ message.weather.temperature }}°C</div>\r\n                  <div class=\"description\">{{ message.weather.description }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- 动作按钮 -->\r\n            <div v-if=\"message.actions\" class=\"message-actions\">\r\n              <button v-for=\"(action, actionIndex) in message.actions\"\r\n                      :key=\"actionIndex\"\r\n                      class=\"action-btn\"\r\n                      @click=\"handleAction(action)\">\r\n                {{ getActionLabel(action) }}\r\n              </button>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 输入区域 -->\r\n    <div class=\"chat-input sweet-card\">\r\n      <textarea v-model=\"inputText\"\r\n                @keyup.enter.exact=\"sendMessage\"\r\n                placeholder=\"和糖球说说话吧...\"\r\n                :disabled=\"isTyping\"\r\n                ref=\"inputArea\"></textarea>\r\n      <div class=\"input-actions\">\r\n        <div class=\"emoji-picker-wrapper\">\r\n          <button class=\"emoji-btn\" @click=\"emojiPickerVisible = !emojiPickerVisible\">\r\n            <span class=\"emoji-icon\">😊</span>\r\n          </button>\r\n          <!-- 表情选择器组件占位符 -->\r\n        </div>\r\n        <button class=\"send-btn\"\r\n                :disabled=\"!inputText.trim() || isTyping\"\r\n                @click=\"sendMessage\">\r\n          发送\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, ref, onMounted, nextTick, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\n\r\nexport default {\r\n  name: 'ChatAssistant',\r\n  components: {\r\n    // 暂时移除表情选择器组件\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const inputText = ref('');\r\n    const emojiPickerVisible = ref(false);\r\n    const messageContainer = ref(null);\r\n    const assistantAvatar = ref(null);\r\n    const inputArea = ref(null);\r\n    \r\n    // Vuex 状态\r\n    const messages = computed(() => store.getters['chat/getAllMessages'] || []);\r\n    const messagesArray = computed(() => {\r\n      return Array.isArray(messages.value) ? messages.value : [];\r\n    });\r\n    const isTyping = computed(() => store.getters['chat/getIsTyping'] || false);\r\n    const currentEmotion = computed(() => store.getters['chat/getCurrentEmotion'] || 'neutral');\r\n\r\n    // 发送欢迎消息\r\n    onMounted(() => {\r\n      console.log('[ChatView] 组件挂载');\r\n      store.dispatch('chat/clearChat');\r\n      \r\n      // 添加欢迎消息\r\n      store.commit('chat/ADD_MESSAGE', {\r\n        text: '你好呀！我是糖球助手，有什么可以帮到你的吗？可以问我天气哦~ 😊',\r\n        type: 'assistant',\r\n        timestamp: new Date()\r\n      });\r\n      \r\n      nextTick(() => {\r\n        scrollToBottom();\r\n      });\r\n    });\r\n    \r\n    // 发送消息方法\r\n    const sendMessage = () => {\r\n      const text = inputText.value.trim();\r\n      console.log('[ChatView] 准备发送消息:', text);\r\n      \r\n      if (!text || isTyping.value) return;\r\n      \r\n      try {\r\n        // 发送消息\r\n        store.dispatch('chat/sendMessage', text);\r\n        \r\n        // 清空输入框\r\n        inputText.value = '';\r\n        \r\n        // 滚动到底部\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('[ChatView] 发送消息失败:', error);\r\n      }\r\n    };\r\n    \r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n    \r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      nextTick(() => {\r\n        if (messageContainer.value) {\r\n          messageContainer.value.scrollTop = messageContainer.value.scrollHeight;\r\n        }\r\n      });\r\n    };\r\n    \r\n    // 处理动作按钮点击\r\n    const handleAction = (action) => {\r\n      console.log('[ChatView] 处理动作:', action);\r\n      // 这里可以扩展各种交互动作\r\n    };\r\n    \r\n    // 获取动作按钮标签\r\n    const getActionLabel = (action) => {\r\n      const labels = {\r\n        'sound-purr': '听呼噜声',\r\n        'sound-rain': '听雨声',\r\n        'sound-music': '听音乐',\r\n        'animation-bounce': '一起跳舞',\r\n        'animation-think': '思考中'\r\n      };\r\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\r\n    };\r\n    \r\n    // 插入表情符号\r\n    const insertEmoji = (emoji) => {\r\n      if (!emoji) return;\r\n      \r\n      const textarea = inputArea.value;\r\n      if (textarea) {\r\n        const start = textarea.selectionStart;\r\n        const end = textarea.selectionEnd;\r\n        inputText.value = inputText.value.substring(0, start) + emoji.char + inputText.value.substring(end);\r\n        nextTick(() => {\r\n          textarea.focus();\r\n          textarea.selectionStart = textarea.selectionEnd = start + emoji.char.length;\r\n        });\r\n      }\r\n      emojiPickerVisible.value = false;\r\n    };\r\n    \r\n    // 监听消息变化，这里使用可选链以避免messagesArray为undefined的情况\r\n    watch(() => messagesArray.value?.length, () => {\r\n      scrollToBottom();\r\n    });\r\n\r\n    return {\r\n      inputText,\r\n      emojiPickerVisible,\r\n      messageContainer,\r\n      assistantAvatar,\r\n      inputArea,\r\n      messages,\r\n      messagesArray,\r\n      isTyping,\r\n      currentEmotion,\r\n      sendMessage,\r\n      formatTime,\r\n      scrollToBottom,\r\n      handleAction,\r\n      getActionLabel,\r\n      insertEmoji\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: calc(100vh - 100px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n}\r\n\r\n.chat-header {\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.assistant-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.assistant-avatar {\r\n  width: 60px;\r\n  height: 60px;\r\n  position: relative;\r\n}\r\n\r\n.mochi-body {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  animation: bounce 2s ease-in-out infinite;\r\n}\r\n\r\n.mochi-face {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 70%;\r\n  height: 70%;\r\n}\r\n\r\n.eyes {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-top: 30%;\r\n}\r\n\r\n.eye {\r\n  width: 8px;\r\n  height: 8px;\r\n  background: #333;\r\n  border-radius: 50%;\r\n}\r\n\r\n.mouth {\r\n  width: 16px;\r\n  height: 8px;\r\n  border-bottom: 2px solid #333;\r\n  border-radius: 50%;\r\n  margin: 8px auto 0;\r\n}\r\n\r\n.mouth.happy {\r\n  border-bottom-color: transparent;\r\n  border-top: 2px solid #333;\r\n  transform: translateY(2px);\r\n}\r\n\r\n.mouth.sad {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.assistant-status h2 {\r\n  margin: 0;\r\n  color: var(--text-primary, #333);\r\n}\r\n\r\n.status {\r\n  margin: 5px 0 0;\r\n  color: var(--text-secondary, #666);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.message-wrapper {\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message-wrapper.user {\r\n  justify-content: flex-end;\r\n}\r\n\r\n.message {\r\n  max-width: 70%;\r\n  padding: 12px;\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8rem;\r\n  color: var(--text-secondary, #666);\r\n  text-align: right;\r\n}\r\n\r\n.weather-card {\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  background: rgba(255, 255, 255, 0.5);\r\n  border-radius: var(--border-radius, 8px);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.weather-icon {\r\n  font-size: 2rem;\r\n}\r\n\r\n.weather-icon.sunny::after {\r\n  content: '☀️';\r\n}\r\n\r\n.weather-icon.cloudy::after {\r\n  content: '☁️';\r\n}\r\n\r\n.weather-icon.rainy::after {\r\n  content: '🌧️';\r\n}\r\n\r\n.message-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.action-btn {\r\n  padding: 5px 10px;\r\n  background: var(--primary-purple, #7b68ee);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  background: var(--primary-pink, #ff69b4);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.chat-input {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea {\r\n  width: 100%;\r\n  height: 80px;\r\n  padding: 10px;\r\n  border: 2px solid var(--primary-purple, #7b68ee);\r\n  border-radius: var(--border-radius, 8px);\r\n  resize: none;\r\n  font-family: inherit;\r\n  margin-bottom: 10px;\r\n}\r\n\r\ntextarea:focus {\r\n  outline: none;\r\n  border-color: var(--primary-pink, #ff69b4);\r\n}\r\n\r\n.input-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.emoji-btn, .send-btn {\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.emoji-btn {\r\n  background: none;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.send-btn {\r\n  background: var(--primary-purple, #7b68ee);\r\n  color: white;\r\n}\r\n\r\n.send-btn:hover {\r\n  background: var(--primary-pink, #ff69b4);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.send-btn:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n  transform: none;\r\n}\r\n\r\n/* 动画 */\r\n@keyframes bounce {\r\n  0%, 100% { transform: translateY(0); }\r\n  50% { transform: translateY(-10px); }\r\n}\r\n\r\n@keyframes think {\r\n  0%, 100% { transform: scale(1); }\r\n  50% { transform: scale(1.1); }\r\n}\r\n\r\n.assistant-avatar.thinking .mochi-body {\r\n  animation: think 2s ease-in-out infinite;\r\n}\r\n\r\n.assistant-avatar.happy .mouth {\r\n  border-bottom-color: transparent;\r\n  border-top: 2px solid #333;\r\n  transform: translateY(2px);\r\n}\r\n\r\n.assistant-avatar.sad .mouth {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.assistant-avatar.sleepy .eyes {\r\n  height: 2px;\r\n  background: #333;\r\n  border-radius: 2px;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: calc(100vh - 80px);\r\n    padding: 10px;\r\n  }\r\n  \r\n  .message {\r\n    max-width: 85%;\r\n  }\r\n  \r\n  .chat-input {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  textarea {\r\n    height: 60px;\r\n  }\r\n}\r\n\r\n.sweet-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}