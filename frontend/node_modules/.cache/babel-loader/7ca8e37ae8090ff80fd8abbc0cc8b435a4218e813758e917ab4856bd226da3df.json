{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport router from '@/router';\nimport { getToken } from '@/utils/auth';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:5000/api',\n  timeout: parseInt(process.env.VUE_APP_API_TIMEOUT) || 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 从 localStorage 获取 token\n  const token = getToken();\n  console.log('Token from localStorage:', token);\n  if (token) {\n    // 确保 Authorization header 格式正确\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Authorization header set:', config.headers.Authorization);\n  } else {\n    console.warn('No token found in localStorage');\n  }\n\n  // 打印完整请求配置（排除敏感信息）\n  const sanitizedConfig = {\n    url: config.url,\n    method: config.method,\n    baseURL: config.baseURL,\n    headers: {\n      ...config.headers,\n      Authorization: config.headers.Authorization ? '(token exists)' : '(no token)'\n    }\n  };\n  console.log('Request config:', sanitizedConfig);\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果响应成功但业务状态码不是 200，说明有错误\n  if (res.code && res.code !== 200) {\n    ElMessage({\n      message: res.message || '错误',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 处理特定错误码\n    if (res.code === 401) {\n      // token 过期或无效，清除用户状态并跳转到登录页\n      store.dispatch('auth/resetToken');\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.message || '错误'));\n  }\n  return response;\n}, error => {\n  console.error('响应错误:', error);\n  const message = error.response?.data?.message || error.message || '请求失败';\n  ElMessage({\n    message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n\n  // 处理 401 错误\n  if (error.response?.status === 401) {\n    store.dispatch('auth/resetToken');\n    router.push('/login');\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","router","getToken","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","parseInt","VUE_APP_API_TIMEOUT","headers","interceptors","request","use","config","token","console","log","Authorization","warn","sanitizedConfig","url","method","error","Promise","reject","response","res","data","code","message","type","duration","dispatch","push","Error","status"],"sources":["E:/code/PersonalBolg1/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport store from '@/store'\nimport router from '@/router'\nimport { getToken } from '@/utils/auth'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:5000/api',\n  timeout: parseInt(process.env.VUE_APP_API_TIMEOUT) || 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 从 localStorage 获取 token\n    const token = getToken()\n    console.log('Token from localStorage:', token)\n\n    if (token) {\n      // 确保 Authorization header 格式正确\n      config.headers.Authorization = `Bearer ${token}`\n      console.log('Authorization header set:', config.headers.Authorization)\n    } else {\n      console.warn('No token found in localStorage')\n    }\n\n    // 打印完整请求配置（排除敏感信息）\n    const sanitizedConfig = {\n      url: config.url,\n      method: config.method,\n      baseURL: config.baseURL,\n      headers: {\n        ...config.headers,\n        Authorization: config.headers.Authorization ? '(token exists)' : '(no token)'\n      }\n    }\n    console.log('Request config:', sanitizedConfig)\n\n    return config\n  },\n  error => {\n    console.error('Request interceptor error:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    // 如果响应成功但业务状态码不是 200，说明有错误\n    if (res.code && res.code !== 200) {\n      ElMessage({\n        message: res.message || '错误',\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      // 处理特定错误码\n      if (res.code === 401) {\n        // token 过期或无效，清除用户状态并跳转到登录页\n        store.dispatch('auth/resetToken')\n        router.push('/login')\n      }\n      return Promise.reject(new Error(res.message || '错误'))\n    }\n\n    return response\n  },\n  error => {\n    console.error('响应错误:', error)\n    const message = error.response?.data?.message || error.message || '请求失败'\n\n    ElMessage({\n      message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n\n    // 处理 401 错误\n    if (error.response?.status === 401) {\n      store.dispatch('auth/resetToken')\n      router.push('/login')\n    }\n\n    return Promise.reject(error)\n  }\n)\n\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}