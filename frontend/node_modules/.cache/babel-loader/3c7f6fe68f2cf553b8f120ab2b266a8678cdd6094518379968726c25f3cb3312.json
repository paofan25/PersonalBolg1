{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport weatherService from './weather';\nimport xfyunService from './xfyun';\nclass ChatService {\n  constructor() {\n    this.messages = [];\n  }\n\n  // 分析用户输入的情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('开始分析情绪:', text);\n\n      // 使用讯飞API进行情绪分析\n      const prompt = `请分析以下文本的情绪，只返回一个词：\"happy\"、\"sad\"、\"worried\"、\"excited\"或\"neutral\"，不要返回其他内容。\\n文本：${text}`;\n      const response = await xfyunService.chat([{\n        role: 'user',\n        content: prompt\n      }]);\n      console.log('情绪分析结果:', response);\n      const emotion = response.trim().toLowerCase();\n\n      // 确保返回的是有效的情绪类型\n      const validEmotions = ['happy', 'sad', 'worried', 'excited', 'neutral'];\n      return validEmotions.includes(emotion) ? emotion : 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n\n  // 生成回复\n  async generateResponse(text, emotion) {\n    try {\n      console.log('开始生成回复:', {\n        text,\n        emotion\n      });\n\n      // 检查是否是天气相关询问\n      if (this.isWeatherQuery(text)) {\n        const weather = await weatherService.getNowWeather('auto_ip');\n        if (weather) {\n          return {\n            text: weatherService.generateWeatherDescription(weather),\n            weather,\n            actions: []\n          };\n        }\n      }\n\n      // 使用讯飞API生成回复\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下要求回复：\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(◕‿◕✿)\n3. 回复长度控制在100字以内\n4. 当前用户情绪：${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说：${text}`;\n      console.log('发送到讯飞的提示词:', prompt);\n      const response = await xfyunService.chat([{\n        role: 'user',\n        content: prompt\n      }]);\n      console.log('讯飞返回的回复:', response);\n\n      // 根据情绪添加互动动作\n      const actions = this.generateActions(emotion);\n      return {\n        text: response,\n        actions\n      };\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      return {\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)',\n        actions: []\n      };\n    }\n  }\n\n  // 检查是否是天气相关询问\n  isWeatherQuery(text) {\n    const weatherKeywords = ['天气', '下雨', '温度', '冷', '热', '气温', '预报'];\n    if (weatherKeywords.some(keyword => text.includes(keyword))) {\n      // 直接调用天气服务获取天气信息\n      return weatherService.getNowWeather();\n    }\n    return null;\n  }\n\n  // 根据情绪生成互动动作\n  generateActions(emotion) {\n    const actions = [];\n    switch (emotion) {\n      case 'happy':\n        actions.push({\n          type: 'animation',\n          name: 'bounce'\n        }, {\n          type: 'sound',\n          sound: 'purr'\n        });\n        break;\n      case 'sad':\n        actions.push({\n          type: 'sound',\n          sound: 'rain'\n        }, {\n          type: 'animation',\n          name: 'float'\n        });\n        break;\n      case 'worried':\n        actions.push({\n          type: 'animation',\n          name: 'wave'\n        }, {\n          type: 'sound',\n          sound: 'music'\n        });\n        break;\n      case 'excited':\n        actions.push({\n          type: 'animation',\n          name: 'spin'\n        }, {\n          type: 'sound',\n          sound: 'purr'\n        });\n        break;\n      case 'neutral':\n        actions.push({\n          type: 'animation',\n          name: 'float'\n        });\n        break;\n    }\n    return actions;\n  }\n}\nexport default new ChatService();","map":{"version":3,"names":["weatherService","xfyunService","ChatService","constructor","messages","analyzeEmotion","text","console","log","prompt","response","chat","role","content","emotion","trim","toLowerCase","validEmotions","includes","error","generateResponse","isWeatherQuery","weather","getNowWeather","generateWeatherDescription","actions","generateActions","weatherKeywords","some","keyword","push","type","name","sound"],"sources":["E:/code/PersonalBolg1/frontend/src/services/chat.js"],"sourcesContent":["import weatherService from './weather';\nimport xfyunService from './xfyun';\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n  }\n\n  // 分析用户输入的情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('开始分析情绪:', text);\n      \n      // 使用讯飞API进行情绪分析\n      const prompt = `请分析以下文本的情绪，只返回一个词：\"happy\"、\"sad\"、\"worried\"、\"excited\"或\"neutral\"，不要返回其他内容。\\n文本：${text}`;\n      const response = await xfyunService.chat([{ role: 'user', content: prompt }]);\n      console.log('情绪分析结果:', response);\n      \n      const emotion = response.trim().toLowerCase();\n      \n      // 确保返回的是有效的情绪类型\n      const validEmotions = ['happy', 'sad', 'worried', 'excited', 'neutral'];\n      return validEmotions.includes(emotion) ? emotion : 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n\n  // 生成回复\n  async generateResponse(text, emotion) {\n    try {\n      console.log('开始生成回复:', { text, emotion });\n      \n      // 检查是否是天气相关询问\n      if (this.isWeatherQuery(text)) {\n        const weather = await weatherService.getNowWeather('auto_ip');\n        if (weather) {\n          return {\n            text: weatherService.generateWeatherDescription(weather),\n            weather,\n            actions: []\n          };\n        }\n      }\n\n      // 使用讯飞API生成回复\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下要求回复：\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(◕‿◕✿)\n3. 回复长度控制在100字以内\n4. 当前用户情绪：${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说：${text}`;\n\n      console.log('发送到讯飞的提示词:', prompt);\n      const response = await xfyunService.chat([{ role: 'user', content: prompt }]);\n      console.log('讯飞返回的回复:', response);\n\n      // 根据情绪添加互动动作\n      const actions = this.generateActions(emotion);\n\n      return {\n        text: response,\n        actions\n      };\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      return {\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)',\n        actions: []\n      };\n    }\n  }\n\n  // 检查是否是天气相关询问\n  isWeatherQuery(text) {\n    const weatherKeywords = ['天气', '下雨', '温度', '冷', '热', '气温', '预报'];\n    \n    if (weatherKeywords.some(keyword => text.includes(keyword))) {\n      // 直接调用天气服务获取天气信息\n      return weatherService.getNowWeather();\n    }\n    \n    return null;\n  }\n\n  // 根据情绪生成互动动作\n  generateActions(emotion) {\n    const actions = [];\n\n    switch (emotion) {\n      case 'happy':\n        actions.push(\n          { type: 'animation', name: 'bounce' },\n          { type: 'sound', sound: 'purr' }\n        );\n        break;\n      case 'sad':\n        actions.push(\n          { type: 'sound', sound: 'rain' },\n          { type: 'animation', name: 'float' }\n        );\n        break;\n      case 'worried':\n        actions.push(\n          { type: 'animation', name: 'wave' },\n          { type: 'sound', sound: 'music' }\n        );\n        break;\n      case 'excited':\n        actions.push(\n          { type: 'animation', name: 'spin' },\n          { type: 'sound', sound: 'purr' }\n        );\n        break;\n      case 'neutral':\n        actions.push(\n          { type: 'animation', name: 'float' }\n        );\n        break;\n    }\n\n    return actions;\n  }\n}\n\nexport default new ChatService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}