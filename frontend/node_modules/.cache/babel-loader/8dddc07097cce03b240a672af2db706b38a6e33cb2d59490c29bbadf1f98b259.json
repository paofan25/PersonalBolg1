{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { blogAPI } from '@/api';\n\n// 初始状态\nconst state = {\n  posts: [],\n  currentPost: null,\n  loading: false,\n  error: null\n};\n\n// getters\nconst getters = {\n  allPosts: state => state.posts,\n  currentPost: state => state.currentPost,\n  isLoading: state => state.loading\n};\n\n// mutations\nconst mutations = {\n  SET_POSTS(state, posts) {\n    state.posts = posts;\n  },\n  SET_CURRENT_POST(state, post) {\n    state.currentPost = post;\n  },\n  ADD_POST(state, post) {\n    state.posts.unshift(post);\n  },\n  UPDATE_POST(state, updatedPost) {\n    const index = state.posts.findIndex(post => post.id === updatedPost.id);\n    if (index !== -1) {\n      state.posts.splice(index, 1, updatedPost);\n    }\n    if (state.currentPost && state.currentPost.id === updatedPost.id) {\n      state.currentPost = updatedPost;\n    }\n  },\n  REMOVE_POST(state, id) {\n    state.posts = state.posts.filter(post => post.id !== id);\n    if (state.currentPost && state.currentPost.id === id) {\n      state.currentPost = null;\n    }\n  },\n  ADD_COMMENT(state, {\n    postId,\n    comment\n  }) {\n    if (state.currentPost && state.currentPost.id === postId) {\n      if (!state.currentPost.comments) {\n        state.currentPost.comments = [];\n      }\n      state.currentPost.comments.push(comment);\n    }\n  },\n  REMOVE_COMMENT(state, {\n    postId,\n    commentId\n  }) {\n    if (state.currentPost && state.currentPost.id === postId) {\n      state.currentPost.comments = state.currentPost.comments.filter(comment => comment.id !== commentId);\n    }\n  },\n  SET_LOADING(state, status) {\n    state.loading = status;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\n\n// actions\nconst actions = {\n  async fetchPosts({\n    commit\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await blogAPI.getPosts();\n      commit('SET_POSTS', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async fetchPost({\n    commit\n  }, id) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await blogAPI.getPost(id);\n      commit('SET_CURRENT_POST', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async createPost({\n    commit\n  }, postData) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await blogAPI.createPost(postData);\n      commit('ADD_POST', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async updatePost({\n    commit\n  }, {\n    id,\n    postData\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await blogAPI.updatePost(id, postData);\n      commit('UPDATE_POST', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async deletePost({\n    commit\n  }, id) {\n    commit('SET_LOADING', true);\n    try {\n      await blogAPI.deletePost(id);\n      commit('REMOVE_POST', id);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async addComment({\n    commit\n  }, {\n    postId,\n    commentData\n  }) {\n    try {\n      const response = await blogAPI.addComment(postId, commentData);\n      commit('ADD_COMMENT', {\n        postId,\n        comment: response.data\n      });\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    }\n  },\n  async deleteComment({\n    commit\n  }, {\n    postId,\n    commentId\n  }) {\n    try {\n      await blogAPI.deleteComment(postId, commentId);\n      commit('REMOVE_COMMENT', {\n        postId,\n        commentId\n      });\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["blogAPI","state","posts","currentPost","loading","error","getters","allPosts","isLoading","mutations","SET_POSTS","SET_CURRENT_POST","post","ADD_POST","unshift","UPDATE_POST","updatedPost","index","findIndex","id","splice","REMOVE_POST","filter","ADD_COMMENT","postId","comment","comments","push","REMOVE_COMMENT","commentId","SET_LOADING","status","SET_ERROR","actions","fetchPosts","commit","response","getPosts","data","message","fetchPost","getPost","createPost","postData","updatePost","deletePost","addComment","commentData","deleteComment","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/posts.js"],"sourcesContent":["import { blogAPI } from '@/api'\n\n// 初始状态\nconst state = {\n  posts: [],\n  currentPost: null,\n  loading: false,\n  error: null\n}\n\n// getters\nconst getters = {\n  allPosts: state => state.posts,\n  currentPost: state => state.currentPost,\n  isLoading: state => state.loading\n}\n\n// mutations\nconst mutations = {\n  SET_POSTS(state, posts) {\n    state.posts = posts\n  },\n  SET_CURRENT_POST(state, post) {\n    state.currentPost = post\n  },\n  ADD_POST(state, post) {\n    state.posts.unshift(post)\n  },\n  UPDATE_POST(state, updatedPost) {\n    const index = state.posts.findIndex(post => post.id === updatedPost.id)\n    if (index !== -1) {\n      state.posts.splice(index, 1, updatedPost)\n    }\n    if (state.currentPost && state.currentPost.id === updatedPost.id) {\n      state.currentPost = updatedPost\n    }\n  },\n  REMOVE_POST(state, id) {\n    state.posts = state.posts.filter(post => post.id !== id)\n    if (state.currentPost && state.currentPost.id === id) {\n      state.currentPost = null\n    }\n  },\n  ADD_COMMENT(state, { postId, comment }) {\n    if (state.currentPost && state.currentPost.id === postId) {\n      if (!state.currentPost.comments) {\n        state.currentPost.comments = []\n      }\n      state.currentPost.comments.push(comment)\n    }\n  },\n  REMOVE_COMMENT(state, { postId, commentId }) {\n    if (state.currentPost && state.currentPost.id === postId) {\n      state.currentPost.comments = state.currentPost.comments.filter(\n        comment => comment.id !== commentId\n      )\n    }\n  },\n  SET_LOADING(state, status) {\n    state.loading = status\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\n// actions\nconst actions = {\n  async fetchPosts({ commit }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await blogAPI.getPosts()\n      commit('SET_POSTS', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n  \n  async fetchPost({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await blogAPI.getPost(id)\n      commit('SET_CURRENT_POST', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n  \n  async createPost({ commit }, postData) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await blogAPI.createPost(postData)\n      commit('ADD_POST', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n  \n  async updatePost({ commit }, { id, postData }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await blogAPI.updatePost(id, postData)\n      commit('UPDATE_POST', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n  \n  async deletePost({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      await blogAPI.deletePost(id)\n      commit('REMOVE_POST', id)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n  \n  async addComment({ commit }, { postId, commentData }) {\n    try {\n      const response = await blogAPI.addComment(postId, commentData)\n      commit('ADD_COMMENT', { postId, comment: response.data })\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    }\n  },\n  \n  async deleteComment({ commit }, { postId, commentId }) {\n    try {\n      await blogAPI.deleteComment(postId, commentId)\n      commit('REMOVE_COMMENT', { postId, commentId })\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    }\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}