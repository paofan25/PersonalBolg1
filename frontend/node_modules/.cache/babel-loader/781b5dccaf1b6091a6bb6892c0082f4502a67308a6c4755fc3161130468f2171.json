{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个axios实例\nconst API = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加token到请求头\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\nAPI.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // 身份验证错误\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      // 可以在这里添加重定向到登录页面的逻辑\n    }\n  }\n  return Promise.reject(error);\n});\n\n// 认证相关API\nexport const authAPI = {\n  login: credentials => API.post('/auth/login', credentials),\n  register: userData => API.post('/auth/register', userData),\n  getProfile: () => API.get('/auth/profile'),\n  updateProfile: userData => API.put('/auth/profile', userData)\n};\n\n// 博客文章相关API\nexport const blogAPI = {\n  getPosts: () => API.get('/posts'),\n  getPost: id => API.get(`/posts/${id}`),\n  createPost: postData => API.post('/posts', postData),\n  updatePost: (id, postData) => API.put(`/posts/${id}`, postData),\n  deletePost: id => API.delete(`/posts/${id}`),\n  // 评论相关API\n  addComment: (postId, commentData) => API.post(`/posts/${postId}/comments`, commentData),\n  deleteComment: (postId, commentId) => API.delete(`/posts/${postId}/comments/${commentId}`)\n};\n\n// 类别相关API\nexport const categoryAPI = {\n  getCategories: () => API.get('/categories'),\n  getCategory: id => API.get(`/categories/${id}`),\n  createCategory: categoryData => API.post('/categories', categoryData),\n  updateCategory: (id, categoryData) => API.put(`/categories/${id}`, categoryData),\n  deleteCategory: id => API.delete(`/categories/${id}`)\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","process","env","VUE_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","authAPI","login","credentials","post","register","userData","getProfile","get","updateProfile","put","blogAPI","getPosts","getPost","id","createPost","postData","updatePost","deletePost","delete","addComment","postId","commentData","deleteComment","commentId","categoryAPI","getCategories","getCategory","createCategory","categoryData","updateCategory","deleteCategory"],"sources":["E:/code/PersonalBolg1/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\n\n// 创建一个axios实例\nconst API = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器 - 添加token到请求头\nAPI.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器 - 处理错误\nAPI.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response) {\n      // 身份验证错误\n      if (error.response.status === 401) {\n        localStorage.removeItem('token')\n        localStorage.removeItem('user')\n        // 可以在这里添加重定向到登录页面的逻辑\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n\n// 认证相关API\nexport const authAPI = {\n  login: (credentials) => API.post('/auth/login', credentials),\n  register: (userData) => API.post('/auth/register', userData),\n  getProfile: () => API.get('/auth/profile'),\n  updateProfile: (userData) => API.put('/auth/profile', userData)\n}\n\n// 博客文章相关API\nexport const blogAPI = {\n  getPosts: () => API.get('/posts'),\n  getPost: (id) => API.get(`/posts/${id}`),\n  createPost: (postData) => API.post('/posts', postData),\n  updatePost: (id, postData) => API.put(`/posts/${id}`, postData),\n  deletePost: (id) => API.delete(`/posts/${id}`),\n  \n  // 评论相关API\n  addComment: (postId, commentData) => API.post(`/posts/${postId}/comments`, commentData),\n  deleteComment: (postId, commentId) => API.delete(`/posts/${postId}/comments/${commentId}`)\n}\n\n// 类别相关API\nexport const categoryAPI = {\n  getCategories: () => API.get('/categories'),\n  getCategory: (id) => API.get(`/categories/${id}`),\n  createCategory: (categoryData) => API.post('/categories', categoryData),\n  updateCategory: (id, categoryData) => API.put(`/categories/${id}`, categoryData),\n  deleteCategory: (id) => API.delete(`/categories/${id}`)\n}\n\nexport default API"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}