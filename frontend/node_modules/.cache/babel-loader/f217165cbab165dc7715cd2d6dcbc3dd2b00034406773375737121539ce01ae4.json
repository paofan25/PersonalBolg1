{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n * 星火认知大模型服务\n * 用于集成讯飞星火大模型API\n */\nimport CryptoJS from 'crypto-js';\nclass SparkService {\n  constructor() {\n    // 默认配置\n    const defaultConfig = {\n      appId: 'bb840282',\n      apiKey: 'YjMzMmE3NzZxxxxxxxx',\n      apiSecret: 'YjMzMmE3NzZxxxxxxxx'\n    };\n\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appId: process.env.VUE_APP_SPARK_APPID || defaultConfig.appId,\n        apiKey: process.env.VUE_APP_SPARK_API_KEY || defaultConfig.apiKey,\n        apiSecret: process.env.VUE_APP_SPARK_API_SECRET || defaultConfig.apiSecret,\n        apiUrl: process.env.VUE_APP_SPARK_API_URL || 'wss://spark-api.xf-yun.com/v1.1/chat'\n      };\n      if (!this.config.appId || !this.config.apiKey || !this.config.apiSecret) {\n        console.log('星火大模型服务配置缺失，使用默认值');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      this.config = {\n        ...defaultConfig,\n        apiUrl: 'wss://spark-api.xf-yun.com/v1.1/chat'\n      };\n    }\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 带鉴权参数的WebSocket URL\n   */\n  generateAuthUrl() {\n    const apiUrl = this.config.apiUrl;\n    const {\n      host,\n      path\n    } = this._parseUrl(apiUrl);\n    const date = new Date().toGMTString();\n    const algorithm = 'hmac-sha256';\n    const headers = 'host date request-line';\n    const signatureOrigin = `host: ${host}\\\\ndate: ${date}\\\\nGET ${path} HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.config.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.config.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  /**\n   * 解析URL获取host和path\n   * @param {string} url API URL\n   * @returns {Object} 包含host和path的对象\n   */\n  _parseUrl(url) {\n    const urlObj = new URL(url);\n    return {\n      host: urlObj.host,\n      path: urlObj.pathname\n    };\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message 用户消息\n   * @param {Array} history 历史消息记录\n   * @param {Object} options 可选参数\n   * @returns {Promise<Object>} 响应结果\n   */\n  async sendMessage(message, history = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      try {\n        const authUrl = this.generateAuthUrl();\n        const ws = new WebSocket(authUrl);\n        let response = '';\n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n\n          // 构建消息历史\n          const messages = [...history];\n          // 添加当前用户消息\n          messages.push({\n            role: 'user',\n            content: message\n          });\n\n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.config.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: options.domain || 'lite',\n                temperature: options.temperature || 0.5,\n                max_tokens: options.maxTokens || 1024\n              }\n            },\n            payload: {\n              message: {\n                text: messages\n              }\n            }\n          };\n\n          // 发送请求\n          ws.send(JSON.stringify(requestData));\n        };\n        ws.onmessage = event => {\n          const data = JSON.parse(event.data);\n\n          // 检查是否有错误\n          if (data.header.code !== 0) {\n            ws.close();\n            reject(new Error(`错误码: ${data.header.code}, 错误信息: ${data.header.message}`));\n            return;\n          }\n\n          // 获取回复内容\n          if (data.payload && data.payload.choices && data.payload.choices.text) {\n            const content = data.payload.choices.text[0].content;\n            response += content;\n          }\n\n          // 检查是否结束\n          if (data.header.status === 2) {\n            ws.close();\n            resolve({\n              content: response,\n              status: 'success'\n            });\n          }\n        };\n        ws.onerror = error => {\n          console.error('WebSocket连接错误:', error);\n          reject(error);\n        };\n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n        };\n      } catch (error) {\n        console.error('发送消息错误:', error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 根据情绪生成特定风格的回复\n   * @param {string} text 用户输入\n   * @param {string} emotion 情绪类型\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(text, emotion = 'neutral') {\n    try {\n      // 构建 prompt\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下\n要求回复:\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(●ˇ∀ˇ●)\n3. 回复长度控制在100字以内\n4. 当前用户情绪: ${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说: ${text}`;\n\n      // 发送到星火API\n      const response = await this.sendMessage(prompt, [], {\n        temperature: 0.8\n      });\n      return response.content;\n    } catch (error) {\n      console.error('生成回复出错:', error);\n      // 降级处理，返回默认回复\n      return `抱歉，糖球现在有点迷糊，请稍后再试吧~ (●ˇ∀ˇ●)`;\n    }\n  }\n}\nexport default SparkService;","map":{"version":3,"names":["CryptoJS","SparkService","constructor","defaultConfig","appId","apiKey","apiSecret","config","process","env","VUE_APP_SPARK_APPID","VUE_APP_SPARK_API_KEY","VUE_APP_SPARK_API_SECRET","apiUrl","VUE_APP_SPARK_API_URL","console","log","error","generateAuthUrl","host","path","_parseUrl","date","Date","toGMTString","algorithm","headers","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","url","urlObj","URL","pathname","sendMessage","message","history","options","Promise","resolve","reject","authUrl","ws","WebSocket","response","onopen","messages","push","role","content","requestData","header","app_id","uid","now","parameter","chat","domain","temperature","max_tokens","maxTokens","payload","text","send","JSON","onmessage","event","data","parse","code","close","Error","choices","status","onerror","onclose","generateResponse","emotion","prompt"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["/**\n * 星火认知大模型服务\n * 用于集成讯飞星火大模型API\n */\nimport CryptoJS from 'crypto-js';\n\nclass SparkService {\n  constructor() {\n    // 默认配置\n    const defaultConfig = {\n      appId: 'bb840282',\n      apiKey: 'YjMzMmE3NzZxxxxxxxx',\n      apiSecret: 'YjMzMmE3NzZxxxxxxxx'\n    };\n\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appId: process.env.VUE_APP_SPARK_APPID || defaultConfig.appId,\n        apiKey: process.env.VUE_APP_SPARK_API_KEY || defaultConfig.apiKey,\n        apiSecret: process.env.VUE_APP_SPARK_API_SECRET || defaultConfig.apiSecret,\n        apiUrl: process.env.VUE_APP_SPARK_API_URL || 'wss://spark-api.xf-yun.com/v1.1/chat'\n      };\n\n      if (!this.config.appId || !this.config.apiKey || !this.config.apiSecret) {\n        console.log('星火大模型服务配置缺失，使用默认值');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      this.config = { ...defaultConfig, apiUrl: 'wss://spark-api.xf-yun.com/v1.1/chat' };\n    }\n  }\n\n  /**\n   * 生成鉴权URL\n   * @returns {string} 带鉴权参数的WebSocket URL\n   */\n  generateAuthUrl() {\n    const apiUrl = this.config.apiUrl;\n    const { host, path } = this._parseUrl(apiUrl);\n    const date = new Date().toGMTString();\n    const algorithm = 'hmac-sha256';\n    const headers = 'host date request-line';\n    const signatureOrigin = `host: ${host}\\\\ndate: ${date}\\\\nGET ${path} HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.config.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.config.apiKey}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n\n    return `${apiUrl}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  /**\n   * 解析URL获取host和path\n   * @param {string} url API URL\n   * @returns {Object} 包含host和path的对象\n   */\n  _parseUrl(url) {\n    const urlObj = new URL(url);\n    return {\n      host: urlObj.host,\n      path: urlObj.pathname\n    };\n  }\n\n  /**\n   * 发送消息到星火大模型\n   * @param {string} message 用户消息\n   * @param {Array} history 历史消息记录\n   * @param {Object} options 可选参数\n   * @returns {Promise<Object>} 响应结果\n   */\n  async sendMessage(message, history = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      try {\n        const authUrl = this.generateAuthUrl();\n        const ws = new WebSocket(authUrl);\n        let response = '';\n        \n        ws.onopen = () => {\n          console.log('WebSocket连接已建立');\n          \n          // 构建消息历史\n          const messages = [...history];\n          // 添加当前用户消息\n          messages.push({ role: 'user', content: message });\n          \n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.config.appId,\n              uid: `user_${Date.now()}`\n            },\n            parameter: {\n              chat: {\n                domain: options.domain || 'lite',\n                temperature: options.temperature || 0.5,\n                max_tokens: options.maxTokens || 1024\n              }\n            },\n            payload: {\n              message: {\n                text: messages\n              }\n            }\n          };\n          \n          // 发送请求\n          ws.send(JSON.stringify(requestData));\n        };\n        \n        ws.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          \n          // 检查是否有错误\n          if (data.header.code !== 0) {\n            ws.close();\n            reject(new Error(`错误码: ${data.header.code}, 错误信息: ${data.header.message}`));\n            return;\n          }\n          \n          // 获取回复内容\n          if (data.payload && data.payload.choices && data.payload.choices.text) {\n            const content = data.payload.choices.text[0].content;\n            response += content;\n          }\n          \n          // 检查是否结束\n          if (data.header.status === 2) {\n            ws.close();\n            resolve({ content: response, status: 'success' });\n          }\n        };\n        \n        ws.onerror = (error) => {\n          console.error('WebSocket连接错误:', error);\n          reject(error);\n        };\n        \n        ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n        };\n      } catch (error) {\n        console.error('发送消息错误:', error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 根据情绪生成特定风格的回复\n   * @param {string} text 用户输入\n   * @param {string} emotion 情绪类型\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(text, emotion = 'neutral') {\n    try {\n      // 构建 prompt\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下\n要求回复:\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(●ˇ∀ˇ●)\n3. 回复长度控制在100字以内\n4. 当前用户情绪: ${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说: ${text}`;\n\n      // 发送到星火API\n      const response = await this.sendMessage(prompt, [], { temperature: 0.8 });\n      return response.content;\n    } catch (error) {\n      console.error('生成回复出错:', error);\n      // 降级处理，返回默认回复\n      return `抱歉，糖球现在有点迷糊，请稍后再试吧~ (●ˇ∀ˇ●)`;\n    }\n  }\n}\n\nexport default SparkService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}