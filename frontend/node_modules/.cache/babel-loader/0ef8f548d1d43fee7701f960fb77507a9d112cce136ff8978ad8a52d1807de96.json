{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'happy',\n  weatherInfo: null,\n  soundEnabled: true\n};\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion\n};\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push({\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message\n    });\n  },\n  SET_TYPING(state, status) {\n    state.isTyping = status;\n  },\n  SET_EMOTION(state, emotion) {\n    state.currentEmotion = emotion;\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info;\n  },\n  TOGGLE_SOUND(state) {\n    state.soundEnabled = !state.soundEnabled;\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = [];\n  }\n};\nconst actions = {\n  async sendMessage({\n    commit,\n    state\n  }, text) {\n    // 添加用户消息\n    commit('ADD_MESSAGE', {\n      type: 'user',\n      text\n    });\n\n    // 设置输入状态\n    commit('SET_TYPING', true);\n    try {\n      // 分析情绪\n      const emotion = await analyzeEmotion(text);\n      commit('SET_EMOTION', emotion);\n\n      // 检查是否是天气相关询问\n      const weatherInfo = await checkWeatherQuery(text);\n      if (weatherInfo) {\n        commit('SET_WEATHER_INFO', weatherInfo);\n      }\n\n      // 生成回复\n      const response = await generateResponse(text, emotion);\n\n      // 添加助手消息\n      commit('ADD_MESSAGE', {\n        type: 'assistant',\n        text: response.text,\n        weather: weatherInfo,\n        actions: response.actions\n      });\n    } catch (error) {\n      console.error('Error in chat:', error);\n      commit('ADD_MESSAGE', {\n        type: 'assistant',\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)'\n      });\n    } finally {\n      commit('SET_TYPING', false);\n    }\n  },\n  clearChat({\n    commit\n  }) {\n    commit('CLEAR_MESSAGES');\n  }\n};\n\n// 辅助函数\nasync function analyzeEmotion(text) {\n  // 简单的关键词匹配\n  if (text.match(/(开心|快乐|高兴|棒|好玩)/)) return 'happy';\n  if (text.match(/(难过|伤心|痛苦|累|烦)/)) return 'sad';\n  if (text.match(/(困|睡|累|疲惫)/)) return 'sleepy';\n  return 'happy'; // 默认表情\n}\nasync function checkWeatherQuery(text) {\n  if (text.match(/(天气|下雨|温度|冷|热)/)) {\n    // 模拟天气API调用\n    return {\n      temperature: Math.floor(Math.random() * 15) + 15,\n      condition: ['sunny', 'cloudy', 'rainy'][Math.floor(Math.random() * 3)],\n      description: '今天天气不错哦~ ☀️'\n    };\n  }\n  return null;\n}\nasync function generateResponse(text, emotion) {\n  // 根据情绪和输入生成回复\n  const responses = {\n    happy: {\n      text: '太棒了！让我们一起开心地玩耍吧~ (◕‿◕✿)',\n      actions: [{\n        type: 'animation',\n        name: 'bounce'\n      }]\n    },\n    sad: {\n      text: '不要难过啦，要听听舒缓的雨声吗？ (｡•́︿•̀｡)',\n      actions: [{\n        type: 'sound',\n        sound: 'rain'\n      }]\n    },\n    sleepy: {\n      text: '要不要听听轻柔的音乐休息一下呢？ (｡◕‿◕｡)',\n      actions: [{\n        type: 'sound',\n        sound: 'music'\n      }]\n    }\n  };\n  return responses[emotion] || {\n    text: '嗯嗯，我在认真听你说话哦~ (◠‿◠✿)',\n    actions: []\n  };\n}\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["state","messages","isTyping","currentEmotion","weatherInfo","soundEnabled","getters","allMessages","mutations","ADD_MESSAGE","message","push","id","Date","now","timestamp","SET_TYPING","status","SET_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND","CLEAR_MESSAGES","actions","sendMessage","commit","text","type","analyzeEmotion","checkWeatherQuery","response","generateResponse","weather","error","console","clearChat","match","temperature","Math","floor","random","condition","description","responses","happy","name","sad","sound","sleepy","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["const state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'happy',\n  weatherInfo: null,\n  soundEnabled: true\n}\n\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion\n}\n\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push({\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message\n    })\n  },\n  SET_TYPING(state, status) {\n    state.isTyping = status\n  },\n  SET_EMOTION(state, emotion) {\n    state.currentEmotion = emotion\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info\n  },\n  TOGGLE_SOUND(state) {\n    state.soundEnabled = !state.soundEnabled\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = []\n  }\n}\n\nconst actions = {\n  async sendMessage({ commit, state }, text) {\n    // 添加用户消息\n    commit('ADD_MESSAGE', {\n      type: 'user',\n      text\n    })\n\n    // 设置输入状态\n    commit('SET_TYPING', true)\n\n    try {\n      // 分析情绪\n      const emotion = await analyzeEmotion(text)\n      commit('SET_EMOTION', emotion)\n\n      // 检查是否是天气相关询问\n      const weatherInfo = await checkWeatherQuery(text)\n      if (weatherInfo) {\n        commit('SET_WEATHER_INFO', weatherInfo)\n      }\n\n      // 生成回复\n      const response = await generateResponse(text, emotion)\n      \n      // 添加助手消息\n      commit('ADD_MESSAGE', {\n        type: 'assistant',\n        text: response.text,\n        weather: weatherInfo,\n        actions: response.actions\n      })\n    } catch (error) {\n      console.error('Error in chat:', error)\n      commit('ADD_MESSAGE', {\n        type: 'assistant',\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)'\n      })\n    } finally {\n      commit('SET_TYPING', false)\n    }\n  },\n  clearChat({ commit }) {\n    commit('CLEAR_MESSAGES')\n  }\n}\n\n// 辅助函数\nasync function analyzeEmotion(text) {\n  // 简单的关键词匹配\n  if (text.match(/(开心|快乐|高兴|棒|好玩)/)) return 'happy'\n  if (text.match(/(难过|伤心|痛苦|累|烦)/)) return 'sad'\n  if (text.match(/(困|睡|累|疲惫)/)) return 'sleepy'\n  return 'happy' // 默认表情\n}\n\nasync function checkWeatherQuery(text) {\n  if (text.match(/(天气|下雨|温度|冷|热)/)) {\n    // 模拟天气API调用\n    return {\n      temperature: Math.floor(Math.random() * 15) + 15,\n      condition: ['sunny', 'cloudy', 'rainy'][Math.floor(Math.random() * 3)],\n      description: '今天天气不错哦~ ☀️'\n    }\n  }\n  return null\n}\n\nasync function generateResponse(text, emotion) {\n  // 根据情绪和输入生成回复\n  const responses = {\n    happy: {\n      text: '太棒了！让我们一起开心地玩耍吧~ (◕‿◕✿)',\n      actions: [{ type: 'animation', name: 'bounce' }]\n    },\n    sad: {\n      text: '不要难过啦，要听听舒缓的雨声吗？ (｡•́︿•̀｡)',\n      actions: [{ type: 'sound', sound: 'rain' }]\n    },\n    sleepy: {\n      text: '要不要听听轻柔的音乐休息一下呢？ (｡◕‿◕｡)',\n      actions: [{ type: 'sound', sound: 'music' }]\n    }\n  }\n\n  return responses[emotion] || {\n    text: '嗯嗯，我在认真听你说话哦~ (◠‿◠✿)',\n    actions: []\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n}"],"mappings":";AAAA,MAAMA,KAAK,GAAG;EACZC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,KAAK;EACfC,cAAc,EAAE,OAAO;EACvBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,WAAW,EAAEP,KAAK,IAAIA,KAAK,CAACC,QAAQ;EACpCC,QAAQ,EAAEF,KAAK,IAAIA,KAAK,CAACE,QAAQ;EACjCC,cAAc,EAAEH,KAAK,IAAIA,KAAK,CAACG;AACjC,CAAC;AAED,MAAMK,SAAS,GAAG;EAChBC,WAAWA,CAACT,KAAK,EAAEU,OAAO,EAAE;IAC1BV,KAAK,CAACC,QAAQ,CAACU,IAAI,CAAC;MAClBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC;MACrB,GAAGH;IACL,CAAC,CAAC;EACJ,CAAC;EACDM,UAAUA,CAAChB,KAAK,EAAEiB,MAAM,EAAE;IACxBjB,KAAK,CAACE,QAAQ,GAAGe,MAAM;EACzB,CAAC;EACDC,WAAWA,CAAClB,KAAK,EAAEmB,OAAO,EAAE;IAC1BnB,KAAK,CAACG,cAAc,GAAGgB,OAAO;EAChC,CAAC;EACDC,gBAAgBA,CAACpB,KAAK,EAAEqB,IAAI,EAAE;IAC5BrB,KAAK,CAACI,WAAW,GAAGiB,IAAI;EAC1B,CAAC;EACDC,YAAYA,CAACtB,KAAK,EAAE;IAClBA,KAAK,CAACK,YAAY,GAAG,CAACL,KAAK,CAACK,YAAY;EAC1C,CAAC;EACDkB,cAAcA,CAACvB,KAAK,EAAE;IACpBA,KAAK,CAACC,QAAQ,GAAG,EAAE;EACrB;AACF,CAAC;AAED,MAAMuB,OAAO,GAAG;EACd,MAAMC,WAAWA,CAAC;IAAEC,MAAM;IAAE1B;EAAM,CAAC,EAAE2B,IAAI,EAAE;IACzC;IACAD,MAAM,CAAC,aAAa,EAAE;MACpBE,IAAI,EAAE,MAAM;MACZD;IACF,CAAC,CAAC;;IAEF;IACAD,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC;IAE1B,IAAI;MACF;MACA,MAAMP,OAAO,GAAG,MAAMU,cAAc,CAACF,IAAI,CAAC;MAC1CD,MAAM,CAAC,aAAa,EAAEP,OAAO,CAAC;;MAE9B;MACA,MAAMf,WAAW,GAAG,MAAM0B,iBAAiB,CAACH,IAAI,CAAC;MACjD,IAAIvB,WAAW,EAAE;QACfsB,MAAM,CAAC,kBAAkB,EAAEtB,WAAW,CAAC;MACzC;;MAEA;MACA,MAAM2B,QAAQ,GAAG,MAAMC,gBAAgB,CAACL,IAAI,EAAER,OAAO,CAAC;;MAEtD;MACAO,MAAM,CAAC,aAAa,EAAE;QACpBE,IAAI,EAAE,WAAW;QACjBD,IAAI,EAAEI,QAAQ,CAACJ,IAAI;QACnBM,OAAO,EAAE7B,WAAW;QACpBoB,OAAO,EAAEO,QAAQ,CAACP;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCR,MAAM,CAAC,aAAa,EAAE;QACpBE,IAAI,EAAE,WAAW;QACjBD,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,SAAS;MACRD,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC;IAC7B;EACF,CAAC;EACDU,SAASA,CAAC;IAAEV;EAAO,CAAC,EAAE;IACpBA,MAAM,CAAC,gBAAgB,CAAC;EAC1B;AACF,CAAC;;AAED;AACA,eAAeG,cAAcA,CAACF,IAAI,EAAE;EAClC;EACA,IAAIA,IAAI,CAACU,KAAK,CAAC,iBAAiB,CAAC,EAAE,OAAO,OAAO;EACjD,IAAIV,IAAI,CAACU,KAAK,CAAC,gBAAgB,CAAC,EAAE,OAAO,KAAK;EAC9C,IAAIV,IAAI,CAACU,KAAK,CAAC,YAAY,CAAC,EAAE,OAAO,QAAQ;EAC7C,OAAO,OAAO,EAAC;AACjB;AAEA,eAAeP,iBAAiBA,CAACH,IAAI,EAAE;EACrC,IAAIA,IAAI,CAACU,KAAK,CAAC,gBAAgB,CAAC,EAAE;IAChC;IACA,OAAO;MACLC,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MAChDC,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAACH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACtEE,WAAW,EAAE;IACf,CAAC;EACH;EACA,OAAO,IAAI;AACb;AAEA,eAAeX,gBAAgBA,CAACL,IAAI,EAAER,OAAO,EAAE;EAC7C;EACA,MAAMyB,SAAS,GAAG;IAChBC,KAAK,EAAE;MACLlB,IAAI,EAAE,yBAAyB;MAC/BH,OAAO,EAAE,CAAC;QAAEI,IAAI,EAAE,WAAW;QAAEkB,IAAI,EAAE;MAAS,CAAC;IACjD,CAAC;IACDC,GAAG,EAAE;MACHpB,IAAI,EAAE,4BAA4B;MAClCH,OAAO,EAAE,CAAC;QAAEI,IAAI,EAAE,OAAO;QAAEoB,KAAK,EAAE;MAAO,CAAC;IAC5C,CAAC;IACDC,MAAM,EAAE;MACNtB,IAAI,EAAE,0BAA0B;MAChCH,OAAO,EAAE,CAAC;QAAEI,IAAI,EAAE,OAAO;QAAEoB,KAAK,EAAE;MAAQ,CAAC;IAC7C;EACF,CAAC;EAED,OAAOJ,SAAS,CAACzB,OAAO,CAAC,IAAI;IAC3BQ,IAAI,EAAE,sBAAsB;IAC5BH,OAAO,EAAE;EACX,CAAC;AACH;AAEA,eAAe;EACb0B,UAAU,EAAE,IAAI;EAChBlD,KAAK;EACLM,OAAO;EACPE,SAAS;EACTgB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}