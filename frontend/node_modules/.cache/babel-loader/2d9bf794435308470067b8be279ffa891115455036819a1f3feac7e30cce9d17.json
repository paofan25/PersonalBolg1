{"ast":null,"code":"import { getToken, setToken, removeToken } from '@/utils/auth';\nimport { login, logout, getInfo, register, updateProfile } from '@/api/user';\n\n// 初始状态\nconst state = {\n  token: getToken(),\n  user: null,\n  loading: false,\n  error: null\n};\n\n// getters\nconst getters = {\n  isLoggedIn: state => !!state.token,\n  currentUser: state => state.user,\n  isLoading: state => state.loading,\n  authError: state => state.error\n};\n\n// mutations\nconst mutations = {\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_USER(state, user) {\n    state.user = user;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  },\n  RESET_STATE(state) {\n    state.token = '';\n    state.user = null;\n    state.error = null;\n    removeToken();\n  }\n};\n\n// actions\nconst actions = {\n  // 用户登录\n  async login({\n    commit,\n    dispatch\n  }, {\n    email,\n    password\n  }) {\n    try {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      console.log('开始登录请求:', {\n        email\n      });\n      const response = await login({\n        email: email.trim(),\n        password\n      });\n      console.log('登录响应:', response);\n      const {\n        data\n      } = response.data;\n      console.log('登录数据:', data);\n      if (data && data.token) {\n        console.log('设置token:', data.token);\n        // 先保存token到localStorage\n        setToken(data.token);\n        // 再更新store\n        commit('SET_TOKEN', data.token);\n\n        // 获取用户信息前确认token已保存\n        const savedToken = getToken();\n        console.log('已保存的token:', savedToken);\n        if (savedToken) {\n          // 获取用户信息\n          console.log('开始获取用户信息');\n          try {\n            const userResponse = await getInfo();\n            console.log('用户信息响应:', userResponse);\n            const userData = userResponse.data.data;\n            commit('SET_USER', userData);\n\n            // 跳转到个人中心页面\n            return {\n              success: true,\n              data,\n              redirectTo: '/profile'\n            };\n          } catch (error) {\n            console.error('获取用户信息失败:', error);\n            // 即使获取用户信息失败，登录也算成功\n            return {\n              success: true,\n              data,\n              redirectTo: '/profile',\n              infoError: error.message\n            };\n          }\n        } else {\n          throw new Error('token保存失败');\n        }\n      } else {\n        throw new Error('登录响应中没有token');\n      }\n    } catch (error) {\n      console.error('登录错误:', error);\n      const message = error.response?.data?.message || error.message || '登录失败';\n      commit('SET_ERROR', message);\n      throw new Error(message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 用户注册\n  async register({\n    commit\n  }, {\n    username,\n    email,\n    password\n  }) {\n    try {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      const {\n        data\n      } = await register({\n        username,\n        email,\n        password\n      });\n      commit('SET_TOKEN', data.token);\n      setToken(data.token);\n\n      // 获取用户信息\n      const userInfo = await getInfo(data.token);\n      commit('SET_USER', userInfo.data);\n      return data;\n    } catch (error) {\n      commit('SET_ERROR', error.message || '注册失败');\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 获取用户信息\n  async getInfo({\n    commit,\n    state\n  }) {\n    try {\n      const {\n        data\n      } = await getInfo(state.token);\n      commit('SET_USER', data);\n      return data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    }\n  },\n  // 更新用户资料\n  async updateProfile({\n    commit\n  }, profileData) {\n    try {\n      commit('SET_LOADING', true);\n      const {\n        data\n      } = await updateProfile(profileData);\n      commit('SET_USER', data);\n      return data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 用户登出\n  async logout({\n    commit\n  }) {\n    try {\n      await logout();\n      removeToken();\n      commit('RESET_STATE');\n    } catch (error) {\n      console.error('登出失败:', error);\n      // 即使请求失败，也清除本地状态\n      removeToken();\n      commit('RESET_STATE');\n      throw error;\n    }\n  },\n  // 重置 Token\n  resetToken({\n    commit\n  }) {\n    removeToken();\n    commit('RESET_STATE');\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["getToken","setToken","removeToken","login","logout","getInfo","register","updateProfile","state","token","user","loading","error","getters","isLoggedIn","currentUser","isLoading","authError","mutations","SET_TOKEN","SET_USER","SET_LOADING","SET_ERROR","RESET_STATE","actions","commit","dispatch","email","password","console","log","response","trim","data","savedToken","userResponse","userData","success","redirectTo","infoError","message","Error","username","userInfo","profileData","resetToken","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/auth.js"],"sourcesContent":["import { getToken, setToken, removeToken } from '@/utils/auth'\nimport { login, logout, getInfo, register, updateProfile } from '@/api/user'\n\n// 初始状态\nconst state = {\n  token: getToken(),\n  user: null,\n  loading: false,\n  error: null\n}\n\n// getters\nconst getters = {\n  isLoggedIn: state => !!state.token,\n  currentUser: state => state.user,\n  isLoading: state => state.loading,\n  authError: state => state.error\n}\n\n// mutations\nconst mutations = {\n  SET_TOKEN(state, token) {\n    state.token = token\n  },\n  SET_USER(state, user) {\n    state.user = user\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  },\n  RESET_STATE(state) {\n    state.token = ''\n    state.user = null\n    state.error = null\n    removeToken()\n  }\n}\n\n// actions\nconst actions = {\n  // 用户登录\n  async login({ commit, dispatch }, { email, password }) {\n    try {\n      commit('SET_LOADING', true)\n      commit('SET_ERROR', null)\n\n      console.log('开始登录请求:', { email })\n      const response = await login({ email: email.trim(), password })\n      console.log('登录响应:', response)\n\n      const { data } = response.data\n      console.log('登录数据:', data)\n\n      if (data && data.token) {\n        console.log('设置token:', data.token)\n        // 先保存token到localStorage\n        setToken(data.token)\n        // 再更新store\n        commit('SET_TOKEN', data.token)\n\n        // 获取用户信息前确认token已保存\n        const savedToken = getToken()\n        console.log('已保存的token:', savedToken)\n\n        if (savedToken) {\n          // 获取用户信息\n          console.log('开始获取用户信息')\n          try {\n            const userResponse = await getInfo()\n            console.log('用户信息响应:', userResponse)\n            const userData = userResponse.data.data\n            commit('SET_USER', userData)\n\n            // 跳转到个人中心页面\n            return {\n              success: true,\n              data,\n              redirectTo: '/profile'\n            }\n          } catch (error) {\n            console.error('获取用户信息失败:', error)\n            // 即使获取用户信息失败，登录也算成功\n            return {\n              success: true,\n              data,\n              redirectTo: '/profile',\n              infoError: error.message\n            }\n          }\n        } else {\n          throw new Error('token保存失败')\n        }\n      } else {\n        throw new Error('登录响应中没有token')\n      }\n    } catch (error) {\n      console.error('登录错误:', error)\n      const message = error.response?.data?.message || error.message || '登录失败'\n      commit('SET_ERROR', message)\n      throw new Error(message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 用户注册\n  async register({ commit }, { username, email, password }) {\n    try {\n      commit('SET_LOADING', true)\n      commit('SET_ERROR', null)\n\n      const { data } = await register({ username, email, password })\n\n      commit('SET_TOKEN', data.token)\n      setToken(data.token)\n\n      // 获取用户信息\n      const userInfo = await getInfo(data.token)\n      commit('SET_USER', userInfo.data)\n\n      return data\n    } catch (error) {\n      commit('SET_ERROR', error.message || '注册失败')\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 获取用户信息\n  async getInfo({ commit, state }) {\n    try {\n      const { data } = await getInfo(state.token)\n      commit('SET_USER', data)\n      return data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    }\n  },\n\n  // 更新用户资料\n  async updateProfile({ commit }, profileData) {\n    try {\n      commit('SET_LOADING', true)\n      const { data } = await updateProfile(profileData)\n      commit('SET_USER', data)\n      return data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 用户登出\n  async logout({ commit }) {\n    try {\n      await logout()\n      removeToken()\n      commit('RESET_STATE')\n    } catch (error) {\n      console.error('登出失败:', error)\n      // 即使请求失败，也清除本地状态\n      removeToken()\n      commit('RESET_STATE')\n      throw error\n    }\n  },\n\n  // 重置 Token\n  resetToken({ commit }) {\n    removeToken()\n    commit('RESET_STATE')\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}