{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SparkService from '@/services/sparkAI';\nimport WeatherService from '@/services/weather';\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n};\nconst getters = {\n  messages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion\n};\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message);\n  },\n  SET_TYPING(state, isTyping) {\n    state.isTyping = isTyping;\n  },\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion;\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info;\n  },\n  TOGGLE_SOUND(state) {\n    state.soundEffects = !state.soundEffects;\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = [];\n  }\n};\nconst actions = {\n  async sendMessage({\n    commit,\n    state\n  }, message) {\n    // 添加用户消息\n    commit('ADD_MESSAGE', {\n      id: Date.now(),\n      sender: 'user',\n      content: message,\n      timestamp: new Date().toLocaleTimeString()\n    });\n\n    // 设置助手为正在输入状态\n    commit('SET_TYPING', true);\n\n    // 分析情绪\n    const emotion = analyzeEmotion(message);\n    if (emotion !== state.currentEmotion) {\n      commit('CHANGE_EMOTION', emotion);\n    }\n\n    // 检查是否是天气相关询问\n    const isWeatherQuery = await checkForWeather(message, commit);\n\n    // 如果不是天气询问，则生成普通回复\n    if (!isWeatherQuery) {\n      try {\n        // 尝试使用AI服务生成回复\n        const response = await SparkService.generateResponse(message, state.currentEmotion);\n\n        // 添加助手回复\n        setTimeout(() => {\n          commit('SET_TYPING', false);\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            sender: 'assistant',\n            content: response,\n            timestamp: new Date().toLocaleTimeString()\n          });\n        }, 1000);\n      } catch (error) {\n        console.error('AI服务出错，使用本地回复:', error);\n\n        // AI服务失败时使用本地回复\n        const fallbackResponse = generateResponse(emotion, message);\n        setTimeout(() => {\n          commit('SET_TYPING', false);\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            sender: 'assistant',\n            content: fallbackResponse,\n            timestamp: new Date().toLocaleTimeString()\n          });\n        }, 1000);\n      }\n    }\n  },\n  clearChat({\n    commit\n  }) {\n    commit('CLEAR_MESSAGES');\n  }\n};\n\n/**\n * 分析用户消息的情绪\n * @param {string} message - 用户输入的消息\n * @returns {string} 情绪类型\n */\nfunction analyzeEmotion(message) {\n  const happyKeywords = ['开心', '高兴', '快乐', '好', '棒', '喜欢', '爱', '哈哈', '嘻嘻', '笑', ':-)', ':)', '😊', '😄'];\n  const sadKeywords = ['难过', '伤心', '悲伤', '失望', '难受', '不好', '痛苦', '哭', '呜', '泪', ':-(', ':(', '😢', '😭'];\n  const angryKeywords = ['生气', '愤怒', '恼火', '烦', '讨厌', '恨', '滚', '笨', '蠢', '混蛋', '傻', '气死', '烦死', '😠', '😡'];\n  const lowercaseMessage = message.toLowerCase();\n  if (happyKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'happy';\n  } else if (sadKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'sad';\n  } else if (angryKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'angry';\n  }\n  return 'neutral';\n}\n\n/**\n * 检查是否是天气相关询问\n * @param {string} message - 用户输入的消息\n * @param {function} commit - Vuex commit函数\n * @returns {boolean} 是否是天气相关询问\n */\nasync function checkForWeather(message, commit) {\n  const weatherKeywords = ['天气', '气温', '温度', '多少度', '冷不冷', '热不热', '下雨', '阴天', '晴天', '雪'];\n  if (weatherKeywords.some(keyword => message.includes(keyword))) {\n    commit('SET_TYPING', true);\n    try {\n      // 获取天气信息\n      const weatherData = await WeatherService.getNowWeather();\n      const weatherDescription = WeatherService.generateWeatherDescription(weatherData);\n      commit('SET_WEATHER_INFO', weatherData);\n\n      // 添加天气回复\n      setTimeout(() => {\n        commit('SET_TYPING', false);\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: `${weatherDescription} 需要我告诉你更多天气信息吗？(^_^)`,\n          timestamp: new Date().toLocaleTimeString(),\n          isWeather: true\n        });\n      }, 1000);\n      return true;\n    } catch (error) {\n      console.error('获取天气信息失败:', error);\n\n      // 获取天气失败时的回复\n      setTimeout(() => {\n        commit('SET_TYPING', false);\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: '对不起，我现在无法获取天气信息，请稍后再试~ (>_<)',\n          timestamp: new Date().toLocaleTimeString()\n        });\n      }, 1000);\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * 生成基于情绪的本地回复（当AI服务不可用时使用）\n * @param {string} emotion - 情绪类型\n * @param {string} message - 用户输入的消息\n * @returns {string} 生成的回复\n */\nfunction generateResponse(emotion, message) {\n  const greetings = ['你好', '嗨', '早上好', '晚上好', '下午好', '早安', '晚安'];\n  const questions = ['吗', '？', '?', '什么', '怎么', '如何', '为什么', '哪里', '谁'];\n\n  // 检查是否是问候\n  if (greetings.some(greeting => message.includes(greeting))) {\n    return emotion === 'happy' ? '嗨嗨嗨！今天看起来是个好日子呢！(^_^)' : '你好啊~有什么我能帮到你的？(^_^)';\n  }\n\n  // 检查是否是问题\n  if (questions.some(q => message.includes(q))) {\n    return '这个问题有点难，让我想想...(>_<) 我现在可能回答不上来，你能换个方式问我吗？';\n  }\n\n  // 基于情绪的一般回复\n  switch (emotion) {\n    case 'happy':\n      return '看到你这么开心，我也好高兴呀！(^o^)';\n    case 'sad':\n      return '别难过了，我陪着你呢。要不要听个笑话？(*^_^*)';\n    case 'angry':\n      return '深呼吸，慢慢来，不要着急。有什么我能帮你的吗？(^_^)';\n    default:\n      return '嗯嗯，我在听呢。还有什么你想和我分享的吗？(^_^)';\n  }\n}\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["SparkService","WeatherService","state","messages","isTyping","currentEmotion","weatherInfo","soundEffects","getters","mutations","ADD_MESSAGE","message","push","SET_TYPING","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND","CLEAR_MESSAGES","actions","sendMessage","commit","id","Date","now","sender","content","timestamp","toLocaleTimeString","analyzeEmotion","isWeatherQuery","checkForWeather","response","generateResponse","setTimeout","error","console","fallbackResponse","clearChat","happyKeywords","sadKeywords","angryKeywords","lowercaseMessage","toLowerCase","some","keyword","includes","weatherKeywords","weatherData","getNowWeather","weatherDescription","generateWeatherDescription","isWeather","greetings","questions","greeting","q","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\nimport WeatherService from '@/services/weather'\n\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n}\n\nconst getters = {\n  messages: (state) => state.messages,\n  isTyping: (state) => state.isTyping,\n  currentEmotion: (state) => state.currentEmotion\n}\n\nconst mutations = {\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message)\n  },\n  SET_TYPING(state, isTyping) {\n    state.isTyping = isTyping\n  },\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion\n  },\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info\n  },\n  TOGGLE_SOUND(state) {\n    state.soundEffects = !state.soundEffects\n  },\n  CLEAR_MESSAGES(state) {\n    state.messages = []\n  }\n}\n\nconst actions = {\n  async sendMessage({ commit, state }, message) {\n    // 添加用户消息\n    commit('ADD_MESSAGE', {\n      id: Date.now(),\n      sender: 'user',\n      content: message,\n      timestamp: new Date().toLocaleTimeString()\n    })\n    \n    // 设置助手为正在输入状态\n    commit('SET_TYPING', true)\n    \n    // 分析情绪\n    const emotion = analyzeEmotion(message)\n    if (emotion !== state.currentEmotion) {\n      commit('CHANGE_EMOTION', emotion)\n    }\n    \n    // 检查是否是天气相关询问\n    const isWeatherQuery = await checkForWeather(message, commit)\n    \n    // 如果不是天气询问，则生成普通回复\n    if (!isWeatherQuery) {\n      try {\n        // 尝试使用AI服务生成回复\n        const response = await SparkService.generateResponse(message, state.currentEmotion)\n        \n        // 添加助手回复\n        setTimeout(() => {\n          commit('SET_TYPING', false)\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            sender: 'assistant',\n            content: response,\n            timestamp: new Date().toLocaleTimeString()\n          })\n        }, 1000)\n      } catch (error) {\n        console.error('AI服务出错，使用本地回复:', error)\n        \n        // AI服务失败时使用本地回复\n        const fallbackResponse = generateResponse(emotion, message)\n        setTimeout(() => {\n          commit('SET_TYPING', false)\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            sender: 'assistant',\n            content: fallbackResponse,\n            timestamp: new Date().toLocaleTimeString()\n          })\n        }, 1000)\n      }\n    }\n  },\n  \n  clearChat({ commit }) {\n    commit('CLEAR_MESSAGES')\n  }\n}\n\n/**\n * 分析用户消息的情绪\n * @param {string} message - 用户输入的消息\n * @returns {string} 情绪类型\n */\nfunction analyzeEmotion(message) {\n  const happyKeywords = ['开心', '高兴', '快乐', '好', '棒', '喜欢', '爱', '哈哈', '嘻嘻', '笑', ':-)', ':)', '😊', '😄']\n  const sadKeywords = ['难过', '伤心', '悲伤', '失望', '难受', '不好', '痛苦', '哭', '呜', '泪', ':-(', ':(', '😢', '😭']\n  const angryKeywords = ['生气', '愤怒', '恼火', '烦', '讨厌', '恨', '滚', '笨', '蠢', '混蛋', '傻', '气死', '烦死', '😠', '😡']\n  \n  const lowercaseMessage = message.toLowerCase()\n  \n  if (happyKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'happy'\n  } else if (sadKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'sad'\n  } else if (angryKeywords.some(keyword => lowercaseMessage.includes(keyword))) {\n    return 'angry'\n  }\n  \n  return 'neutral'\n}\n\n/**\n * 检查是否是天气相关询问\n * @param {string} message - 用户输入的消息\n * @param {function} commit - Vuex commit函数\n * @returns {boolean} 是否是天气相关询问\n */\nasync function checkForWeather(message, commit) {\n  const weatherKeywords = ['天气', '气温', '温度', '多少度', '冷不冷', '热不热', '下雨', '阴天', '晴天', '雪']\n  \n  if (weatherKeywords.some(keyword => message.includes(keyword))) {\n    commit('SET_TYPING', true)\n    \n    try {\n      // 获取天气信息\n      const weatherData = await WeatherService.getNowWeather()\n      const weatherDescription = WeatherService.generateWeatherDescription(weatherData)\n      \n      commit('SET_WEATHER_INFO', weatherData)\n      \n      // 添加天气回复\n      setTimeout(() => {\n        commit('SET_TYPING', false)\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: `${weatherDescription} 需要我告诉你更多天气信息吗？(^_^)`,\n          timestamp: new Date().toLocaleTimeString(),\n          isWeather: true\n        })\n      }, 1000)\n      \n      return true\n    } catch (error) {\n      console.error('获取天气信息失败:', error)\n      \n      // 获取天气失败时的回复\n      setTimeout(() => {\n        commit('SET_TYPING', false)\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: '对不起，我现在无法获取天气信息，请稍后再试~ (>_<)',\n          timestamp: new Date().toLocaleTimeString()\n        })\n      }, 1000)\n      \n      return true\n    }\n  }\n  \n  return false\n}\n\n/**\n * 生成基于情绪的本地回复（当AI服务不可用时使用）\n * @param {string} emotion - 情绪类型\n * @param {string} message - 用户输入的消息\n * @returns {string} 生成的回复\n */\nfunction generateResponse(emotion, message) {\n  const greetings = ['你好', '嗨', '早上好', '晚上好', '下午好', '早安', '晚安']\n  const questions = ['吗', '？', '?', '什么', '怎么', '如何', '为什么', '哪里', '谁']\n  \n  // 检查是否是问候\n  if (greetings.some(greeting => message.includes(greeting))) {\n    return emotion === 'happy' \n      ? '嗨嗨嗨！今天看起来是个好日子呢！(^_^)' \n      : '你好啊~有什么我能帮到你的？(^_^)'\n  }\n  \n  // 检查是否是问题\n  if (questions.some(q => message.includes(q))) {\n    return '这个问题有点难，让我想想...(>_<) 我现在可能回答不上来，你能换个方式问我吗？'\n  }\n  \n  // 基于情绪的一般回复\n  switch (emotion) {\n    case 'happy':\n      return '看到你这么开心，我也好高兴呀！(^o^)'\n    case 'sad':\n      return '别难过了，我陪着你呢。要不要听个笑话？(*^_^*)'\n    case 'angry':\n      return '深呼吸，慢慢来，不要着急。有什么我能帮你的吗？(^_^)'\n    default:\n      return '嗯嗯，我在听呢。还有什么你想和我分享的吗？(^_^)'\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}