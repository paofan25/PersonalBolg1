{"ast":null,"code":"import { mapState, mapGetters, mapActions, mapMutations } from 'vuex';\nexport default {\n  name: 'ChatView',\n  data() {\n    return {\n      userInput: ''\n    };\n  },\n  computed: {\n    ...mapState('chat', ['isTyping', 'weatherInfo', 'soundEnabled']),\n    ...mapGetters('chat', ['messages', 'currentEmotion'])\n  },\n  methods: {\n    ...mapActions('chat', ['sendMessage', 'clearMessages']),\n    ...mapMutations('chat', ['toggleSoundEffects']),\n    getEmotionDisplay() {\n      const emotions = {\n        happy: '开心 😊',\n        sad: '伤心 😢',\n        excited: '兴奋 😃',\n        neutral: '平静 😌',\n        confused: '困惑 🤔',\n        tired: '疲倦 😴',\n        surprised: '惊讶 😲',\n        angry: '生气 😠'\n      };\n      return emotions[this.currentEmotion] || emotions.neutral;\n    },\n    getWeatherEmoji() {\n      if (!this.weatherInfo) return '🌈';\n      const condition = this.weatherInfo.condition?.toLowerCase() || '';\n      if (condition.includes('sun') || condition.includes('clear')) return '☀️';\n      if (condition.includes('cloud')) return '☁️';\n      if (condition.includes('rain')) return '🌧️';\n      if (condition.includes('snow')) return '❄️';\n      if (condition.includes('storm') || condition.includes('thunder')) return '⛈️';\n      if (condition.includes('fog') || condition.includes('mist')) return '🌫️';\n      return '🌈';\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    handleSuggestion(text) {\n      this.userInput = text;\n      this.sendMessage();\n    },\n    clearChat() {\n      if (confirm('确定要清空聊天记录吗？')) {\n        this.clearMessages();\n      }\n    },\n    toggleSound() {\n      this.toggleSoundEffects();\n    },\n    scrollToBottom() {\n      setTimeout(() => {\n        if (this.$refs.messagesContainer) {\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n        }\n      }, 50);\n    }\n  },\n  watch: {\n    messages: {\n      handler() {\n        this.scrollToBottom();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","mapMutations","name","data","userInput","computed","methods","getEmotionDisplay","emotions","happy","sad","excited","neutral","confused","tired","surprised","angry","currentEmotion","getWeatherEmoji","weatherInfo","condition","toLowerCase","includes","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","handleSuggestion","text","sendMessage","clearChat","confirm","clearMessages","toggleSound","toggleSoundEffects","scrollToBottom","setTimeout","$refs","messagesContainer","scrollTop","scrollHeight","watch","messages","handler","deep","mounted"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\views\\ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"chat-header\">\n      <div class=\"assistant-info\">\n        <div class=\"avatar-container\">\n          <div class=\"avatar-placeholder\">🐰</div>\n        </div>\n        <div class=\"assistant-status\">\n          <h2>甜梦助手</h2>\n          <p :class=\"['emotion', currentEmotion]\">{{ getEmotionDisplay() }}</p>\n        </div>\n      </div>\n      <div class=\"weather-info\" v-if=\"weatherInfo\">\n        <div class=\"weather-icon\">{{ getWeatherEmoji() }}</div>\n        <div class=\"weather-text\">\n          <p>{{ weatherInfo.city }}</p>\n          <p>{{ weatherInfo.temp }}°C {{ weatherInfo.description }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"messages-container\" ref=\"messagesContainer\">\n      <div class=\"welcome-message\" v-if=\"messages.length === 0\">\n        <h3>欢迎来到甜梦星球！</h3>\n        <p>我是你的甜梦助手，有什么我能帮你的吗？</p>\n        <div class=\"suggestion-chips\">\n          <button @click=\"handleSuggestion('介绍一下甜梦星球')\">介绍一下甜梦星球</button>\n          <button @click=\"handleSuggestion('今天天气怎么样')\">今天天气怎么样</button>\n          <button @click=\"handleSuggestion('我想玩游戏')\">我想玩游戏</button>\n        </div>\n      </div>\n      \n      <div v-for=\"(message, index) in messages\" :key=\"index\" \n           :class=\"['message', message.isUser ? 'user-message' : 'assistant-message']\">\n        <div class=\"message-avatar\" v-if=\"!message.isUser\">\n          <div class=\"avatar-placeholder\">🐰</div>\n        </div>\n        <div class=\"message-content\">\n          <p>{{ message.text }}</p>\n          <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\n        </div>\n        <div class=\"message-avatar user-avatar\" v-if=\"message.isUser\">\n          <div class=\"avatar-placeholder\">👤</div>\n        </div>\n      </div>\n      \n      <div class=\"typing-indicator\" v-if=\"isTyping\">\n        <span></span>\n        <span></span>\n        <span></span>\n      </div>\n    </div>\n    \n    <div class=\"input-container\">\n      <input \n        type=\"text\" \n        v-model=\"userInput\" \n        @keyup.enter=\"sendMessage\" \n        placeholder=\"和甜梦助手聊聊吧...\"\n        :disabled=\"isTyping\"\n      />\n      <button @click=\"sendMessage\" :disabled=\"!userInput.trim() || isTyping\">\n        发送\n      </button>\n      <button class=\"clear-button\" @click=\"clearChat\" title=\"清空聊天记录\">\n        🗑️\n      </button>\n      <button \n        class=\"sound-button\" \n        @click=\"toggleSound\" \n        :class=\"{ 'sound-on': soundEnabled }\"\n        :title=\"soundEnabled ? '关闭声音' : '开启声音'\"\n      >\n        {{ soundEnabled ? '🔊' : '🔇' }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions, mapMutations } from 'vuex';\n\nexport default {\n  name: 'ChatView',\n  data() {\n    return {\n      userInput: '',\n    };\n  },\n  computed: {\n    ...mapState('chat', ['isTyping', 'weatherInfo', 'soundEnabled']),\n    ...mapGetters('chat', ['messages', 'currentEmotion'])\n  },\n  methods: {\n    ...mapActions('chat', ['sendMessage', 'clearMessages']),\n    ...mapMutations('chat', ['toggleSoundEffects']),\n    \n    getEmotionDisplay() {\n      const emotions = {\n        happy: '开心 😊',\n        sad: '伤心 😢',\n        excited: '兴奋 😃',\n        neutral: '平静 😌',\n        confused: '困惑 🤔',\n        tired: '疲倦 😴',\n        surprised: '惊讶 😲',\n        angry: '生气 😠'\n      };\n      return emotions[this.currentEmotion] || emotions.neutral;\n    },\n    \n    getWeatherEmoji() {\n      if (!this.weatherInfo) return '🌈';\n      \n      const condition = this.weatherInfo.condition?.toLowerCase() || '';\n      \n      if (condition.includes('sun') || condition.includes('clear')) return '☀️';\n      if (condition.includes('cloud')) return '☁️';\n      if (condition.includes('rain')) return '🌧️';\n      if (condition.includes('snow')) return '❄️';\n      if (condition.includes('storm') || condition.includes('thunder')) return '⛈️';\n      if (condition.includes('fog') || condition.includes('mist')) return '🌫️';\n      \n      return '🌈';\n    },\n    \n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    },\n    \n    handleSuggestion(text) {\n      this.userInput = text;\n      this.sendMessage();\n    },\n    \n    clearChat() {\n      if (confirm('确定要清空聊天记录吗？')) {\n        this.clearMessages();\n      }\n    },\n    \n    toggleSound() {\n      this.toggleSoundEffects();\n    },\n    \n    scrollToBottom() {\n      setTimeout(() => {\n        if (this.$refs.messagesContainer) {\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n        }\n      }, 50);\n    }\n  },\n  watch: {\n    messages: {\n      handler() {\n        this.scrollToBottom();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 100px);\n  max-width: 1000px;\n  margin: 0 auto;\n  background-color: #f9f4ff;\n  border-radius: 15px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  background: linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%);\n  color: #fff;\n  border-bottom: 1px solid #ddd;\n}\n\n.assistant-info {\n  display: flex;\n  align-items: center;\n}\n\n.avatar-container {\n  margin-right: 15px;\n}\n\n.avatar-placeholder {\n  width: 50px;\n  height: 50px;\n  background-color: #fff;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.assistant-status h2 {\n  margin: 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n.assistant-status p {\n  margin: 5px 0 0;\n  font-size: 0.9rem;\n  opacity: 0.8;\n}\n\n.emotion {\n  font-weight: 500;\n}\n\n.emotion.happy, .emotion.excited {\n  color: #ffeb3b;\n}\n\n.emotion.sad, .emotion.tired {\n  color: #90caf9;\n}\n\n.emotion.confused, .emotion.neutral {\n  color: #e6e6e6;\n}\n\n.emotion.surprised {\n  color: #fff59d;\n}\n\n.emotion.angry {\n  color: #ff8a80;\n}\n\n.weather-info {\n  display: flex;\n  align-items: center;\n}\n\n.weather-icon {\n  font-size: 2rem;\n  margin-right: 10px;\n}\n\n.weather-text p {\n  margin: 0;\n  font-size: 0.9rem;\n  line-height: 1.4;\n  text-align: right;\n}\n\n.messages-container {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background-color: #f9f4ff;\n}\n\n.welcome-message {\n  text-align: center;\n  padding: 30px 20px;\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 10px;\n  margin-bottom: 20px;\n}\n\n.welcome-message h3 {\n  margin-top: 0;\n  color: #7b68ee;\n}\n\n.suggestion-chips {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 15px;\n}\n\n.suggestion-chips button {\n  background-color: #e0c3fc;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  color: #3a3053;\n  transition: all 0.2s;\n}\n\n.suggestion-chips button:hover {\n  background-color: #8ec5fc;\n  color: #fff;\n  transform: translateY(-2px);\n}\n\n.message {\n  display: flex;\n  margin-bottom: 15px;\n  align-items: flex-start;\n}\n\n.user-message {\n  flex-direction: row-reverse;\n}\n\n.message-avatar {\n  flex-shrink: 0;\n}\n\n.message-content {\n  max-width: 70%;\n  padding: 10px 15px;\n  border-radius: 15px;\n  position: relative;\n  margin: 0 10px;\n}\n\n.user-message .message-content {\n  background-color: #8ec5fc;\n  color: white;\n  border-bottom-right-radius: 5px;\n}\n\n.assistant-message .message-content {\n  background-color: white;\n  color: #333;\n  border-bottom-left-radius: 5px;\n}\n\n.message-content p {\n  margin: 0;\n  word-break: break-word;\n}\n\n.message-time {\n  font-size: 0.7rem;\n  opacity: 0.7;\n  position: absolute;\n  bottom: -18px;\n  right: 5px;\n}\n\n.user-message .message-time {\n  left: 5px;\n}\n\n.typing-indicator {\n  display: flex;\n  padding: 10px 15px;\n  background-color: white;\n  border-radius: 15px;\n  width: 70px;\n  margin-left: 60px;\n  margin-bottom: 15px;\n  border-bottom-left-radius: 5px;\n}\n\n.typing-indicator span {\n  height: 8px;\n  width: 8px;\n  margin: 0 2px;\n  background-color: #8ec5fc;\n  border-radius: 50%;\n  display: inline-block;\n  opacity: 0.4;\n  animation: typing 1.4s infinite both;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0% {\n    opacity: 0.4;\n    transform: translateY(0);\n  }\n  50% {\n    opacity: 1;\n    transform: translateY(-5px);\n  }\n  100% {\n    opacity: 0.4;\n    transform: translateY(0);\n  }\n}\n\n.input-container {\n  display: flex;\n  padding: 15px;\n  background-color: white;\n  border-top: 1px solid #ddd;\n}\n\n.input-container input {\n  flex: 1;\n  padding: 12px 15px;\n  border: 1px solid #ddd;\n  border-radius: 25px;\n  font-size: 1rem;\n  outline: none;\n  transition: border-color 0.3s;\n}\n\n.input-container input:focus {\n  border-color: #8ec5fc;\n}\n\n.input-container button {\n  padding: 10px 20px;\n  margin-left: 10px;\n  background: linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%);\n  color: white;\n  border: none;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: all 0.3s;\n}\n\n.input-container button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n}\n\n.input-container button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.clear-button, .sound-button {\n  width: 40px;\n  height: 40px;\n  padding: 0 !important;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem !important;\n  background: #f3f3f3 !important;\n  color: #666 !important;\n}\n\n.sound-button.sound-on {\n  background: #e0c3fc !important;\n  color: white !important;\n}\n\n/* Media queries for responsiveness */\n@media (max-width: 768px) {\n  .chat-container {\n    height: calc(100vh - 60px);\n    border-radius: 0;\n  }\n  \n  .message-content {\n    max-width: 85%;\n  }\n  \n  .weather-text {\n    display: none;\n  }\n}\n\n@media (max-width: 480px) {\n  .chat-header {\n    padding: 10px;\n  }\n  \n  .avatar-placeholder {\n    width: 40px;\n    height: 40px;\n    font-size: 25px;\n  }\n  \n  .assistant-status h2 {\n    font-size: 1rem;\n  }\n  \n  .input-container {\n    padding: 10px;\n  }\n  \n  .input-container button {\n    padding: 8px 15px;\n  }\n  \n  .clear-button, .sound-button {\n    width: 35px;\n    height: 35px;\n  }\n}\n</style>"],"mappings":"AAgFA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAW,QAAS,MAAM;AAErE,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGP,QAAQ,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;IAChE,GAAGC,UAAU,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,gBAAgB,CAAC;EACtD,CAAC;EACDO,OAAO,EAAE;IACP,GAAGN,UAAU,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;IACvD,GAAGC,YAAY,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC,CAAC;IAE/CM,iBAAiBA,CAAA,EAAG;MAClB,MAAMC,QAAO,GAAI;QACfC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE,OAAO;QACZC,OAAO,EAAE,OAAO;QAChBC,OAAO,EAAE,OAAO;QAChBC,QAAQ,EAAE,OAAO;QACjBC,KAAK,EAAE,OAAO;QACdC,SAAS,EAAE,OAAO;QAClBC,KAAK,EAAE;MACT,CAAC;MACD,OAAOR,QAAQ,CAAC,IAAI,CAACS,cAAc,KAAKT,QAAQ,CAACI,OAAO;IAC1D,CAAC;IAEDM,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE,OAAO,IAAI;MAElC,MAAMC,SAAQ,GAAI,IAAI,CAACD,WAAW,CAACC,SAAS,EAAEC,WAAW,CAAC,KAAK,EAAE;MAEjE,IAAID,SAAS,CAACE,QAAQ,CAAC,KAAK,KAAKF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI;MACzE,IAAIF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI;MAC5C,IAAIF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,KAAK;MAC5C,IAAIF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,IAAI;MAC3C,IAAIF,SAAS,CAACE,QAAQ,CAAC,OAAO,KAAKF,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,IAAI;MAC7E,IAAIF,SAAS,CAACE,QAAQ,CAAC,KAAK,KAAKF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,KAAK;MAEzE,OAAO,IAAI;IACb,CAAC;IAEDC,UAAUA,CAACC,SAAS,EAAE;MACpB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,EAAE,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;IAC5E,CAAC;IAEDC,gBAAgBA,CAACC,IAAI,EAAE;MACrB,IAAI,CAAC3B,SAAQ,GAAI2B,IAAI;MACrB,IAAI,CAACC,WAAW,CAAC,CAAC;IACpB,CAAC;IAEDC,SAASA,CAAA,EAAG;MACV,IAAIC,OAAO,CAAC,aAAa,CAAC,EAAE;QAC1B,IAAI,CAACC,aAAa,CAAC,CAAC;MACtB;IACF,CAAC;IAEDC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC3B,CAAC;IAEDC,cAAcA,CAAA,EAAG;MACfC,UAAU,CAAC,MAAM;QACf,IAAI,IAAI,CAACC,KAAK,CAACC,iBAAiB,EAAE;UAChC,IAAI,CAACD,KAAK,CAACC,iBAAiB,CAACC,SAAQ,GAAI,IAAI,CAACF,KAAK,CAACC,iBAAiB,CAACE,YAAY;QACpF;MACF,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC;EACDC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACR,cAAc,CAAC,CAAC;MACvB,CAAC;MACDS,IAAI,EAAE;IACR;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACV,cAAc,CAAC,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}