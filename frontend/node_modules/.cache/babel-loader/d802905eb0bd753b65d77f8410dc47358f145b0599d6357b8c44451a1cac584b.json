{"ast":null,"code":"class WeatherService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用环境变量或默认值\n    this.apiKey = import.meta.env?.VITE_APP_WEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://api.qweather.com/v7';\n    this.geoUrl = 'https://geoapi.qweather.com/v2';\n    console.log('WeatherService initialized with:', {\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      baseUrl: this.baseUrl,\n      geoUrl: this.geoUrl\n    });\n  }\n\n  // 获取地理位置\n  async getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('浏览器不支持地理位置'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        resolve({\n          lat: latitude,\n          lon: longitude\n        });\n      }, error => {\n        console.error('获取地理位置失败:', error);\n        // 如果获取失败，使用默认坐标（北京）\n        resolve({\n          lat: 39.90498,\n          lon: 116.40528\n        });\n      }, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    });\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 获取地理位置\n      console.log('正在获取地理位置...');\n      const {\n        lat,\n        lon\n      } = await this.getCurrentPosition();\n      console.log('当前位置:', {\n        lat,\n        lon\n      });\n\n      // 使用经纬度获取城市信息\n      const geoUrl = `${this.geoUrl}/city/lookup?location=${lon},${lat}&key=${this.apiKey}`;\n      console.log('正在获取城市信息...');\n      const geoResponse = await fetch(geoUrl);\n      if (!geoResponse.ok) {\n        throw new Error('获取城市信息失败: ' + geoResponse.status);\n      }\n      const geoData = await geoResponse.json();\n      console.log('城市信息响应:', geoData);\n      if (geoData.code !== '200') {\n        console.error('获取城市信息失败:', geoData);\n        return this.getDefaultWeather();\n      }\n\n      // 使用获取到的城市ID\n      const cityId = geoData.location?.[0]?.id;\n      if (!cityId) {\n        console.error('未能获取到城市ID');\n        return this.getDefaultWeather();\n      }\n\n      // 获取实时天气\n      const weatherUrl = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.apiKey}`;\n      console.log('正在获取天气信息...');\n      const weatherResponse = await fetch(weatherUrl);\n      if (!weatherResponse.ok) {\n        throw new Error('获取天气信息失败: ' + weatherResponse.status);\n      }\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', weatherData);\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: geoData.location[0].name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const {\n      temperature,\n      description,\n      cityName\n    } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: '未知城市',\n      updateTime: new Date().toISOString()\n    };\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","import","meta","env","console","error","apiKey","VITE_APP_WEATHER_KEY","baseUrl","geoUrl","log","substring","getCurrentPosition","Promise","resolve","reject","navigator","geolocation","Error","position","latitude","longitude","coords","lat","lon","enableHighAccuracy","timeout","maximumAge","getNowWeather","geoResponse","fetch","ok","status","geoData","json","code","getDefaultWeather","cityId","location","id","weatherUrl","weatherResponse","weatherData","temp","text","icon","now","temperature","condition","getWeatherCondition","description","cityName","name","updateTime","generateWeatherDescription","weather","suggestion","parseInt","includes","conditions","sunny","cloudy","rainy","snowy","foggy","icons","Object","entries","Date","toISOString"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用环境变量或默认值\n    this.apiKey = import.meta.env?.VITE_APP_WEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = 'https://api.qweather.com/v7';\n    this.geoUrl = 'https://geoapi.qweather.com/v2';\n\n    console.log('WeatherService initialized with:', {\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      baseUrl: this.baseUrl,\n      geoUrl: this.geoUrl\n    });\n  }\n\n  // 获取地理位置\n  async getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('浏览器不支持地理位置'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          resolve({ lat: latitude, lon: longitude });\n        },\n        (error) => {\n          console.error('获取地理位置失败:', error);\n          // 如果获取失败，使用默认坐标（北京）\n          resolve({ lat: 39.90498, lon: 116.40528 });\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0\n        }\n      );\n    });\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 获取地理位置\n      console.log('正在获取地理位置...');\n      const { lat, lon } = await this.getCurrentPosition();\n      console.log('当前位置:', { lat, lon });\n\n      // 使用经纬度获取城市信息\n      const geoUrl = `${this.geoUrl}/city/lookup?location=${lon},${lat}&key=${this.apiKey}`;\n      console.log('正在获取城市信息...');\n      \n      const geoResponse = await fetch(geoUrl);\n      if (!geoResponse.ok) {\n        throw new Error('获取城市信息失败: ' + geoResponse.status);\n      }\n      const geoData = await geoResponse.json();\n      \n      console.log('城市信息响应:', geoData);\n      \n      if (geoData.code !== '200') {\n        console.error('获取城市信息失败:', geoData);\n        return this.getDefaultWeather();\n      }\n\n      // 使用获取到的城市ID\n      const cityId = geoData.location?.[0]?.id;\n      if (!cityId) {\n        console.error('未能获取到城市ID');\n        return this.getDefaultWeather();\n      }\n\n      // 获取实时天气\n      const weatherUrl = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.apiKey}`;\n      console.log('正在获取天气信息...');\n      \n      const weatherResponse = await fetch(weatherUrl);\n      if (!weatherResponse.ok) {\n        throw new Error('获取天气信息失败: ' + weatherResponse.status);\n      }\n      const weatherData = await weatherResponse.json();\n\n      console.log('天气信息响应:', weatherData);\n\n      if (weatherData.code === '200') {\n        const { temp, text, icon } = weatherData.now;\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: geoData.location[0].name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败:', weatherData);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const { temperature, description, cityName } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: '未知城市',\n      updateTime: new Date().toISOString()\n    };\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}