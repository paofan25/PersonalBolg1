{"ast":null,"code":"import CryptoJS from 'crypto-js';\nclass XfyunService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用环境变量\n    this.appid = import.meta.env?.VITE_APP_XFYUN_APPID;\n    this.apiKey = import.meta.env?.VITE_APP_XFYUN_API_KEY;\n    this.apiSecret = import.meta.env?.VITE_APP_XFYUN_API_SECRET;\n    if (!this.appid || !this.apiKey || !this.apiSecret) {\n      console.error('讯飞服务配置缺失，使用默认值');\n      // 使用默认值作为后备\n      this.appid = 'bb840282';\n      this.apiKey = '178baf6c846eaeb5ea632cdab055b9cd';\n      this.apiSecret = 'YjMzMmE3NzczOWExZjQ3ZWI1NWY3OWJi';\n    }\n    console.log('XfyunService initialized with:', {\n      appid: this.appid,\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      hasSecret: !!this.apiSecret\n    });\n\n    // 使用HTTP API，设置请求地址和模型\n    this.apiUrl = 'https://spark-api-open.xf-yun.com/v1/chat/completions';\n    this.model = 'generalv3.5'; // 使用通用模型3.5\n  }\n\n  // 发送HTTP请求到讯飞星火API\n  async chat(messages) {\n    try {\n      console.log('Starting chat with messages:', messages);\n\n      // 构建请求体\n      const requestBody = {\n        model: this.model,\n        messages: messages,\n        temperature: 0.7,\n        max_tokens: 1024,\n        stream: false\n      };\n\n      // 发送请求\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiSecret}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API请求失败:', response.status, errorText);\n        throw new Error(`API请求失败: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('API响应:', data);\n\n      // 从响应中提取内容\n      if (data.choices && data.choices.length > 0) {\n        const content = data.choices[0].message.content;\n        return content;\n      } else {\n        throw new Error('API响应格式不正确');\n      }\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('Analyzing emotion for text:', text);\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      const messages = [{\n        role: 'user',\n        content: prompt\n      }];\n      const response = await this.chat(messages);\n      const emotion = response.toLowerCase().trim();\n      console.log('Emotion analysis result:', emotion);\n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\n// 创建单例实例\nconst xfyunService = new XfyunService();\nconsole.log('XfyunService instance created');\nexport default xfyunService;","map":{"version":3,"names":["CryptoJS","XfyunService","constructor","import","meta","env","console","error","appid","VITE_APP_XFYUN_APPID","apiKey","VITE_APP_XFYUN_API_KEY","apiSecret","VITE_APP_XFYUN_API_SECRET","log","substring","hasSecret","apiUrl","model","chat","messages","requestBody","temperature","max_tokens","stream","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","status","Error","data","json","choices","length","content","message","analyzeEmotion","prompt","role","emotion","toLowerCase","trim","includes","xfyunService"],"sources":["E:/code/PersonalBolg1/frontend/src/services/xfyun.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nclass XfyunService {\n  constructor() {\n    // 检查环境变量\n    if (typeof import.meta.env === 'undefined') {\n      console.error('环境变量未正确加载');\n    }\n\n    // 使用环境变量\n    this.appid = import.meta.env?.VITE_APP_XFYUN_APPID;\n    this.apiKey = import.meta.env?.VITE_APP_XFYUN_API_KEY;\n    this.apiSecret = import.meta.env?.VITE_APP_XFYUN_API_SECRET;\n\n    if (!this.appid || !this.apiKey || !this.apiSecret) {\n      console.error('讯飞服务配置缺失，使用默认值');\n      // 使用默认值作为后备\n      this.appid = 'bb840282';\n      this.apiKey = '178baf6c846eaeb5ea632cdab055b9cd';\n      this.apiSecret = 'YjMzMmE3NzczOWExZjQ3ZWI1NWY3OWJi';\n    }\n\n    console.log('XfyunService initialized with:', {\n      appid: this.appid,\n      apiKey: this.apiKey?.substring(0, 10) + '...',\n      hasSecret: !!this.apiSecret\n    });\n\n    // 使用HTTP API，设置请求地址和模型\n    this.apiUrl = 'https://spark-api-open.xf-yun.com/v1/chat/completions';\n    this.model = 'generalv3.5'; // 使用通用模型3.5\n  }\n\n  // 发送HTTP请求到讯飞星火API\n  async chat(messages) {\n    try {\n      console.log('Starting chat with messages:', messages);\n      \n      // 构建请求体\n      const requestBody = {\n        model: this.model,\n        messages: messages,\n        temperature: 0.7,\n        max_tokens: 1024,\n        stream: false\n      };\n      \n      // 发送请求\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiSecret}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API请求失败:', response.status, errorText);\n        throw new Error(`API请求失败: ${response.status} ${errorText}`);\n      }\n      \n      const data = await response.json();\n      console.log('API响应:', data);\n      \n      // 从响应中提取内容\n      if (data.choices && data.choices.length > 0) {\n        const content = data.choices[0].message.content;\n        return content;\n      } else {\n        throw new Error('API响应格式不正确');\n      }\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('Analyzing emotion for text:', text);\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      \n      const messages = [{ role: 'user', content: prompt }];\n      const response = await this.chat(messages);\n      const emotion = response.toLowerCase().trim();\n      \n      console.log('Emotion analysis result:', emotion);\n      \n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\n// 创建单例实例\nconst xfyunService = new XfyunService();\nconsole.log('XfyunService instance created');\n\nexport default xfyunService;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,MAAMC,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,OAAOC,MAAM,CAACC,IAAI,CAACC,GAAG,KAAK,WAAW,EAAE;MAC1CC,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;IAC5B;;IAEA;IACA,IAAI,CAACC,KAAK,GAAGL,MAAM,CAACC,IAAI,CAACC,GAAG,EAAEI,oBAAoB;IAClD,IAAI,CAACC,MAAM,GAAGP,MAAM,CAACC,IAAI,CAACC,GAAG,EAAEM,sBAAsB;IACrD,IAAI,CAACC,SAAS,GAAGT,MAAM,CAACC,IAAI,CAACC,GAAG,EAAEQ,yBAAyB;IAE3D,IAAI,CAAC,IAAI,CAACL,KAAK,IAAI,CAAC,IAAI,CAACE,MAAM,IAAI,CAAC,IAAI,CAACE,SAAS,EAAE;MAClDN,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MAC/B;MACA,IAAI,CAACC,KAAK,GAAG,UAAU;MACvB,IAAI,CAACE,MAAM,GAAG,kCAAkC;MAChD,IAAI,CAACE,SAAS,GAAG,kCAAkC;IACrD;IAEAN,OAAO,CAACQ,GAAG,CAAC,gCAAgC,EAAE;MAC5CN,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBE,MAAM,EAAE,IAAI,CAACA,MAAM,EAAEK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK;MAC7CC,SAAS,EAAE,CAAC,CAAC,IAAI,CAACJ;IACpB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACK,MAAM,GAAG,uDAAuD;IACrE,IAAI,CAACC,KAAK,GAAG,aAAa,CAAC,CAAC;EAC9B;;EAEA;EACA,MAAMC,IAAIA,CAACC,QAAQ,EAAE;IACnB,IAAI;MACFd,OAAO,CAACQ,GAAG,CAAC,8BAA8B,EAAEM,QAAQ,CAAC;;MAErD;MACA,MAAMC,WAAW,GAAG;QAClBH,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBE,QAAQ,EAAEA,QAAQ;QAClBE,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACT,MAAM,EAAE;QACxCU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAU,IAAI,CAAChB,SAAS;QAC3C,CAAC;QACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC5B,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEkB,QAAQ,CAACU,MAAM,EAAEF,SAAS,CAAC;QACrD,MAAM,IAAIG,KAAK,CAAC,YAAYX,QAAQ,CAACU,MAAM,IAAIF,SAAS,EAAE,CAAC;MAC7D;MAEA,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClChC,OAAO,CAACQ,GAAG,CAAC,QAAQ,EAAEuB,IAAI,CAAC;;MAE3B;MACA,IAAIA,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAMC,OAAO,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,OAAO,CAACD,OAAO;QAC/C,OAAOA,OAAO;MAChB,CAAC,MAAM;QACL,MAAM,IAAIL,KAAK,CAAC,YAAY,CAAC;MAC/B;IACF,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMoC,cAAcA,CAACT,IAAI,EAAE;IACzB,IAAI;MACF5B,OAAO,CAACQ,GAAG,CAAC,6BAA6B,EAAEoB,IAAI,CAAC;MAChD,MAAMU,MAAM,GAAG;AACrB,KAAKV,IAAI;AACT,IAAI;MAEE,MAAMd,QAAQ,GAAG,CAAC;QAAEyB,IAAI,EAAE,MAAM;QAAEJ,OAAO,EAAEG;MAAO,CAAC,CAAC;MACpD,MAAMnB,QAAQ,GAAG,MAAM,IAAI,CAACN,IAAI,CAACC,QAAQ,CAAC;MAC1C,MAAM0B,OAAO,GAAGrB,QAAQ,CAACsB,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAE7C1C,OAAO,CAACQ,GAAG,CAAC,0BAA0B,EAAEgC,OAAO,CAAC;MAEhD,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAACG,QAAQ,CAACH,OAAO,CAAC,EAAE;QACvE,OAAOA,OAAO;MAChB;MACA,OAAO,SAAS;IAClB,CAAC,CAAC,OAAOvC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,SAAS;IAClB;EACF;AACF;;AAEA;AACA,MAAM2C,YAAY,GAAG,IAAIjD,YAAY,CAAC,CAAC;AACvCK,OAAO,CAACQ,GAAG,CAAC,+BAA+B,CAAC;AAE5C,eAAeoC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}