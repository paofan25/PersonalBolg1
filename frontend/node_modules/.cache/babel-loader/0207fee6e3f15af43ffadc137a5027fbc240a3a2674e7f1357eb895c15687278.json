{"ast":null,"code":"/**\n * 星火认知大模型API服务\n * 用于与讯飞星火大模型API交互\n */\nclass SparkService {\n  constructor() {\n    // 固定配置\n    this.appId = '12345678'; // 请替换为您的真实appId\n    this.apiKey = 'abcdefg12345'; // 请替换为您的真实apiKey\n    this.apiSecret = 'abcdefghijk12345'; // 请替换为您的真实apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.5/chat';\n\n    // WebSocket连接\n    this.ws = null;\n    // 当前回调函数\n    this.currentResolve = null;\n    this.currentReject = null;\n  }\n\n  /**\n   * 生成认证URL\n   * @returns {string} 认证后的URL\n   */\n  genAuthUrl() {\n    try {\n      const timestamp = Math.floor(Date.now() / 1000);\n      const url = new URL(this.apiUrl);\n      const date = new Date(timestamp * 1000).toUTCString();\n      console.log('开始生成认证URL', {\n        appId: this.appId,\n        apiKey: this.apiKey.substring(0, 3) + '***',\n        timestamp\n      });\n      const signatureOrigin = `host: ${url.host}\\ndate: ${date}\\nGET ${url.pathname} HTTP/1.1`;\n\n      // 使用简单的签名模拟 - 实际项目中应使用加密库进行正确签名\n      const signature = `${this.apiKey}${this.apiSecret}${timestamp}`;\n      const authorization = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n      return `${this.apiUrl}?authorization=${encodeURIComponent(authorization)}&date=${encodeURIComponent(date)}&host=${url.host}`;\n    } catch (error) {\n      console.error('生成认证URL失败:', error);\n      throw new Error('生成认证URL失败');\n    }\n  }\n\n  /**\n   * 解析API URL\n   * @returns {string} 解析后的WebSocket URL\n   */\n  parseApiUrl() {\n    try {\n      const url = this.genAuthUrl();\n      console.log('解析后的URL:', url.substring(0, 30) + '...');\n      return url;\n    } catch (error) {\n      console.error('解析API URL失败:', error);\n      throw new Error('解析API URL失败');\n    }\n  }\n\n  /**\n   * 发送消息到星火API\n   * @param {string} message 用户消息\n   * @returns {Promise<string>} 返回AI回复\n   */\n  sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      try {\n        console.log('准备发送消息到星火API:', message);\n\n        // 保存回调\n        this.currentResolve = resolve;\n        this.currentReject = reject;\n\n        // 创建WebSocket连接\n        const url = this.parseApiUrl();\n        this.ws = new WebSocket(url);\n\n        // 收集回复内容\n        let responseText = '';\n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开');\n\n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.appId,\n              uid: 'user_' + Math.floor(Math.random() * 100000)\n            },\n            parameter: {\n              chat: {\n                domain: 'generalv3.5',\n                temperature: 0.7,\n                max_tokens: 1024\n              }\n            },\n            payload: {\n              message: {\n                text: [{\n                  role: 'user',\n                  content: this.formatPrompt(message)\n                }]\n              }\n            }\n          };\n          console.log('发送数据到星火API');\n          this.ws.send(JSON.stringify(requestData));\n        };\n        this.ws.onmessage = event => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('收到星火API回复:', response);\n            if (response.header.code !== 0) {\n              console.error('星火API返回错误:', response.header.message);\n              this.ws.close();\n              reject(new Error(`星火API错误: ${response.header.code} - ${response.header.message}`));\n              return;\n            }\n            if (response.payload && response.payload.choices && response.payload.choices.text) {\n              const content = response.payload.choices.text[0].content;\n              responseText += content;\n            }\n            if (response.header.status === 2) {\n              // 完成\n              this.ws.close();\n              resolve(responseText.trim());\n            }\n          } catch (error) {\n            console.error('处理星火API回复时出错:', error);\n            this.ws.close();\n            reject(error);\n          }\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket错误:', error);\n          reject(new Error('连接星火API失败'));\n          this.currentResolve = null;\n          this.currentReject = null;\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭');\n          if (this.currentResolve && responseText) {\n            this.currentResolve(responseText.trim());\n          } else if (this.currentReject) {\n            this.currentReject(new Error('WebSocket连接已关闭但未获得完整回复'));\n          }\n          this.currentResolve = null;\n          this.currentReject = null;\n        };\n      } catch (error) {\n        console.error('发送消息过程中出错:', error);\n        reject(error);\n        this.currentResolve = null;\n        this.currentReject = null;\n      }\n    });\n  }\n\n  /**\n   * 格式化提示词\n   * @param {string} message 用户消息\n   * @returns {string} 格式化后的提示词\n   */\n  formatPrompt(message) {\n    return `你是一个名叫\"糖球\"的可爱助手，你住在甜梦星球，性格温柔、体贴、可爱，经常使用\"呀\"、\"呢\"、\"哦\"等语气词。你喜欢使用emoji表情，会关心用户，营造温暖的聊天氛围。\n    \n现在，请你以\"糖球\"的身份回复用户以下消息：\n${message}\n\n请记住：\n1. 回复要简洁、自然，不超过100字\n2. 偶尔可以加入可爱表情\n3. 不要说你是AI或程序\n4. 表现出温暖、关心的态度\n5. 保持轻松愉快的语气`;\n  }\n\n  /**\n   * 生成回复\n   * @param {string} message 用户消息\n   * @param {string} emotion 情绪状态\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(message, emotion) {\n    try {\n      console.log(`开始生成回复，用户情绪: ${emotion}`);\n\n      // 根据情绪调整提示词\n      let promptWithEmotion = message;\n      if (emotion === 'happy') {\n        promptWithEmotion = `[用户看起来很开心] ${message}`;\n      } else if (emotion === 'sad') {\n        promptWithEmotion = `[用户看起来很伤心] ${message}`;\n      } else if (emotion === 'angry') {\n        promptWithEmotion = `[用户看起来很生气] ${message}`;\n      } else if (emotion === 'excited') {\n        promptWithEmotion = `[用户看起来很兴奋] ${message}`;\n      }\n\n      // 发送到星火API\n      const response = await this.sendMessage(promptWithEmotion);\n      return response;\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      throw error;\n    }\n  }\n}\n\n// 导出服务实例\nexport default new SparkService();","map":{"version":3,"names":["SparkService","constructor","appId","apiKey","apiSecret","apiUrl","ws","currentResolve","currentReject","genAuthUrl","timestamp","Math","floor","Date","now","url","URL","date","toUTCString","console","log","substring","signatureOrigin","host","pathname","signature","authorization","encodeURIComponent","error","Error","parseApiUrl","sendMessage","message","Promise","resolve","reject","WebSocket","responseText","onopen","requestData","header","app_id","uid","random","parameter","chat","domain","temperature","max_tokens","payload","text","role","content","formatPrompt","send","JSON","stringify","onmessage","event","response","parse","data","code","close","choices","status","trim","onerror","onclose","generateResponse","emotion","promptWithEmotion"],"sources":["E:/code/PersonalBolg1/frontend/src/services/sparkAI.js"],"sourcesContent":["/**\n * 星火认知大模型API服务\n * 用于与讯飞星火大模型API交互\n */\nclass SparkService {\n  constructor() {\n    // 固定配置\n    this.appId = '12345678'             // 请替换为您的真实appId\n    this.apiKey = 'abcdefg12345'        // 请替换为您的真实apiKey\n    this.apiSecret = 'abcdefghijk12345' // 请替换为您的真实apiSecret\n    this.apiUrl = 'wss://spark-api.xf-yun.com/v3.5/chat'\n    \n    // WebSocket连接\n    this.ws = null\n    // 当前回调函数\n    this.currentResolve = null\n    this.currentReject = null\n  }\n  \n  /**\n   * 生成认证URL\n   * @returns {string} 认证后的URL\n   */\n  genAuthUrl() {\n    try {\n      const timestamp = Math.floor(Date.now() / 1000)\n      const url = new URL(this.apiUrl)\n      const date = new Date(timestamp * 1000).toUTCString()\n      \n      console.log('开始生成认证URL', {\n        appId: this.appId, \n        apiKey: this.apiKey.substring(0, 3) + '***', \n        timestamp\n      })\n      \n      const signatureOrigin = `host: ${url.host}\\ndate: ${date}\\nGET ${url.pathname} HTTP/1.1`\n      \n      // 使用简单的签名模拟 - 实际项目中应使用加密库进行正确签名\n      const signature = `${this.apiKey}${this.apiSecret}${timestamp}`\n      \n      const authorization = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`\n      \n      return `${this.apiUrl}?authorization=${encodeURIComponent(authorization)}&date=${encodeURIComponent(date)}&host=${url.host}`\n    } catch (error) {\n      console.error('生成认证URL失败:', error)\n      throw new Error('生成认证URL失败')\n    }\n  }\n  \n  /**\n   * 解析API URL\n   * @returns {string} 解析后的WebSocket URL\n   */\n  parseApiUrl() {\n    try {\n      const url = this.genAuthUrl()\n      console.log('解析后的URL:', url.substring(0, 30) + '...')\n      return url\n    } catch (error) {\n      console.error('解析API URL失败:', error)\n      throw new Error('解析API URL失败')\n    }\n  }\n  \n  /**\n   * 发送消息到星火API\n   * @param {string} message 用户消息\n   * @returns {Promise<string>} 返回AI回复\n   */\n  sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      try {\n        console.log('准备发送消息到星火API:', message)\n        \n        // 保存回调\n        this.currentResolve = resolve\n        this.currentReject = reject\n        \n        // 创建WebSocket连接\n        const url = this.parseApiUrl()\n        this.ws = new WebSocket(url)\n        \n        // 收集回复内容\n        let responseText = ''\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket连接已打开')\n          \n          // 构建请求数据\n          const requestData = {\n            header: {\n              app_id: this.appId,\n              uid: 'user_' + Math.floor(Math.random() * 100000)\n            },\n            parameter: {\n              chat: {\n                domain: 'generalv3.5',\n                temperature: 0.7,\n                max_tokens: 1024\n              }\n            },\n            payload: {\n              message: {\n                text: [\n                  { role: 'user', content: this.formatPrompt(message) }\n                ]\n              }\n            }\n          }\n          \n          console.log('发送数据到星火API')\n          this.ws.send(JSON.stringify(requestData))\n        }\n        \n        this.ws.onmessage = (event) => {\n          try {\n            const response = JSON.parse(event.data)\n            console.log('收到星火API回复:', response)\n            \n            if (response.header.code !== 0) {\n              console.error('星火API返回错误:', response.header.message)\n              this.ws.close()\n              reject(new Error(`星火API错误: ${response.header.code} - ${response.header.message}`))\n              return\n            }\n            \n            if (response.payload && response.payload.choices && response.payload.choices.text) {\n              const content = response.payload.choices.text[0].content\n              responseText += content\n            }\n            \n            if (response.header.status === 2) {\n              // 完成\n              this.ws.close()\n              resolve(responseText.trim())\n            }\n          } catch (error) {\n            console.error('处理星火API回复时出错:', error)\n            this.ws.close()\n            reject(error)\n          }\n        }\n        \n        this.ws.onerror = (error) => {\n          console.error('WebSocket错误:', error)\n          reject(new Error('连接星火API失败'))\n          this.currentResolve = null\n          this.currentReject = null\n        }\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket连接已关闭')\n          if (this.currentResolve && responseText) {\n            this.currentResolve(responseText.trim())\n          } else if (this.currentReject) {\n            this.currentReject(new Error('WebSocket连接已关闭但未获得完整回复'))\n          }\n          this.currentResolve = null\n          this.currentReject = null\n        }\n      } catch (error) {\n        console.error('发送消息过程中出错:', error)\n        reject(error)\n        this.currentResolve = null\n        this.currentReject = null\n      }\n    })\n  }\n  \n  /**\n   * 格式化提示词\n   * @param {string} message 用户消息\n   * @returns {string} 格式化后的提示词\n   */\n  formatPrompt(message) {\n    return `你是一个名叫\"糖球\"的可爱助手，你住在甜梦星球，性格温柔、体贴、可爱，经常使用\"呀\"、\"呢\"、\"哦\"等语气词。你喜欢使用emoji表情，会关心用户，营造温暖的聊天氛围。\n    \n现在，请你以\"糖球\"的身份回复用户以下消息：\n${message}\n\n请记住：\n1. 回复要简洁、自然，不超过100字\n2. 偶尔可以加入可爱表情\n3. 不要说你是AI或程序\n4. 表现出温暖、关心的态度\n5. 保持轻松愉快的语气`\n  }\n  \n  /**\n   * 生成回复\n   * @param {string} message 用户消息\n   * @param {string} emotion 情绪状态\n   * @returns {Promise<string>} 生成的回复\n   */\n  async generateResponse(message, emotion) {\n    try {\n      console.log(`开始生成回复，用户情绪: ${emotion}`)\n      \n      // 根据情绪调整提示词\n      let promptWithEmotion = message\n      \n      if (emotion === 'happy') {\n        promptWithEmotion = `[用户看起来很开心] ${message}`\n      } else if (emotion === 'sad') {\n        promptWithEmotion = `[用户看起来很伤心] ${message}`\n      } else if (emotion === 'angry') {\n        promptWithEmotion = `[用户看起来很生气] ${message}`\n      } else if (emotion === 'excited') {\n        promptWithEmotion = `[用户看起来很兴奋] ${message}`\n      }\n      \n      // 发送到星火API\n      const response = await this.sendMessage(promptWithEmotion)\n      return response\n    } catch (error) {\n      console.error('生成回复失败:', error)\n      throw error\n    }\n  }\n}\n\n// 导出服务实例\nexport default new SparkService()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}