{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SparkService from '@/services/sparkAI';\nimport WeatherService from '@/services/weather';\n\n// 初始化状态\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n};\n\n// Getters\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion,\n  weatherInfo: state => state.weatherInfo,\n  soundEffects: state => state.soundEffects\n};\n\n// Mutations\nconst mutations = {\n  // 添加消息\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message);\n  },\n  // 设置输入状态\n  SET_TYPING(state, status) {\n    state.isTyping = status;\n  },\n  // 改变当前情感\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion;\n  },\n  // 设置天气信息\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info;\n  },\n  // 切换声音效果\n  TOGGLE_SOUND(state, status) {\n    state.soundEffects = status;\n  },\n  // 清空消息\n  CLEAR_MESSAGES(state) {\n    state.messages = [];\n  }\n};\n\n// Actions\nconst actions = {\n  // 发送消息\n  async sendMessage({\n    commit,\n    state\n  }, {\n    content,\n    type = 'text'\n  }) {\n    try {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        sender: 'user',\n        content,\n        type,\n        timestamp: new Date()\n      });\n\n      // 设置机器人正在输入状态\n      commit('SET_TYPING', true);\n\n      // 分析用户情感\n      const emotion = analyzeEmotion(content);\n      commit('CHANGE_EMOTION', emotion);\n\n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(content);\n      let response = '';\n      if (isWeatherQuery) {\n        // 获取天气信息\n        try {\n          const weatherService = new WeatherService();\n          const weatherData = await weatherService.getNowWeather('北京');\n          const weatherDesc = weatherService.generateWeatherDescription(weatherData);\n          commit('SET_WEATHER_INFO', {\n            city: weatherData.city || '北京',\n            temperature: weatherData.temperature || '25',\n            weather: weatherData.weather || '晴',\n            description: weatherDesc\n          });\n          response = `根据最新天气预报，${weatherDesc}`;\n        } catch (error) {\n          console.error('获取天气信息失败:', error);\n          response = '对不起，我无法获取天气信息，请稍后再试。';\n        }\n      } else {\n        try {\n          // 使用AI服务生成回复\n          response = await SparkService.generateResponse(content, emotion);\n        } catch (error) {\n          console.error('AI服务生成回复失败:', error);\n          // 使用本地生成的回复作为备选\n          response = generateResponse(content, emotion);\n        }\n      }\n\n      // 延迟添加机器人回复，模拟思考时间\n      setTimeout(() => {\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: response,\n          type: 'text',\n          timestamp: new Date()\n        });\n\n        // 设置机器人输入完成状态\n        commit('SET_TYPING', false);\n      }, 1000);\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      commit('SET_TYPING', false);\n    }\n  },\n  // 清空聊天记录\n  clearChat({\n    commit\n  }) {\n    commit('CLEAR_MESSAGES');\n  }\n};\n\n// 分析用户情感\nfunction analyzeEmotion(message) {\n  // 定义情感关键词\n  const emotionKeywords = {\n    happy: [/开心/, /高兴/, /快乐/, /太棒了/, /哈哈/, /哇[哦偶]/, /棒/, /喜欢/, /好耶/, /太好了/],\n    sad: [/难过/, /悲伤/, /伤心/, /痛苦/, /失望/, /哭/, /唉/, /叹气/, /不开心/, /不快乐/, /沮丧/],\n    angry: [/生气/, /愤怒/, /恼火/, /讨厌/, /烦/, /滚/, /恨/, /气死/, /可恶/, /烂/],\n    surprised: [/惊讶/, /震惊/, /吃惊/, /难以置信/, /不会吧/, /真的吗/, /啊{2,}/, /哇{2,}/],\n    scared: [/害怕/, /恐惧/, /担心/, /紧张/, /焦虑/, /怕/, /吓/, /可怕/]\n  };\n\n  // 检查消息中的情感关键词\n  for (const [emotion, patterns] of Object.entries(emotionKeywords)) {\n    for (const pattern of patterns) {\n      if (pattern.test(message)) {\n        return emotion;\n      }\n    }\n  }\n\n  // 默认情感为中性\n  return 'neutral';\n}\n\n// 检查是否是天气相关查询\nfunction checkForWeatherQuery(message) {\n  const weatherPatterns = [/天气/, /气温/, /下雨/, /下雪/, /温度/, /多少度/, /冷不冷/, /热不热/, /穿什么/];\n  for (const pattern of weatherPatterns) {\n    if (pattern.test(message)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// 本地生成回复（作为AI服务的备选）\nfunction generateResponse(message, emotion) {\n  // 基于情感的回复模板\n  const emotionResponses = {\n    happy: ['看到你这么开心，我也感到很高兴呢！(*^▽^*)', '你的好心情真是会传染，我也变得更加活力满满啦！', '开心的日子要一直继续下去哦！我会一直陪着你~'],\n    sad: ['不要难过啦，我会一直在这里陪着你的。(づ｡◕‿‿◕｡)づ', '听到你不开心，我也感到有点难过。需要我做什么让你心情好起来吗？', '抱抱你~无论遇到什么困难，记住都会过去的，明天会更好！'],\n    angry: ['深呼吸，慢慢来，不要生气哦。生气对身体不好的~', '看起来你有点不开心，要不要跟我聊聊发生了什么？', '我理解你的感受，有时候生活确实会让人很烦恼。但别担心，一切都会好的！'],\n    surprised: ['哇！看起来你遇到了什么令人惊讶的事情呢？', '这确实很令人吃惊呢！我也没想到会这样！', '真的吗？好神奇！我也感到很惊讶呢！'],\n    scared: ['不要害怕，我在这里陪着你呢。(っ´▽｀)っ', '一切都会好起来的，不用担心。', '害怕是正常的，但记住你很勇敢，能够克服一切困难！'],\n    neutral: ['嗨！有什么我可以帮到你的吗？', '我在听呢，请继续说吧~', '今天过得怎么样？有什么想和我分享的吗？', '有什么有趣的事情发生了吗？我很想听听！', '糖球助手随时为你服务哦！有什么需要我帮忙的吗？']\n  };\n\n  // 常见问题的回复\n  const commonResponses = {\n    '你好': ['你好啊！今天过得怎么样？', '嗨！很高兴见到你！', '你好呀~有什么我能帮到你的吗？'],\n    '你是谁': ['我是糖球助手，一个可爱的AI助手，随时为你服务！', '我叫糖球助手，是你的AI朋友~', '我是糖球助手，很高兴认识你！'],\n    '再见': ['再见啦！期待下次和你聊天~', '下次见哦！祝你有美好的一天！', '拜拜！随时欢迎你回来找我聊天哦~'],\n    '谢谢': ['不客气！能帮到你我很开心~', '不用谢！这是我应该做的~', '能帮到你我很高兴！还有什么需要我的地方吗？']\n  };\n\n  // 检查是否是常见问题\n  for (const [key, responses] of Object.entries(commonResponses)) {\n    if (message.includes(key)) {\n      return responses[Math.floor(Math.random() * responses.length)];\n    }\n  }\n\n  // 根据情感选择回复\n  const emotionBasedResponses = emotionResponses[emotion] || emotionResponses.neutral;\n  return emotionBasedResponses[Math.floor(Math.random() * emotionBasedResponses.length)];\n}\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["SparkService","WeatherService","state","messages","isTyping","currentEmotion","weatherInfo","soundEffects","getters","allMessages","mutations","ADD_MESSAGE","message","push","SET_TYPING","status","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND","CLEAR_MESSAGES","actions","sendMessage","commit","content","type","id","Date","now","sender","timestamp","analyzeEmotion","isWeatherQuery","checkForWeatherQuery","response","weatherService","weatherData","getNowWeather","weatherDesc","generateWeatherDescription","city","temperature","weather","description","error","console","generateResponse","setTimeout","clearChat","emotionKeywords","happy","sad","angry","surprised","scared","patterns","Object","entries","pattern","test","weatherPatterns","emotionResponses","neutral","commonResponses","key","responses","includes","Math","floor","random","length","emotionBasedResponses","namespaced"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\nimport WeatherService from '@/services/weather'\n\n// 初始化状态\nconst state = {\n  messages: [],\n  isTyping: false,\n  currentEmotion: 'neutral',\n  weatherInfo: null,\n  soundEffects: true\n}\n\n// Getters\nconst getters = {\n  allMessages: state => state.messages,\n  isTyping: state => state.isTyping,\n  currentEmotion: state => state.currentEmotion,\n  weatherInfo: state => state.weatherInfo,\n  soundEffects: state => state.soundEffects\n}\n\n// Mutations\nconst mutations = {\n  // 添加消息\n  ADD_MESSAGE(state, message) {\n    state.messages.push(message)\n  },\n  \n  // 设置输入状态\n  SET_TYPING(state, status) {\n    state.isTyping = status\n  },\n  \n  // 改变当前情感\n  CHANGE_EMOTION(state, emotion) {\n    state.currentEmotion = emotion\n  },\n  \n  // 设置天气信息\n  SET_WEATHER_INFO(state, info) {\n    state.weatherInfo = info\n  },\n  \n  // 切换声音效果\n  TOGGLE_SOUND(state, status) {\n    state.soundEffects = status\n  },\n  \n  // 清空消息\n  CLEAR_MESSAGES(state) {\n    state.messages = []\n  }\n}\n\n// Actions\nconst actions = {\n  // 发送消息\n  async sendMessage({ commit, state }, { content, type = 'text' }) {\n    try {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        sender: 'user',\n        content,\n        type,\n        timestamp: new Date()\n      })\n      \n      // 设置机器人正在输入状态\n      commit('SET_TYPING', true)\n      \n      // 分析用户情感\n      const emotion = analyzeEmotion(content)\n      commit('CHANGE_EMOTION', emotion)\n      \n      // 检查是否是天气相关查询\n      const isWeatherQuery = checkForWeatherQuery(content)\n      \n      let response = ''\n      \n      if (isWeatherQuery) {\n        // 获取天气信息\n        try {\n          const weatherService = new WeatherService()\n          const weatherData = await weatherService.getNowWeather('北京')\n          const weatherDesc = weatherService.generateWeatherDescription(weatherData)\n          \n          commit('SET_WEATHER_INFO', {\n            city: weatherData.city || '北京',\n            temperature: weatherData.temperature || '25',\n            weather: weatherData.weather || '晴',\n            description: weatherDesc\n          })\n          \n          response = `根据最新天气预报，${weatherDesc}`\n        } catch (error) {\n          console.error('获取天气信息失败:', error)\n          response = '对不起，我无法获取天气信息，请稍后再试。'\n        }\n      } else {\n        try {\n          // 使用AI服务生成回复\n          response = await SparkService.generateResponse(content, emotion)\n        } catch (error) {\n          console.error('AI服务生成回复失败:', error)\n          // 使用本地生成的回复作为备选\n          response = generateResponse(content, emotion)\n        }\n      }\n      \n      // 延迟添加机器人回复，模拟思考时间\n      setTimeout(() => {\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          sender: 'assistant',\n          content: response,\n          type: 'text',\n          timestamp: new Date()\n        })\n        \n        // 设置机器人输入完成状态\n        commit('SET_TYPING', false)\n      }, 1000)\n    } catch (error) {\n      console.error('发送消息失败:', error)\n      commit('SET_TYPING', false)\n    }\n  },\n  \n  // 清空聊天记录\n  clearChat({ commit }) {\n    commit('CLEAR_MESSAGES')\n  }\n}\n\n// 分析用户情感\nfunction analyzeEmotion(message) {\n  // 定义情感关键词\n  const emotionKeywords = {\n    happy: [/开心/, /高兴/, /快乐/, /太棒了/, /哈哈/, /哇[哦偶]/, /棒/, /喜欢/, /好耶/, /太好了/],\n    sad: [/难过/, /悲伤/, /伤心/, /痛苦/, /失望/, /哭/, /唉/, /叹气/, /不开心/, /不快乐/, /沮丧/],\n    angry: [/生气/, /愤怒/, /恼火/, /讨厌/, /烦/, /滚/, /恨/, /气死/, /可恶/, /烂/],\n    surprised: [/惊讶/, /震惊/, /吃惊/, /难以置信/, /不会吧/, /真的吗/, /啊{2,}/, /哇{2,}/],\n    scared: [/害怕/, /恐惧/, /担心/, /紧张/, /焦虑/, /怕/, /吓/, /可怕/]\n  }\n  \n  // 检查消息中的情感关键词\n  for (const [emotion, patterns] of Object.entries(emotionKeywords)) {\n    for (const pattern of patterns) {\n      if (pattern.test(message)) {\n        return emotion\n      }\n    }\n  }\n  \n  // 默认情感为中性\n  return 'neutral'\n}\n\n// 检查是否是天气相关查询\nfunction checkForWeatherQuery(message) {\n  const weatherPatterns = [\n    /天气/, /气温/, /下雨/, /下雪/, /温度/, /多少度/, /冷不冷/, /热不热/, /穿什么/\n  ]\n  \n  for (const pattern of weatherPatterns) {\n    if (pattern.test(message)) {\n      return true\n    }\n  }\n  \n  return false\n}\n\n// 本地生成回复（作为AI服务的备选）\nfunction generateResponse(message, emotion) {\n  // 基于情感的回复模板\n  const emotionResponses = {\n    happy: [\n      '看到你这么开心，我也感到很高兴呢！(*^▽^*)',\n      '你的好心情真是会传染，我也变得更加活力满满啦！',\n      '开心的日子要一直继续下去哦！我会一直陪着你~'\n    ],\n    sad: [\n      '不要难过啦，我会一直在这里陪着你的。(づ｡◕‿‿◕｡)づ',\n      '听到你不开心，我也感到有点难过。需要我做什么让你心情好起来吗？',\n      '抱抱你~无论遇到什么困难，记住都会过去的，明天会更好！'\n    ],\n    angry: [\n      '深呼吸，慢慢来，不要生气哦。生气对身体不好的~',\n      '看起来你有点不开心，要不要跟我聊聊发生了什么？',\n      '我理解你的感受，有时候生活确实会让人很烦恼。但别担心，一切都会好的！'\n    ],\n    surprised: [\n      '哇！看起来你遇到了什么令人惊讶的事情呢？',\n      '这确实很令人吃惊呢！我也没想到会这样！',\n      '真的吗？好神奇！我也感到很惊讶呢！'\n    ],\n    scared: [\n      '不要害怕，我在这里陪着你呢。(っ´▽｀)っ',\n      '一切都会好起来的，不用担心。',\n      '害怕是正常的，但记住你很勇敢，能够克服一切困难！'\n    ],\n    neutral: [\n      '嗨！有什么我可以帮到你的吗？',\n      '我在听呢，请继续说吧~',\n      '今天过得怎么样？有什么想和我分享的吗？',\n      '有什么有趣的事情发生了吗？我很想听听！',\n      '糖球助手随时为你服务哦！有什么需要我帮忙的吗？'\n    ]\n  }\n  \n  // 常见问题的回复\n  const commonResponses = {\n    '你好': ['你好啊！今天过得怎么样？', '嗨！很高兴见到你！', '你好呀~有什么我能帮到你的吗？'],\n    '你是谁': ['我是糖球助手，一个可爱的AI助手，随时为你服务！', '我叫糖球助手，是你的AI朋友~', '我是糖球助手，很高兴认识你！'],\n    '再见': ['再见啦！期待下次和你聊天~', '下次见哦！祝你有美好的一天！', '拜拜！随时欢迎你回来找我聊天哦~'],\n    '谢谢': ['不客气！能帮到你我很开心~', '不用谢！这是我应该做的~', '能帮到你我很高兴！还有什么需要我的地方吗？']\n  }\n  \n  // 检查是否是常见问题\n  for (const [key, responses] of Object.entries(commonResponses)) {\n    if (message.includes(key)) {\n      return responses[Math.floor(Math.random() * responses.length)]\n    }\n  }\n  \n  // 根据情感选择回复\n  const emotionBasedResponses = emotionResponses[emotion] || emotionResponses.neutral\n  return emotionBasedResponses[Math.floor(Math.random() * emotionBasedResponses.length)]\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}