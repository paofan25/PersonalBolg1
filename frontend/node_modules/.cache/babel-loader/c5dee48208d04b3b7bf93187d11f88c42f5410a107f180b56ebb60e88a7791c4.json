{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nclass WeatherService {\n  constructor() {\n    // 使用开发者key和host\n    this.apiKey = 'b0d94d2b6a3649f69eaef381a2e9841b'; // 使用可用的API key\n    this.baseUrl = 'https://devapi.qweather.com/v7'; // 使用devapi开头的URL\n\n    // 城市映射表\n    this.cities = {\n      '南京': '101190101',\n      '上海': '101020100',\n      '北京': '101010100',\n      '广州': '101280101',\n      '深圳': '101280601',\n      '杭州': '101210101',\n      '武汉': '101200101',\n      '成都': '101270101',\n      '重庆': '101040100',\n      '西安': '101110101',\n      '苏州': '101190401',\n      '天津': '101030100',\n      '南通': '101190501',\n      '青岛': '101120201',\n      '大连': '101070201',\n      '沈阳': '101070101',\n      '哈尔滨': '101050101',\n      '长春': '101060101'\n    };\n\n    // 默认城市\n    this.defaultCity = {\n      id: '101190101',\n      name: '南京'\n    };\n    console.log('WeatherService initialized');\n  }\n\n  // 获取当前天气\n  async getNowWeather(cityName = null) {\n    try {\n      console.log('Getting weather for city:', cityName);\n\n      // 如果传入了城市名，尝试获取对应的城市ID\n      let cityId;\n      let city;\n      if (cityName) {\n        // 直接查找完全匹配的城市\n        if (this.cities[cityName]) {\n          cityId = this.cities[cityName];\n          city = cityName;\n        } else {\n          // 如果没有完全匹配，尝试部分匹配\n          for (const [name, id] of Object.entries(this.cities)) {\n            if (name.includes(cityName) || cityName.includes(name)) {\n              cityId = id;\n              city = name;\n              break;\n            }\n          }\n        }\n      }\n\n      // 如果没有找到匹配的城市，使用默认城市\n      if (!cityId) {\n        cityId = this.defaultCity.id;\n        city = this.defaultCity.name;\n        console.log(`未找到城市\"${cityName}\"，使用默认城市：${city}`);\n      } else {\n        console.log(`找到匹配的城市：${city}，ID：${cityId}`);\n      }\n\n      // 使用模拟数据代替API调用，避免403错误\n      return this.getMockWeatherData(city);\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather(cityName || this.defaultCity.name);\n    }\n  }\n\n  // 获取模拟天气数据\n  getMockWeatherData(cityName) {\n    // 根据城市名生成一些随机但合理的天气数据\n    const now = new Date();\n    const updateTime = now.toISOString();\n    const temp = Math.floor(20 + Math.random() * 15); // 20-35度之间的随机温度\n\n    // 为不同城市设置不同的天气描述\n    const weatherTypes = ['晴', '多云', '阴', '小雨', '中雨'];\n    // 使用城市名的ASCII码和日期来确定天气，这样同一天同一城市天气保持一致\n    const cityCode = cityName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const dayOfYear = Math.floor((now - new Date(now.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\n    const weatherIndex = (cityCode + dayOfYear) % weatherTypes.length;\n    const description = weatherTypes[weatherIndex];\n\n    // 根据描述确定condition\n    let condition;\n    if (description.includes('晴')) condition = 'sunny';else if (description.includes('雨')) condition = 'rainy';else if (description.includes('云')) condition = 'cloudy';else condition = 'cloudy';\n\n    // 构建结果\n    return {\n      temperature: temp.toString(),\n      condition: condition,\n      description: description,\n      cityName: cityName,\n      updateTime: updateTime,\n      windDir: '东南风',\n      windScale: '3',\n      humidity: (50 + Math.floor(Math.random() * 30)).toString(),\n      // 50-80%的随机湿度\n      visibility: '10'\n    };\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    if (!weather) {\n      return '抱歉，我无法获取天气信息。';\n    }\n    const {\n      temperature,\n      description,\n      cityName,\n      windDir,\n      windScale,\n      humidity\n    } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    // 构建完整的天气描述\n    let fullDescription = `${cityName}现在气温${temperature}°C，${description}。`;\n\n    // 添加风向和湿度信息\n    if (windDir && windScale) {\n      fullDescription += `\\n${windDir}${windScale}级，`;\n    }\n    if (humidity) {\n      fullDescription += `湿度${humidity}%。`;\n    }\n\n    // 添加建议\n    fullDescription += `\\n${suggestion}`;\n    return fullDescription;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather(cityName = '未知城市') {\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: cityName,\n      updateTime: new Date().toISOString(),\n      windDir: '东南风',\n      windScale: '3',\n      humidity: '70',\n      visibility: '10'\n    };\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","apiKey","baseUrl","cities","defaultCity","id","name","console","log","getNowWeather","cityName","cityId","city","Object","entries","includes","getMockWeatherData","error","getDefaultWeather","now","Date","updateTime","toISOString","temp","Math","floor","random","weatherTypes","cityCode","split","reduce","acc","char","charCodeAt","dayOfYear","getFullYear","weatherIndex","length","description","condition","temperature","toString","windDir","windScale","humidity","visibility","generateWeatherDescription","weather","suggestion","parseInt","fullDescription","getWeatherCondition","icon","conditions","sunny","cloudy","rainy","snowy","foggy","icons"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\n  constructor() {\n    // 使用开发者key和host\n    this.apiKey = 'b0d94d2b6a3649f69eaef381a2e9841b'; // 使用可用的API key\n    this.baseUrl = 'https://devapi.qweather.com/v7'; // 使用devapi开头的URL\n    \n    // 城市映射表\n    this.cities = {\n      '南京': '101190101',\n      '上海': '101020100',\n      '北京': '101010100',\n      '广州': '101280101',\n      '深圳': '101280601',\n      '杭州': '101210101',\n      '武汉': '101200101',\n      '成都': '101270101',\n      '重庆': '101040100',\n      '西安': '101110101',\n      '苏州': '101190401',\n      '天津': '101030100',\n      '南通': '101190501',\n      '青岛': '101120201',\n      '大连': '101070201',\n      '沈阳': '101070101',\n      '哈尔滨': '101050101',\n      '长春': '101060101'\n    };\n    \n    // 默认城市\n    this.defaultCity = { id: '101190101', name: '南京' };\n\n    console.log('WeatherService initialized');\n  }\n\n  // 获取当前天气\n  async getNowWeather(cityName = null) {\n    try {\n      console.log('Getting weather for city:', cityName);\n      \n      // 如果传入了城市名，尝试获取对应的城市ID\n      let cityId;\n      let city;\n      \n      if (cityName) {\n        // 直接查找完全匹配的城市\n        if (this.cities[cityName]) {\n          cityId = this.cities[cityName];\n          city = cityName;\n        } else {\n          // 如果没有完全匹配，尝试部分匹配\n          for (const [name, id] of Object.entries(this.cities)) {\n            if (name.includes(cityName) || cityName.includes(name)) {\n              cityId = id;\n              city = name;\n              break;\n            }\n          }\n        }\n      }\n      \n      // 如果没有找到匹配的城市，使用默认城市\n      if (!cityId) {\n        cityId = this.defaultCity.id;\n        city = this.defaultCity.name;\n        console.log(`未找到城市\"${cityName}\"，使用默认城市：${city}`);\n      } else {\n        console.log(`找到匹配的城市：${city}，ID：${cityId}`);\n      }\n\n      // 使用模拟数据代替API调用，避免403错误\n      return this.getMockWeatherData(city);\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather(cityName || this.defaultCity.name);\n    }\n  }\n  \n  // 获取模拟天气数据\n  getMockWeatherData(cityName) {\n    // 根据城市名生成一些随机但合理的天气数据\n    const now = new Date();\n    const updateTime = now.toISOString();\n    const temp = Math.floor(20 + Math.random() * 15); // 20-35度之间的随机温度\n    \n    // 为不同城市设置不同的天气描述\n    const weatherTypes = ['晴', '多云', '阴', '小雨', '中雨'];\n    // 使用城市名的ASCII码和日期来确定天气，这样同一天同一城市天气保持一致\n    const cityCode = cityName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const dayOfYear = Math.floor((now - new Date(now.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\n    const weatherIndex = (cityCode + dayOfYear) % weatherTypes.length;\n    const description = weatherTypes[weatherIndex];\n    \n    // 根据描述确定condition\n    let condition;\n    if (description.includes('晴')) condition = 'sunny';\n    else if (description.includes('雨')) condition = 'rainy';\n    else if (description.includes('云')) condition = 'cloudy';\n    else condition = 'cloudy';\n    \n    // 构建结果\n    return {\n      temperature: temp.toString(),\n      condition: condition,\n      description: description,\n      cityName: cityName,\n      updateTime: updateTime,\n      windDir: '东南风',\n      windScale: '3',\n      humidity: (50 + Math.floor(Math.random() * 30)).toString(), // 50-80%的随机湿度\n      visibility: '10'\n    };\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    if (!weather) {\n      return '抱歉，我无法获取天气信息。';\n    }\n    \n    const { temperature, description, cityName, windDir, windScale, humidity } = weather;\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n\n    // 构建完整的天气描述\n    let fullDescription = `${cityName}现在气温${temperature}°C，${description}。`;\n    \n    // 添加风向和湿度信息\n    if (windDir && windScale) {\n      fullDescription += `\\n${windDir}${windScale}级，`;\n    }\n    \n    if (humidity) {\n      fullDescription += `湿度${humidity}%。`;\n    }\n    \n    // 添加建议\n    fullDescription += `\\n${suggestion}`;\n\n    return fullDescription;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather(cityName = '未知城市') {\n    return {\n      temperature: 25,\n      condition: 'cloudy',\n      description: '多云',\n      cityName: cityName,\n      updateTime: new Date().toISOString(),\n      windDir: '东南风',\n      windScale: '3',\n      humidity: '70',\n      visibility: '10'\n    };\n  }\n}\n\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}