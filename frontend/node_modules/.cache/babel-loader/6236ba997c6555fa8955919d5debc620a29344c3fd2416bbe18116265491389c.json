{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport weatherService from './weather';\nimport xfyunService from './xfyun';\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    // 天气查询正则表达式\n    this.weatherRegex = /^(.+?)天气$/;\n    // 本地天气关键词\n    this.localWeatherKeywords = ['这里', '当前', '本地', '这儿'];\n  }\n\n  // 分析用户输入的情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('开始分析情绪:', text);\n\n      // 使用讯飞API进行情绪分析\n      const prompt = `请分析以下文本的情绪，只返回一个词：\"happy\"、\"sad\"、\"worried\"、\"excited\"或\"neutral\"，不要返回其他内容。\\n文本：${text}`;\n      const response = await xfyunService.sendMessage(prompt);\n      console.log('情绪分析结果:', response);\n      const emotion = response.trim().toLowerCase();\n\n      // 确保返回的是有效的情绪类型\n      const validEmotions = ['happy', 'sad', 'worried', 'excited', 'neutral'];\n      return validEmotions.includes(emotion) ? emotion : 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n\n  // 处理天气查询\n  async handleWeatherQuery(text) {\n    try {\n      console.log('处理天气查询:', text);\n      let weatherData;\n      let cityName;\n\n      // 检查是否是查询本地天气\n      if (this.isLocalWeatherQuery(text)) {\n        console.log('查询本地天气');\n        weatherData = await weatherService.getLocationWeather();\n        cityName = weatherData.cityName;\n      } else {\n        // 尝试匹配城市名\n        const match = text.match(this.weatherRegex);\n        if (match) {\n          cityName = match[1];\n          console.log('查询指定城市天气:', cityName);\n          weatherData = await weatherService.getCityWeather(cityName);\n        } else {\n          throw new Error('无法识别城市名');\n        }\n      }\n\n      // 生成天气描述\n      const description = weatherService.generateWeatherDescription(weatherData);\n      return {\n        type: 'weather',\n        text: description,\n        data: weatherData\n      };\n    } catch (error) {\n      console.error('天气查询失败:', error);\n      return {\n        type: 'error',\n        text: error.message || '抱歉，获取天气信息失败了...'\n      };\n    }\n  }\n\n  // 检查是否是本地天气查询\n  isLocalWeatherQuery(text) {\n    return this.localWeatherKeywords.some(keyword => text.includes(keyword));\n  }\n\n  // 生成回复\n  async generateResponse(text, emotion) {\n    try {\n      console.log('开始生成回复:', {\n        text,\n        emotion\n      });\n\n      // 首先检查是否是天气查询\n      if (this.isWeatherQuery(text)) {\n        return await this.handleWeatherQuery(text);\n      }\n\n      // 使用讯飞API生成回复\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下要求回复：\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(◕‿◕✿)\n3. 回复长度控制在100字以内\n4. 当前用户情绪：${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说：${text}`;\n      console.log('发送到讯飞的提示词:', prompt);\n      const response = await xfyunService.sendMessage(prompt);\n      console.log('讯飞返回的回复:', response);\n\n      // 根据情绪添加互动动作\n      const actions = this.generateActions(emotion);\n      return {\n        type: 'chat',\n        text: response,\n        actions\n      };\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      return {\n        type: 'error',\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)',\n        actions: []\n      };\n    }\n  }\n\n  // 检查是否是天气相关询问\n  isWeatherQuery(text) {\n    return this.weatherRegex.test(text) || this.localWeatherKeywords.some(keyword => text.includes(keyword) && text.includes('天气'));\n  }\n\n  // 根据情绪生成互动动作\n  generateActions(emotion) {\n    const actions = [];\n    switch (emotion) {\n      case 'happy':\n        actions.push({\n          type: 'animation',\n          name: 'bounce'\n        }, {\n          type: 'sound',\n          sound: 'purr'\n        });\n        break;\n      case 'sad':\n        actions.push({\n          type: 'sound',\n          sound: 'rain'\n        }, {\n          type: 'animation',\n          name: 'float'\n        });\n        break;\n      case 'worried':\n        actions.push({\n          type: 'animation',\n          name: 'wave'\n        }, {\n          type: 'sound',\n          sound: 'music'\n        });\n        break;\n      case 'excited':\n        actions.push({\n          type: 'animation',\n          name: 'spin'\n        }, {\n          type: 'sound',\n          sound: 'purr'\n        });\n        break;\n      case 'neutral':\n        actions.push({\n          type: 'animation',\n          name: 'float'\n        });\n        break;\n    }\n    return actions;\n  }\n}\nexport default new ChatService();","map":{"version":3,"names":["weatherService","xfyunService","ChatService","constructor","messages","weatherRegex","localWeatherKeywords","analyzeEmotion","text","console","log","prompt","response","sendMessage","emotion","trim","toLowerCase","validEmotions","includes","error","handleWeatherQuery","weatherData","cityName","isLocalWeatherQuery","getLocationWeather","match","getCityWeather","Error","description","generateWeatherDescription","type","data","message","some","keyword","generateResponse","isWeatherQuery","actions","generateActions","test","push","name","sound"],"sources":["E:/code/PersonalBolg1/frontend/src/services/chat.js"],"sourcesContent":["import weatherService from './weather';\nimport xfyunService from './xfyun';\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    // 天气查询正则表达式\n    this.weatherRegex = /^(.+?)天气$/;\n    // 本地天气关键词\n    this.localWeatherKeywords = ['这里', '当前', '本地', '这儿'];\n  }\n\n  // 分析用户输入的情绪\n  async analyzeEmotion(text) {\n    try {\n      console.log('开始分析情绪:', text);\n      \n      // 使用讯飞API进行情绪分析\n      const prompt = `请分析以下文本的情绪，只返回一个词：\"happy\"、\"sad\"、\"worried\"、\"excited\"或\"neutral\"，不要返回其他内容。\\n文本：${text}`;\n      const response = await xfyunService.sendMessage(prompt);\n      console.log('情绪分析结果:', response);\n      \n      const emotion = response.trim().toLowerCase();\n      \n      // 确保返回的是有效的情绪类型\n      const validEmotions = ['happy', 'sad', 'worried', 'excited', 'neutral'];\n      return validEmotions.includes(emotion) ? emotion : 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n\n  // 处理天气查询\n  async handleWeatherQuery(text) {\n    try {\n      console.log('处理天气查询:', text);\n      \n      let weatherData;\n      let cityName;\n\n      // 检查是否是查询本地天气\n      if (this.isLocalWeatherQuery(text)) {\n        console.log('查询本地天气');\n        weatherData = await weatherService.getLocationWeather();\n        cityName = weatherData.cityName;\n      } else {\n        // 尝试匹配城市名\n        const match = text.match(this.weatherRegex);\n        if (match) {\n          cityName = match[1];\n          console.log('查询指定城市天气:', cityName);\n          weatherData = await weatherService.getCityWeather(cityName);\n        } else {\n          throw new Error('无法识别城市名');\n        }\n      }\n\n      // 生成天气描述\n      const description = weatherService.generateWeatherDescription(weatherData);\n      \n      return {\n        type: 'weather',\n        text: description,\n        data: weatherData\n      };\n    } catch (error) {\n      console.error('天气查询失败:', error);\n      return {\n        type: 'error',\n        text: error.message || '抱歉，获取天气信息失败了...'\n      };\n    }\n  }\n\n  // 检查是否是本地天气查询\n  isLocalWeatherQuery(text) {\n    return this.localWeatherKeywords.some(keyword => text.includes(keyword));\n  }\n\n  // 生成回复\n  async generateResponse(text, emotion) {\n    try {\n      console.log('开始生成回复:', { text, emotion });\n      \n      // 首先检查是否是天气查询\n      if (this.isWeatherQuery(text)) {\n        return await this.handleWeatherQuery(text);\n      }\n\n      // 使用讯飞API生成回复\n      const prompt = `你是一个可爱的AI助手\"糖球\"，性格温柔活泼。请根据以下要求回复：\n1. 使用可爱、治愈的语气\n2. 每句话结尾加上可爱的颜文字，如(◕‿◕✿)\n3. 回复长度控制在100字以内\n4. 当前用户情绪：${emotion}，请相应调整回复语气\n5. 可以适当使用emoji表情\n\n用户说：${text}`;\n\n      console.log('发送到讯飞的提示词:', prompt);\n      const response = await xfyunService.sendMessage(prompt);\n      console.log('讯飞返回的回复:', response);\n\n      // 根据情绪添加互动动作\n      const actions = this.generateActions(emotion);\n\n      return {\n        type: 'chat',\n        text: response,\n        actions\n      };\n    } catch (error) {\n      console.error('生成回复失败:', error);\n      return {\n        type: 'error',\n        text: '啊哦，我好像遇到了一点小问题... (｡•́︿•̀｡)',\n        actions: []\n      };\n    }\n  }\n\n  // 检查是否是天气相关询问\n  isWeatherQuery(text) {\n    return this.weatherRegex.test(text) || \n           this.localWeatherKeywords.some(keyword => text.includes(keyword) && text.includes('天气'));\n  }\n\n  // 根据情绪生成互动动作\n  generateActions(emotion) {\n    const actions = [];\n\n    switch (emotion) {\n      case 'happy':\n        actions.push(\n          { type: 'animation', name: 'bounce' },\n          { type: 'sound', sound: 'purr' }\n        );\n        break;\n      case 'sad':\n        actions.push(\n          { type: 'sound', sound: 'rain' },\n          { type: 'animation', name: 'float' }\n        );\n        break;\n      case 'worried':\n        actions.push(\n          { type: 'animation', name: 'wave' },\n          { type: 'sound', sound: 'music' }\n        );\n        break;\n      case 'excited':\n        actions.push(\n          { type: 'animation', name: 'spin' },\n          { type: 'sound', sound: 'purr' }\n        );\n        break;\n      case 'neutral':\n        actions.push(\n          { type: 'animation', name: 'float' }\n        );\n        break;\n    }\n\n    return actions;\n  }\n}\n\nexport default new ChatService();"],"mappings":";;;AAAA,OAAOA,cAAc,MAAM,WAAW;AACtC,OAAOC,YAAY,MAAM,SAAS;AAElC,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB;IACA,IAAI,CAACC,YAAY,GAAG,WAAW;IAC/B;IACA,IAAI,CAACC,oBAAoB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACtD;;EAEA;EACA,MAAMC,cAAcA,CAACC,IAAI,EAAE;IACzB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,IAAI,CAAC;;MAE5B;MACA,MAAMG,MAAM,GAAG,+EAA+EH,IAAI,EAAE;MACpG,MAAMI,QAAQ,GAAG,MAAMX,YAAY,CAACY,WAAW,CAACF,MAAM,CAAC;MACvDF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,QAAQ,CAAC;MAEhC,MAAME,OAAO,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE7C;MACA,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MACvE,OAAOA,aAAa,CAACC,QAAQ,CAACJ,OAAO,CAAC,GAAGA,OAAO,GAAG,SAAS;IAC9D,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,SAAS;IAClB;EACF;;EAEA;EACA,MAAMC,kBAAkBA,CAACZ,IAAI,EAAE;IAC7B,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,IAAI,CAAC;MAE5B,IAAIa,WAAW;MACf,IAAIC,QAAQ;;MAEZ;MACA,IAAI,IAAI,CAACC,mBAAmB,CAACf,IAAI,CAAC,EAAE;QAClCC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrBW,WAAW,GAAG,MAAMrB,cAAc,CAACwB,kBAAkB,CAAC,CAAC;QACvDF,QAAQ,GAAGD,WAAW,CAACC,QAAQ;MACjC,CAAC,MAAM;QACL;QACA,MAAMG,KAAK,GAAGjB,IAAI,CAACiB,KAAK,CAAC,IAAI,CAACpB,YAAY,CAAC;QAC3C,IAAIoB,KAAK,EAAE;UACTH,QAAQ,GAAGG,KAAK,CAAC,CAAC,CAAC;UACnBhB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEY,QAAQ,CAAC;UAClCD,WAAW,GAAG,MAAMrB,cAAc,CAAC0B,cAAc,CAACJ,QAAQ,CAAC;QAC7D,CAAC,MAAM;UACL,MAAM,IAAIK,KAAK,CAAC,SAAS,CAAC;QAC5B;MACF;;MAEA;MACA,MAAMC,WAAW,GAAG5B,cAAc,CAAC6B,0BAA0B,CAACR,WAAW,CAAC;MAE1E,OAAO;QACLS,IAAI,EAAE,SAAS;QACftB,IAAI,EAAEoB,WAAW;QACjBG,IAAI,EAAEV;MACR,CAAC;IACH,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO;QACLW,IAAI,EAAE,OAAO;QACbtB,IAAI,EAAEW,KAAK,CAACa,OAAO,IAAI;MACzB,CAAC;IACH;EACF;;EAEA;EACAT,mBAAmBA,CAACf,IAAI,EAAE;IACxB,OAAO,IAAI,CAACF,oBAAoB,CAAC2B,IAAI,CAACC,OAAO,IAAI1B,IAAI,CAACU,QAAQ,CAACgB,OAAO,CAAC,CAAC;EAC1E;;EAEA;EACA,MAAMC,gBAAgBA,CAAC3B,IAAI,EAAEM,OAAO,EAAE;IACpC,IAAI;MACFL,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE;QAAEF,IAAI;QAAEM;MAAQ,CAAC,CAAC;;MAEzC;MACA,IAAI,IAAI,CAACsB,cAAc,CAAC5B,IAAI,CAAC,EAAE;QAC7B,OAAO,MAAM,IAAI,CAACY,kBAAkB,CAACZ,IAAI,CAAC;MAC5C;;MAEA;MACA,MAAMG,MAAM,GAAG;AACrB;AACA;AACA;AACA,YAAYG,OAAO;AACnB;AACA;AACA,MAAMN,IAAI,EAAE;MAENC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,MAAM,CAAC;MACjC,MAAMC,QAAQ,GAAG,MAAMX,YAAY,CAACY,WAAW,CAACF,MAAM,CAAC;MACvDF,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEE,QAAQ,CAAC;;MAEjC;MACA,MAAMyB,OAAO,GAAG,IAAI,CAACC,eAAe,CAACxB,OAAO,CAAC;MAE7C,OAAO;QACLgB,IAAI,EAAE,MAAM;QACZtB,IAAI,EAAEI,QAAQ;QACdyB;MACF,CAAC;IACH,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO;QACLW,IAAI,EAAE,OAAO;QACbtB,IAAI,EAAE,6BAA6B;QACnC6B,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;EACAD,cAAcA,CAAC5B,IAAI,EAAE;IACnB,OAAO,IAAI,CAACH,YAAY,CAACkC,IAAI,CAAC/B,IAAI,CAAC,IAC5B,IAAI,CAACF,oBAAoB,CAAC2B,IAAI,CAACC,OAAO,IAAI1B,IAAI,CAACU,QAAQ,CAACgB,OAAO,CAAC,IAAI1B,IAAI,CAACU,QAAQ,CAAC,IAAI,CAAC,CAAC;EACjG;;EAEA;EACAoB,eAAeA,CAACxB,OAAO,EAAE;IACvB,MAAMuB,OAAO,GAAG,EAAE;IAElB,QAAQvB,OAAO;MACb,KAAK,OAAO;QACVuB,OAAO,CAACG,IAAI,CACV;UAAEV,IAAI,EAAE,WAAW;UAAEW,IAAI,EAAE;QAAS,CAAC,EACrC;UAAEX,IAAI,EAAE,OAAO;UAAEY,KAAK,EAAE;QAAO,CACjC,CAAC;QACD;MACF,KAAK,KAAK;QACRL,OAAO,CAACG,IAAI,CACV;UAAEV,IAAI,EAAE,OAAO;UAAEY,KAAK,EAAE;QAAO,CAAC,EAChC;UAAEZ,IAAI,EAAE,WAAW;UAAEW,IAAI,EAAE;QAAQ,CACrC,CAAC;QACD;MACF,KAAK,SAAS;QACZJ,OAAO,CAACG,IAAI,CACV;UAAEV,IAAI,EAAE,WAAW;UAAEW,IAAI,EAAE;QAAO,CAAC,EACnC;UAAEX,IAAI,EAAE,OAAO;UAAEY,KAAK,EAAE;QAAQ,CAClC,CAAC;QACD;MACF,KAAK,SAAS;QACZL,OAAO,CAACG,IAAI,CACV;UAAEV,IAAI,EAAE,WAAW;UAAEW,IAAI,EAAE;QAAO,CAAC,EACnC;UAAEX,IAAI,EAAE,OAAO;UAAEY,KAAK,EAAE;QAAO,CACjC,CAAC;QACD;MACF,KAAK,SAAS;QACZL,OAAO,CAACG,IAAI,CACV;UAAEV,IAAI,EAAE,WAAW;UAAEW,IAAI,EAAE;QAAQ,CACrC,CAAC;QACD;IACJ;IAEA,OAAOJ,OAAO;EAChB;AACF;AAEA,eAAe,IAAInC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}