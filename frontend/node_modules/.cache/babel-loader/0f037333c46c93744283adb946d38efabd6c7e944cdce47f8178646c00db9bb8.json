{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SparkService from '@/services/sparkAI';\n\n// 聊天模块\nconst chat = {\n  namespaced: true,\n  state: {\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'neutral',\n    weatherInfo: null,\n    soundEffects: true\n  },\n  getters: {\n    allMessages: state => state.messages,\n    isTyping: state => state.isTyping,\n    currentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message);\n    },\n    SET_TYPING(state, status) {\n      state.isTyping = status;\n    },\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info;\n    },\n    TOGGLE_SOUND_EFFECTS(state, status) {\n      state.soundEffects = status;\n    },\n    CLEAR_MESSAGES(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    async sendMessage({\n      commit,\n      state\n    }, {\n      content,\n      sender = 'user'\n    }) {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        content,\n        sender,\n        timestamp: new Date().getTime()\n      });\n\n      // 分析情感\n      const emotion = analyzeEmotion(content);\n      commit('CHANGE_EMOTION', emotion);\n\n      // 检查是否是天气查询\n      const isWeatherQuery = checkForWeatherQuery(content);\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo();\n        commit('SET_WEATHER_INFO', weatherInfo);\n      }\n\n      // 设置正在输入状态\n      commit('SET_TYPING', true);\n      try {\n        // 尝试通过AI服务获取回复\n        console.log('正在通过星火大模型生成回复...');\n        const aiResponse = await SparkService.generateResponse(content, emotion);\n\n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('SET_TYPING', false);\n          commit('ADD_MESSAGE', {\n            content: aiResponse,\n            sender: 'assistant',\n            emotion: state.currentEmotion,\n            timestamp: new Date().getTime()\n          });\n        }, 1000);\n      } catch (error) {\n        console.error('AI服务响应失败:', error);\n\n        // 回退到本地响应生成\n        const fallbackResponse = generateResponse(content, emotion);\n\n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('SET_TYPING', false);\n          commit('ADD_MESSAGE', {\n            content: fallbackResponse,\n            sender: 'assistant',\n            emotion: state.currentEmotion,\n            timestamp: new Date().getTime()\n          });\n        }, 1000);\n      }\n    },\n    clearChat({\n      commit\n    }) {\n      commit('CLEAR_MESSAGES');\n    }\n  }\n};\n\n/**\n * 分析用户消息的情感\n * @param {string} message 用户消息\n * @returns {string} 情感类型\n */\nfunction analyzeEmotion(message) {\n  // 情感关键词映射\n  const emotionKeywords = {\n    happy: ['开心', '高兴', '快乐', '棒', '好玩', '有趣', '哈哈', '嘻嘻', '笑', '喜欢', '爱', '感谢', '谢谢'],\n    sad: ['难过', '伤心', '悲伤', '痛苦', '失望', '哭', '不开心', '烦恼', '忧愁', '郁闷', '叹气'],\n    angry: ['生气', '愤怒', '讨厌', '恨', '烦躁', '恼火', '不爽', '破坏', '砸', '滚', '烦人', '可恶'],\n    surprised: ['惊讶', '震惊', '不敢相信', '哇', '啊', '真的吗', '天啊', '难以置信', '意外', '没想到'],\n    scared: ['害怕', '恐惧', '担心', '焦虑', '紧张', '可怕', '吓人', '危险', '担忧']\n  };\n\n  // 将用户消息转为小写并去除标点符号以便于匹配\n  const normalizedMessage = message.toLowerCase();\n\n  // 检查每种情感的关键词\n  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n    for (const keyword of keywords) {\n      if (normalizedMessage.includes(keyword)) {\n        return emotion;\n      }\n    }\n  }\n\n  // 默认情感为中性\n  return 'neutral';\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否是天气查询\n */\nfunction checkForWeatherQuery(message) {\n  const weatherKeywords = ['天气', '气温', '温度', '下雨', '晴天', '多云', '阴天', '雨天', '雪', '风', '热', '冷', '预报'];\n  for (const keyword of weatherKeywords) {\n    if (message.includes(keyword)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<object>} 天气信息对象\n */\nasync function getWeatherInfo() {\n  // 模拟API调用延迟\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // 模拟天气数据\n  const temperature = Math.floor(15 + Math.random() * 15); // 15-30°C\n  const conditions = ['晴朗', '多云', '阴天', '小雨', '大雨'][Math.floor(Math.random() * 5)];\n  const humidity = Math.floor(30 + Math.random() * 50); // 30-80%\n  const windSpeed = Math.floor(1 + Math.random() * 9); // 1-10 m/s\n\n  return {\n    temperature,\n    conditions,\n    humidity,\n    windSpeed,\n    description: `今天${conditions}，气温${temperature}°C，湿度${humidity}%，风速${windSpeed}m/s。`\n  };\n}\n\n/**\n * 生成本地回复（当AI服务不可用时）\n * @param {string} message 用户消息\n * @param {string} emotion 检测到的情感\n * @returns {string} 回复内容\n */\nfunction generateResponse(message, emotion) {\n  // 基于情感的回复模板\n  const responses = {\n    happy: ['很高兴看到你这么开心！(●ˊᵕˋ●)', '你的好心情真是会传染呢~(｡•ᴗ•｡)❤', '嘻嘻，糖球也被你的快乐感染啦！✧*。(ˊᗜˋ*)✧*。'],\n    sad: ['别难过，糖球会一直陪着你的。(つ ȥ ω ȥ )つ', '给你一个温暖的抱抱，一切都会好起来的~(っ*´∀`*)っ', '糖球在这里听你倾诉，需要什么都可以告诉我哦。(｡•ᴗ•｡)'],\n    angry: ['深呼吸，消消气，糖球陪你度过这个时刻。(o゜▽゜)o☆', '看起来你有点烦躁呢，有什么可以帮到你的吗？(ó﹏ò｡)', '生气的时候要记得放松自己哦，糖球给你送上舒缓音乐~♪(^∇^*)'],\n    surprised: ['哇！这确实很让人惊讶呢！(⊙ᗜ⊙)!', '糖球也被吓了一跳呢，真是太意外了！w(°ｏ°)w', '这真是个大发现呢！糖球和你一样惊讶！(≧▽≦)'],\n    scared: ['别害怕，糖球会保护你的！(｡•ᵕ•｡)', '没事的，一切都会好起来，糖球陪着你。(っ´ω`c)', '握住糖球的手，我们一起面对恐惧吧！(o´・∀・`o)'],\n    neutral: ['今天过得怎么样呀？糖球随时在这里陪你聊天哦！(●ˊᵕˋ●)', '有什么有趣的事情想和糖球分享吗？(｡•ᴗ•｡)', '无论你需要什么，糖球都会尽力帮助你的！(ﾉ´ヮ`)ﾉ*:･ﾟ✧']\n  };\n\n  // 根据情感类型选择回复模板\n  const emotionResponses = responses[emotion] || responses.neutral;\n  const randomIndex = Math.floor(Math.random() * emotionResponses.length);\n\n  // 返回回复内容\n  return emotionResponses[randomIndex];\n}\nexport default chat;","map":{"version":3,"names":["SparkService","chat","namespaced","state","messages","isTyping","currentEmotion","weatherInfo","soundEffects","getters","allMessages","mutations","ADD_MESSAGE","message","push","SET_TYPING","status","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND_EFFECTS","CLEAR_MESSAGES","actions","sendMessage","commit","content","sender","timestamp","Date","getTime","analyzeEmotion","isWeatherQuery","checkForWeatherQuery","getWeatherInfo","console","log","aiResponse","generateResponse","setTimeout","error","fallbackResponse","clearChat","emotionKeywords","happy","sad","angry","surprised","scared","normalizedMessage","toLowerCase","keywords","Object","entries","keyword","includes","weatherKeywords","Promise","resolve","temperature","Math","floor","random","conditions","humidity","windSpeed","description","responses","neutral","emotionResponses","randomIndex","length"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\n\n// 聊天模块\nconst chat = {\n  namespaced: true,\n  \n  state: {\n    messages: [],\n    isTyping: false,\n    currentEmotion: 'neutral',\n    weatherInfo: null,\n    soundEffects: true\n  },\n  \n  getters: {\n    allMessages: state => state.messages,\n    isTyping: state => state.isTyping,\n    currentEmotion: state => state.currentEmotion\n  },\n  \n  mutations: {\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message)\n    },\n    SET_TYPING(state, status) {\n      state.isTyping = status\n    },\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion\n    },\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info\n    },\n    TOGGLE_SOUND_EFFECTS(state, status) {\n      state.soundEffects = status\n    },\n    CLEAR_MESSAGES(state) {\n      state.messages = []\n    }\n  },\n  \n  actions: {\n    async sendMessage({ commit, state }, { content, sender = 'user' }) {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        content,\n        sender,\n        timestamp: new Date().getTime()\n      })\n      \n      // 分析情感\n      const emotion = analyzeEmotion(content)\n      commit('CHANGE_EMOTION', emotion)\n      \n      // 检查是否是天气查询\n      const isWeatherQuery = checkForWeatherQuery(content)\n      if (isWeatherQuery) {\n        const weatherInfo = await getWeatherInfo()\n        commit('SET_WEATHER_INFO', weatherInfo)\n      }\n      \n      // 设置正在输入状态\n      commit('SET_TYPING', true)\n      \n      try {\n        // 尝试通过AI服务获取回复\n        console.log('正在通过星火大模型生成回复...')\n        const aiResponse = await SparkService.generateResponse(content, emotion)\n        \n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('SET_TYPING', false)\n          commit('ADD_MESSAGE', {\n            content: aiResponse,\n            sender: 'assistant',\n            emotion: state.currentEmotion,\n            timestamp: new Date().getTime()\n          })\n        }, 1000)\n      } catch (error) {\n        console.error('AI服务响应失败:', error)\n        \n        // 回退到本地响应生成\n        const fallbackResponse = generateResponse(content, emotion)\n        \n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('SET_TYPING', false)\n          commit('ADD_MESSAGE', {\n            content: fallbackResponse,\n            sender: 'assistant',\n            emotion: state.currentEmotion,\n            timestamp: new Date().getTime()\n          })\n        }, 1000)\n      }\n    },\n    \n    clearChat({ commit }) {\n      commit('CLEAR_MESSAGES')\n    }\n  }\n}\n\n/**\n * 分析用户消息的情感\n * @param {string} message 用户消息\n * @returns {string} 情感类型\n */\nfunction analyzeEmotion(message) {\n  // 情感关键词映射\n  const emotionKeywords = {\n    happy: ['开心', '高兴', '快乐', '棒', '好玩', '有趣', '哈哈', '嘻嘻', '笑', '喜欢', '爱', '感谢', '谢谢'],\n    sad: ['难过', '伤心', '悲伤', '痛苦', '失望', '哭', '不开心', '烦恼', '忧愁', '郁闷', '叹气'],\n    angry: ['生气', '愤怒', '讨厌', '恨', '烦躁', '恼火', '不爽', '破坏', '砸', '滚', '烦人', '可恶'],\n    surprised: ['惊讶', '震惊', '不敢相信', '哇', '啊', '真的吗', '天啊', '难以置信', '意外', '没想到'],\n    scared: ['害怕', '恐惧', '担心', '焦虑', '紧张', '可怕', '吓人', '危险', '担忧']\n  }\n  \n  // 将用户消息转为小写并去除标点符号以便于匹配\n  const normalizedMessage = message.toLowerCase()\n  \n  // 检查每种情感的关键词\n  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n    for (const keyword of keywords) {\n      if (normalizedMessage.includes(keyword)) {\n        return emotion\n      }\n    }\n  }\n  \n  // 默认情感为中性\n  return 'neutral'\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否是天气查询\n */\nfunction checkForWeatherQuery(message) {\n  const weatherKeywords = ['天气', '气温', '温度', '下雨', '晴天', '多云', '阴天', '雨天', '雪', '风', '热', '冷', '预报']\n  \n  for (const keyword of weatherKeywords) {\n    if (message.includes(keyword)) {\n      return true\n    }\n  }\n  \n  return false\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<object>} 天气信息对象\n */\nasync function getWeatherInfo() {\n  // 模拟API调用延迟\n  await new Promise(resolve => setTimeout(resolve, 500))\n  \n  // 模拟天气数据\n  const temperature = Math.floor(15 + Math.random() * 15) // 15-30°C\n  const conditions = ['晴朗', '多云', '阴天', '小雨', '大雨'][Math.floor(Math.random() * 5)]\n  const humidity = Math.floor(30 + Math.random() * 50) // 30-80%\n  const windSpeed = Math.floor(1 + Math.random() * 9) // 1-10 m/s\n  \n  return {\n    temperature,\n    conditions,\n    humidity,\n    windSpeed,\n    description: `今天${conditions}，气温${temperature}°C，湿度${humidity}%，风速${windSpeed}m/s。`\n  }\n}\n\n/**\n * 生成本地回复（当AI服务不可用时）\n * @param {string} message 用户消息\n * @param {string} emotion 检测到的情感\n * @returns {string} 回复内容\n */\nfunction generateResponse(message, emotion) {\n  // 基于情感的回复模板\n  const responses = {\n    happy: [\n      '很高兴看到你这么开心！(●ˊᵕˋ●)',\n      '你的好心情真是会传染呢~(｡•ᴗ•｡)❤',\n      '嘻嘻，糖球也被你的快乐感染啦！✧*。(ˊᗜˋ*)✧*。'\n    ],\n    sad: [\n      '别难过，糖球会一直陪着你的。(つ ȥ ω ȥ )つ',\n      '给你一个温暖的抱抱，一切都会好起来的~(っ*´∀`*)っ',\n      '糖球在这里听你倾诉，需要什么都可以告诉我哦。(｡•ᴗ•｡)'\n    ],\n    angry: [\n      '深呼吸，消消气，糖球陪你度过这个时刻。(o゜▽゜)o☆',\n      '看起来你有点烦躁呢，有什么可以帮到你的吗？(ó﹏ò｡)',\n      '生气的时候要记得放松自己哦，糖球给你送上舒缓音乐~♪(^∇^*)'\n    ],\n    surprised: [\n      '哇！这确实很让人惊讶呢！(⊙ᗜ⊙)!',\n      '糖球也被吓了一跳呢，真是太意外了！w(°ｏ°)w',\n      '这真是个大发现呢！糖球和你一样惊讶！(≧▽≦)'\n    ],\n    scared: [\n      '别害怕，糖球会保护你的！(｡•ᵕ•｡)',\n      '没事的，一切都会好起来，糖球陪着你。(っ´ω`c)',\n      '握住糖球的手，我们一起面对恐惧吧！(o´・∀・`o)'\n    ],\n    neutral: [\n      '今天过得怎么样呀？糖球随时在这里陪你聊天哦！(●ˊᵕˋ●)',\n      '有什么有趣的事情想和糖球分享吗？(｡•ᴗ•｡)',\n      '无论你需要什么，糖球都会尽力帮助你的！(ﾉ´ヮ`)ﾉ*:･ﾟ✧'\n    ]\n  }\n  \n  // 根据情感类型选择回复模板\n  const emotionResponses = responses[emotion] || responses.neutral\n  const randomIndex = Math.floor(Math.random() * emotionResponses.length)\n  \n  // 返回回复内容\n  return emotionResponses[randomIndex]\n}\n\nexport default chat"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}