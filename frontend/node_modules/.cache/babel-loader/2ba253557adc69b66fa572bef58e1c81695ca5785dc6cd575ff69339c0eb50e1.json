{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport SparkService from '@/services/sparkAI';\n\n// 聊天模块状态管理\nexport default {\n  namespaced: true,\n  state: {\n    // 聊天消息列表\n    messages: [],\n    // 是否正在输入\n    isTyping: false,\n    // 当前情绪\n    currentEmotion: 'neutral',\n    // 天气信息\n    weatherInfo: null,\n    // 声音开关\n    soundEnabled: true\n  },\n  getters: {\n    // 获取所有消息\n    messages: state => state.messages,\n    // 获取输入状态\n    isTyping: state => state.isTyping,\n    // 获取当前情绪\n    currentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    // 添加消息\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message);\n    },\n    // 设置输入状态\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping;\n    },\n    // 改变情绪\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    // 设置天气信息\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info;\n    },\n    // 切换声音\n    TOGGLE_SOUND(state) {\n      state.soundEnabled = !state.soundEnabled;\n    },\n    // 清空聊天记录\n    CLEAR_MESSAGES(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    // 发送消息\n    async sendMessage({\n      commit,\n      state\n    }, userMessage) {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        content: userMessage,\n        sender: 'user',\n        timestamp: new Date()\n      });\n\n      // 设置正在输入状态\n      commit('SET_TYPING', true);\n\n      // 分析情绪\n      const emotion = analyzeEmotion(userMessage);\n      commit('CHANGE_EMOTION', emotion);\n      try {\n        let response;\n\n        // 检查是否是天气查询\n        if (checkWeatherQuery(userMessage)) {\n          try {\n            // 获取天气信息\n            const weatherInfo = await getWeatherInfo();\n            commit('SET_WEATHER_INFO', weatherInfo);\n\n            // 生成天气回复\n            response = `今天${weatherInfo.city}的天气是${weatherInfo.weather}，温度${weatherInfo.temperature}℃，${weatherInfo.description}`;\n          } catch (error) {\n            console.error('获取天气信息失败:', error);\n            response = '抱歉，我现在无法获取天气信息，请稍后再试。';\n          }\n        } else {\n          try {\n            // 尝试使用AI服务生成回复\n            response = await SparkService.generateResponse(userMessage, emotion);\n          } catch (error) {\n            console.error('AI服务生成回复失败:', error);\n            // 使用本地回复作为备选\n            response = generateResponse(userMessage, emotion);\n          }\n        }\n\n        // 添加助手回复\n        setTimeout(() => {\n          commit('SET_TYPING', false);\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            content: response,\n            sender: 'assistant',\n            timestamp: new Date(),\n            emotion: state.currentEmotion\n          });\n        }, 500 + Math.random() * 1000); // 添加随机延迟使回复更自然\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        commit('SET_TYPING', false);\n\n        // 添加错误消息\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          content: '抱歉，我遇到了一些问题，请稍后再试。',\n          sender: 'assistant',\n          timestamp: new Date(),\n          emotion: 'neutral'\n        });\n      }\n    },\n    // 清空聊天记录\n    clearChat({\n      commit\n    }) {\n      commit('CLEAR_MESSAGES');\n    }\n  }\n};\n\n/**\n * 分析情绪\n * @param {string} message 用户消息\n * @returns {string} 情绪状态\n */\nfunction analyzeEmotion(message) {\n  // 情绪关键词\n  const emotionKeywords = {\n    happy: ['开心', '高兴', '快乐', '幸福', '嘻嘻', '哈哈', '笑', '好玩', '棒', '喜欢'],\n    sad: ['难过', '伤心', '悲伤', '痛苦', '哭', '失望', '委屈', '不开心', '烦恼', '忧郁'],\n    excited: ['激动', '兴奋', '期待', '惊喜', '太棒了', 'amazing', '厉害', '哇', '喜欢', '爱'],\n    angry: ['生气', '愤怒', '恼火', '讨厌', '烦人', '可恶', '混蛋', '垃圾', '滚', '恨']\n  };\n\n  // 检查消息中是否包含情绪关键词\n  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n    if (keywords.some(keyword => message.includes(keyword))) {\n      return emotion;\n    }\n  }\n  return 'neutral';\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否是天气查询\n */\nfunction checkWeatherQuery(message) {\n  const weatherKeywords = ['天气', '下雨', '温度', '晴天', '阴天', '下雪', '冷', '热', '气温'];\n  return weatherKeywords.some(keyword => message.includes(keyword));\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<Object>} 天气信息\n */\nfunction getWeatherInfo() {\n  return new Promise(resolve => {\n    // 模拟API调用延迟\n    setTimeout(() => {\n      // 模拟数据\n      const cities = ['北京', '上海', '广州', '深圳', '杭州', '成都'];\n      const weathers = ['晴天', '多云', '阴天', '小雨', '大雨', '雷阵雨', '雾'];\n      const city = cities[Math.floor(Math.random() * cities.length)];\n      const weather = weathers[Math.floor(Math.random() * weathers.length)];\n      const temperature = Math.floor(Math.random() * 30) + 5;\n\n      // 根据天气和温度生成描述\n      let description = '';\n      if (temperature < 10) {\n        description = '天气较冷，请注意保暖。';\n      } else if (temperature < 20) {\n        description = '天气舒适，很适合外出活动。';\n      } else {\n        description = '天气较热，注意防晒和补充水分。';\n      }\n      if (weather.includes('雨')) {\n        description += '别忘了带伞哦！';\n      } else if (weather === '晴天') {\n        description += '阳光明媚，心情也会变好呢！';\n      }\n      resolve({\n        city,\n        weather,\n        temperature,\n        description\n      });\n    }, 500);\n  });\n}\n\n/**\n * 生成本地回复（备选方案）\n * @param {string} message 用户消息\n * @param {string} emotion 情绪状态\n * @returns {string} 生成的回复\n */\nfunction generateResponse(message, emotion) {\n  // 通用回复\n  const commonResponses = ['我明白你的意思了！', '谢谢你告诉我这些。', '很高兴能和你聊天！', '我喜欢听你说这些！', '这真的很有趣呢~', '我能理解你的感受。', '我在认真听你说话哦~', '能帮到你我很开心！', '我会一直陪着你的~', '你说的真有道理！'];\n\n  // 根据情绪的特定回复\n  const emotionResponses = {\n    happy: ['看到你这么开心，我也很高兴呢！', '你的好心情真有感染力~', '继续保持这种快乐的心情吧！', '听你说这些真让人心情愉悦！', '你的笑容一定很灿烂吧！'],\n    sad: ['别难过，一切都会好起来的。', '我在这里陪着你。', '有什么需要倾诉的，我随时都在。', '生活中总会有不顺利的时候，但阴云总会散去。', '给你一个温暖的抱抱~'],\n    excited: ['你的热情真让人感动！', '我也为你感到兴奋！', '这真是太棒了！', '你的热情让我也充满能量！', '继续保持这种激情吧！'],\n    angry: ['深呼吸，慢慢来，一切都会好的。', '我理解你的感受，有时候生活确实不容易。', '或许休息一下会让你感觉好一些？', '我们一起想想解决办法吧。', '表达出来是好事，不要把负面情绪憋在心里。'],\n    neutral: ['今天过得怎么样？', '有什么想和我分享的吗？', '有什么我能帮到你的吗？', '我一直在这里陪着你。', '想聊些什么呢？']\n  };\n\n  // 从情绪回复和通用回复中随机选择\n  const specificResponses = emotionResponses[emotion] || emotionResponses.neutral;\n  const allResponses = [...specificResponses, ...commonResponses];\n  return allResponses[Math.floor(Math.random() * allResponses.length)];\n}","map":{"version":3,"names":["SparkService","namespaced","state","messages","isTyping","currentEmotion","weatherInfo","soundEnabled","getters","mutations","ADD_MESSAGE","message","push","SET_TYPING","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND","CLEAR_MESSAGES","actions","sendMessage","commit","userMessage","id","Date","now","content","sender","timestamp","analyzeEmotion","response","checkWeatherQuery","getWeatherInfo","city","weather","temperature","description","error","console","generateResponse","setTimeout","Math","random","clearChat","emotionKeywords","happy","sad","excited","angry","keywords","Object","entries","some","keyword","includes","weatherKeywords","Promise","resolve","cities","weathers","floor","length","commonResponses","emotionResponses","neutral","specificResponses","allResponses"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\n\n// 聊天模块状态管理\nexport default {\n  namespaced: true,\n  \n  state: {\n    // 聊天消息列表\n    messages: [],\n    // 是否正在输入\n    isTyping: false,\n    // 当前情绪\n    currentEmotion: 'neutral',\n    // 天气信息\n    weatherInfo: null,\n    // 声音开关\n    soundEnabled: true\n  },\n  \n  getters: {\n    // 获取所有消息\n    messages: state => state.messages,\n    // 获取输入状态\n    isTyping: state => state.isTyping,\n    // 获取当前情绪\n    currentEmotion: state => state.currentEmotion\n  },\n  \n  mutations: {\n    // 添加消息\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message)\n    },\n    // 设置输入状态\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping\n    },\n    // 改变情绪\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion\n    },\n    // 设置天气信息\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info\n    },\n    // 切换声音\n    TOGGLE_SOUND(state) {\n      state.soundEnabled = !state.soundEnabled\n    },\n    // 清空聊天记录\n    CLEAR_MESSAGES(state) {\n      state.messages = []\n    }\n  },\n  \n  actions: {\n    // 发送消息\n    async sendMessage({ commit, state }, userMessage) {\n      // 添加用户消息\n      commit('ADD_MESSAGE', {\n        id: Date.now(),\n        content: userMessage,\n        sender: 'user',\n        timestamp: new Date()\n      })\n      \n      // 设置正在输入状态\n      commit('SET_TYPING', true)\n      \n      // 分析情绪\n      const emotion = analyzeEmotion(userMessage)\n      commit('CHANGE_EMOTION', emotion)\n      \n      try {\n        let response\n        \n        // 检查是否是天气查询\n        if (checkWeatherQuery(userMessage)) {\n          try {\n            // 获取天气信息\n            const weatherInfo = await getWeatherInfo()\n            commit('SET_WEATHER_INFO', weatherInfo)\n            \n            // 生成天气回复\n            response = `今天${weatherInfo.city}的天气是${weatherInfo.weather}，温度${weatherInfo.temperature}℃，${weatherInfo.description}`\n          } catch (error) {\n            console.error('获取天气信息失败:', error)\n            response = '抱歉，我现在无法获取天气信息，请稍后再试。'\n          }\n        } else {\n          try {\n            // 尝试使用AI服务生成回复\n            response = await SparkService.generateResponse(userMessage, emotion)\n          } catch (error) {\n            console.error('AI服务生成回复失败:', error)\n            // 使用本地回复作为备选\n            response = generateResponse(userMessage, emotion)\n          }\n        }\n        \n        // 添加助手回复\n        setTimeout(() => {\n          commit('SET_TYPING', false)\n          commit('ADD_MESSAGE', {\n            id: Date.now(),\n            content: response,\n            sender: 'assistant',\n            timestamp: new Date(),\n            emotion: state.currentEmotion\n          })\n        }, 500 + Math.random() * 1000) // 添加随机延迟使回复更自然\n      } catch (error) {\n        console.error('发送消息失败:', error)\n        commit('SET_TYPING', false)\n        \n        // 添加错误消息\n        commit('ADD_MESSAGE', {\n          id: Date.now(),\n          content: '抱歉，我遇到了一些问题，请稍后再试。',\n          sender: 'assistant',\n          timestamp: new Date(),\n          emotion: 'neutral'\n        })\n      }\n    },\n    \n    // 清空聊天记录\n    clearChat({ commit }) {\n      commit('CLEAR_MESSAGES')\n    }\n  }\n}\n\n/**\n * 分析情绪\n * @param {string} message 用户消息\n * @returns {string} 情绪状态\n */\nfunction analyzeEmotion(message) {\n  // 情绪关键词\n  const emotionKeywords = {\n    happy: ['开心', '高兴', '快乐', '幸福', '嘻嘻', '哈哈', '笑', '好玩', '棒', '喜欢'],\n    sad: ['难过', '伤心', '悲伤', '痛苦', '哭', '失望', '委屈', '不开心', '烦恼', '忧郁'],\n    excited: ['激动', '兴奋', '期待', '惊喜', '太棒了', 'amazing', '厉害', '哇', '喜欢', '爱'],\n    angry: ['生气', '愤怒', '恼火', '讨厌', '烦人', '可恶', '混蛋', '垃圾', '滚', '恨']\n  }\n  \n  // 检查消息中是否包含情绪关键词\n  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n    if (keywords.some(keyword => message.includes(keyword))) {\n      return emotion\n    }\n  }\n  \n  return 'neutral'\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否是天气查询\n */\nfunction checkWeatherQuery(message) {\n  const weatherKeywords = ['天气', '下雨', '温度', '晴天', '阴天', '下雪', '冷', '热', '气温']\n  return weatherKeywords.some(keyword => message.includes(keyword))\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<Object>} 天气信息\n */\nfunction getWeatherInfo() {\n  return new Promise((resolve) => {\n    // 模拟API调用延迟\n    setTimeout(() => {\n      // 模拟数据\n      const cities = ['北京', '上海', '广州', '深圳', '杭州', '成都']\n      const weathers = ['晴天', '多云', '阴天', '小雨', '大雨', '雷阵雨', '雾']\n      const city = cities[Math.floor(Math.random() * cities.length)]\n      const weather = weathers[Math.floor(Math.random() * weathers.length)]\n      const temperature = Math.floor(Math.random() * 30) + 5\n      \n      // 根据天气和温度生成描述\n      let description = ''\n      if (temperature < 10) {\n        description = '天气较冷，请注意保暖。'\n      } else if (temperature < 20) {\n        description = '天气舒适，很适合外出活动。'\n      } else {\n        description = '天气较热，注意防晒和补充水分。'\n      }\n      \n      if (weather.includes('雨')) {\n        description += '别忘了带伞哦！'\n      } else if (weather === '晴天') {\n        description += '阳光明媚，心情也会变好呢！'\n      }\n      \n      resolve({\n        city,\n        weather,\n        temperature,\n        description\n      })\n    }, 500)\n  })\n}\n\n/**\n * 生成本地回复（备选方案）\n * @param {string} message 用户消息\n * @param {string} emotion 情绪状态\n * @returns {string} 生成的回复\n */\nfunction generateResponse(message, emotion) {\n  // 通用回复\n  const commonResponses = [\n    '我明白你的意思了！',\n    '谢谢你告诉我这些。',\n    '很高兴能和你聊天！',\n    '我喜欢听你说这些！',\n    '这真的很有趣呢~',\n    '我能理解你的感受。',\n    '我在认真听你说话哦~',\n    '能帮到你我很开心！',\n    '我会一直陪着你的~',\n    '你说的真有道理！'\n  ]\n  \n  // 根据情绪的特定回复\n  const emotionResponses = {\n    happy: [\n      '看到你这么开心，我也很高兴呢！',\n      '你的好心情真有感染力~',\n      '继续保持这种快乐的心情吧！',\n      '听你说这些真让人心情愉悦！',\n      '你的笑容一定很灿烂吧！'\n    ],\n    sad: [\n      '别难过，一切都会好起来的。',\n      '我在这里陪着你。',\n      '有什么需要倾诉的，我随时都在。',\n      '生活中总会有不顺利的时候，但阴云总会散去。',\n      '给你一个温暖的抱抱~'\n    ],\n    excited: [\n      '你的热情真让人感动！',\n      '我也为你感到兴奋！',\n      '这真是太棒了！',\n      '你的热情让我也充满能量！',\n      '继续保持这种激情吧！'\n    ],\n    angry: [\n      '深呼吸，慢慢来，一切都会好的。',\n      '我理解你的感受，有时候生活确实不容易。',\n      '或许休息一下会让你感觉好一些？',\n      '我们一起想想解决办法吧。',\n      '表达出来是好事，不要把负面情绪憋在心里。'\n    ],\n    neutral: [\n      '今天过得怎么样？',\n      '有什么想和我分享的吗？',\n      '有什么我能帮到你的吗？',\n      '我一直在这里陪着你。',\n      '想聊些什么呢？'\n    ]\n  }\n  \n  // 从情绪回复和通用回复中随机选择\n  const specificResponses = emotionResponses[emotion] || emotionResponses.neutral\n  const allResponses = [...specificResponses, ...commonResponses]\n  \n  return allResponses[Math.floor(Math.random() * allResponses.length)]\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}