{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nclass WeatherService {\n  constructor() {\n    // 使用环境变量或默认值\n    this.key = process.env.VUE_APP_QWEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\n    this.baseUrl = process.env.VUE_APP_QWEATHER_URL || 'https://kv436fwcq8.re.qweatherapi.com/v7';\n\n    // 城市缓存，格式: { cityName: { data, timestamp } }\n    this.weatherCache = new Map();\n    // 缓存有效期（5分钟）\n    this.cacheExpiration = 5 * 60 * 1000;\n\n    // 默认城市列表\n    this.defaultCities = [{\n      id: '101190101',\n      name: '南京'\n    }, {\n      id: '101020100',\n      name: '上海'\n    }, {\n      id: '101010100',\n      name: '北京'\n    }, {\n      id: '101280101',\n      name: '广州'\n    }, {\n      id: '101280601',\n      name: '深圳'\n    }];\n    console.log('WeatherService initialized with API Host:', this.baseUrl);\n  }\n\n  // 获取指定城市的天气\n  async getCityWeather(cityName) {\n    try {\n      console.log('获取城市天气:', cityName);\n\n      // 检查缓存\n      const cached = this.weatherCache.get(cityName);\n      if (cached && Date.now() - cached.timestamp < this.cacheExpiration) {\n        console.log('使用缓存的天气数据');\n        return cached.data;\n      }\n\n      // 查找城市ID\n      const city = this.defaultCities.find(c => c.name === cityName);\n      if (!city) {\n        console.log('未找到城市:', cityName);\n        throw new Error(`抱歉，暂不支持查询${cityName}的天气`);\n      }\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n      const weatherData = await this.fetchWeatherData(url);\n\n      // 更新缓存\n      this.weatherCache.set(cityName, {\n        data: weatherData,\n        timestamp: Date.now()\n      });\n      return weatherData;\n    } catch (error) {\n      console.error('获取城市天气失败:', error);\n      throw error;\n    }\n  }\n\n  // 获取当前位置天气\n  async getLocationWeather() {\n    try {\n      console.log('获取当前位置天气');\n      const position = await this.getCurrentPosition();\n      console.log('获取到位置:', position);\n\n      // 构建请求URL，使用经纬度\n      const url = `${this.baseUrl}/weather/now?location=${position.longitude},${position.latitude}&key=${this.key}`;\n      return await this.fetchWeatherData(url);\n    } catch (error) {\n      console.error('获取当前位置天气失败:', error);\n      // 降级使用默认城市\n      return this.getCityWeather(this.defaultCities[0].name);\n    }\n  }\n\n  // 获取当前位置\n  getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('浏览器不支持地理定位'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error('地理定位失败:', error);\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    });\n  }\n\n  // 统一的天气数据获取方法\n  async fetchWeatherData(url) {\n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Accept-Encoding': 'gzip'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`天气API请求失败: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.code === '200') {\n      const {\n        temp,\n        text,\n        icon\n      } = data.now;\n      return {\n        temperature: temp,\n        condition: this.getWeatherCondition(icon),\n        description: text,\n        cityName: data.location?.name || '未知城市',\n        updateTime: data.updateTime\n      };\n    } else {\n      throw new Error(`天气API返回错误: ${data.code}`);\n    }\n  }\n\n  // 获取当前天气\n  async getNowWeather() {\n    try {\n      // 使用默认城市（南京）\n      const defaultCity = this.defaultCities[0];\n      console.log('使用默认城市:', defaultCity.name);\n\n      // 构建请求URL\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\n      console.log('请求天气URL:', url);\n\n      // 发送请求，添加必要的请求头\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n\n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n\n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('天气信息响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: defaultCity.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('获取天气出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 生成天气描述\n  generateWeatherDescription(weather) {\n    const {\n      temperature,\n      description,\n      cityName\n    } = weather;\n    console.log('生成天气描述:', weather);\n    let suggestion = '';\n\n    // 根据温度给出建议\n    const temp = parseInt(temperature);\n    if (temp < 10) {\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\n    } else if (temp > 30) {\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\n    } else {\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\n    }\n\n    // 根据天气状况添加特定建议\n    if (description.includes('雨')) {\n      suggestion += ' 记得带伞！☔';\n    } else if (description.includes('晴')) {\n      suggestion += ' 防晒要做好！🧴';\n    }\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\n  }\n\n  // 获取天气状况\n  getWeatherCondition(icon) {\n    const conditions = {\n      sunny: ['100', '101', '102', '103'],\n      cloudy: ['104', '150', '151', '152', '153'],\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\n    };\n    for (const [condition, icons] of Object.entries(conditions)) {\n      if (icons.includes(icon)) {\n        return condition;\n      }\n    }\n    return 'cloudy'; // 默认返回多云\n  }\n\n  // 获取默认天气数据\n  getDefaultWeather() {\n    const defaultCity = this.defaultCities[0];\n    return {\n      temperature: '25',\n      // 注意这里返回字符串以保持一致性\n      condition: 'cloudy',\n      description: '多云',\n      cityName: defaultCity.name,\n      updateTime: new Date().toISOString()\n    };\n  }\n\n  // 切换城市\n  async switchCity(cityId) {\n    try {\n      console.log('切换城市, ID:', cityId);\n\n      // 构建URL\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\n      console.log('切换城市请求URL:', url);\n\n      // 发送请求\n      const weatherResponse = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Accept-Encoding': 'gzip'\n        }\n      });\n\n      // 检查HTTP响应状态\n      console.log('响应状态:', weatherResponse.status);\n      if (!weatherResponse.ok) {\n        const responseText = await weatherResponse.text();\n        console.error('响应内容:', responseText);\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\n      }\n\n      // 解析JSON响应\n      const weatherData = await weatherResponse.json();\n      console.log('切换城市天气响应:', JSON.stringify(weatherData, null, 2));\n\n      // 检查API返回码\n      if (weatherData.code === '200') {\n        const {\n          temp,\n          text,\n          icon\n        } = weatherData.now;\n        console.log('解析到的天气数据:', temp, text, icon);\n        const city = this.defaultCities.find(c => c.id === cityId) || {\n          name: '未知城市'\n        };\n        return {\n          temperature: temp,\n          condition: this.getWeatherCondition(icon),\n          description: text,\n          cityName: city.name,\n          updateTime: weatherData.updateTime\n        };\n      } else {\n        console.error('获取天气失败, 错误码:', weatherData.code);\n        return this.getDefaultWeather();\n      }\n    } catch (error) {\n      console.error('切换城市出错:', error);\n      return this.getDefaultWeather();\n    }\n  }\n\n  // 解析城市名称\n  parseCityName(text) {\n    for (const city of this.defaultCities) {\n      if (text.includes(city.name)) {\n        return city;\n      }\n    }\n    return null;\n  }\n}\nexport default new WeatherService();","map":{"version":3,"names":["WeatherService","constructor","key","process","env","VUE_APP_QWEATHER_KEY","baseUrl","VUE_APP_QWEATHER_URL","weatherCache","Map","cacheExpiration","defaultCities","id","name","console","log","getCityWeather","cityName","cached","get","Date","now","timestamp","data","city","find","c","Error","url","weatherData","fetchWeatherData","set","error","getLocationWeather","position","getCurrentPosition","longitude","latitude","Promise","resolve","reject","navigator","geolocation","coords","enableHighAccuracy","timeout","maximumAge","response","fetch","headers","ok","status","json","code","temp","text","icon","temperature","condition","getWeatherCondition","description","location","updateTime","getNowWeather","defaultCity","weatherResponse","responseText","JSON","stringify","getDefaultWeather","generateWeatherDescription","weather","suggestion","parseInt","includes","conditions","sunny","cloudy","rainy","snowy","foggy","icons","Object","entries","toISOString","switchCity","cityId","parseCityName"],"sources":["E:/code/PersonalBolg1/frontend/src/services/weather.js"],"sourcesContent":["class WeatherService {\r\n  constructor() {\r\n    // 使用环境变量或默认值\r\n    this.key = process.env.VUE_APP_QWEATHER_KEY || '20ad4f9133c94ac69f48192ef755f473';\r\n    this.baseUrl = process.env.VUE_APP_QWEATHER_URL || 'https://kv436fwcq8.re.qweatherapi.com/v7';\r\n    \r\n    // 城市缓存，格式: { cityName: { data, timestamp } }\r\n    this.weatherCache = new Map();\r\n    // 缓存有效期（5分钟）\r\n    this.cacheExpiration = 5 * 60 * 1000;\r\n    \r\n    // 默认城市列表\r\n    this.defaultCities = [\r\n      { id: '101190101', name: '南京' },\r\n      { id: '101020100', name: '上海' },\r\n      { id: '101010100', name: '北京' },\r\n      { id: '101280101', name: '广州' },\r\n      { id: '101280601', name: '深圳' }\r\n    ];\r\n\r\n    console.log('WeatherService initialized with API Host:', this.baseUrl);\r\n  }\r\n\r\n  // 获取指定城市的天气\r\n  async getCityWeather(cityName) {\r\n    try {\r\n      console.log('获取城市天气:', cityName);\r\n      \r\n      // 检查缓存\r\n      const cached = this.weatherCache.get(cityName);\r\n      if (cached && Date.now() - cached.timestamp < this.cacheExpiration) {\r\n        console.log('使用缓存的天气数据');\r\n        return cached.data;\r\n      }\r\n\r\n      // 查找城市ID\r\n      const city = this.defaultCities.find(c => c.name === cityName);\r\n      if (!city) {\r\n        console.log('未找到城市:', cityName);\r\n        throw new Error(`抱歉，暂不支持查询${cityName}的天气`);\r\n      }\r\n\r\n      // 构建请求URL\r\n      const url = `${this.baseUrl}/weather/now?location=${city.id}&key=${this.key}`;\r\n      console.log('请求天气URL:', url);\r\n      \r\n      const weatherData = await this.fetchWeatherData(url);\r\n      \r\n      // 更新缓存\r\n      this.weatherCache.set(cityName, {\r\n        data: weatherData,\r\n        timestamp: Date.now()\r\n      });\r\n\r\n      return weatherData;\r\n    } catch (error) {\r\n      console.error('获取城市天气失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 获取当前位置天气\r\n  async getLocationWeather() {\r\n    try {\r\n      console.log('获取当前位置天气');\r\n      \r\n      const position = await this.getCurrentPosition();\r\n      console.log('获取到位置:', position);\r\n\r\n      // 构建请求URL，使用经纬度\r\n      const url = `${this.baseUrl}/weather/now?location=${position.longitude},${position.latitude}&key=${this.key}`;\r\n      return await this.fetchWeatherData(url);\r\n    } catch (error) {\r\n      console.error('获取当前位置天气失败:', error);\r\n      // 降级使用默认城市\r\n      return this.getCityWeather(this.defaultCities[0].name);\r\n    }\r\n  }\r\n\r\n  // 获取当前位置\r\n  getCurrentPosition() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('浏览器不支持地理定位'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error('地理定位失败:', error);\r\n          reject(error);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 5000,\r\n          maximumAge: 0\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  // 统一的天气数据获取方法\r\n  async fetchWeatherData(url) {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Accept-Encoding': 'gzip'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`天气API请求失败: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.code === '200') {\r\n      const { temp, text, icon } = data.now;\r\n      return {\r\n        temperature: temp,\r\n        condition: this.getWeatherCondition(icon),\r\n        description: text,\r\n        cityName: data.location?.name || '未知城市',\r\n        updateTime: data.updateTime\r\n      };\r\n    } else {\r\n      throw new Error(`天气API返回错误: ${data.code}`);\r\n    }\r\n  }\r\n\r\n  // 获取当前天气\r\n  async getNowWeather() {\r\n    try {\r\n      // 使用默认城市（南京）\r\n      const defaultCity = this.defaultCities[0];\r\n      console.log('使用默认城市:', defaultCity.name);\r\n\r\n      // 构建请求URL\r\n      const url = `${this.baseUrl}/weather/now?location=${defaultCity.id}&key=${this.key}`;\r\n      console.log('请求天气URL:', url);\r\n      \r\n      // 发送请求，添加必要的请求头\r\n      const weatherResponse = await fetch(url, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Accept-Encoding': 'gzip'\r\n        }\r\n      });\r\n      \r\n      // 检查HTTP响应状态\r\n      console.log('响应状态:', weatherResponse.status);\r\n      if (!weatherResponse.ok) {\r\n        const responseText = await weatherResponse.text();\r\n        console.error('响应内容:', responseText);\r\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\r\n      }\r\n      \r\n      // 解析JSON响应\r\n      const weatherData = await weatherResponse.json();\r\n      console.log('天气信息响应:', JSON.stringify(weatherData, null, 2));\r\n\r\n      // 检查API返回码\r\n      if (weatherData.code === '200') {\r\n        const { temp, text, icon } = weatherData.now;\r\n        console.log('解析到的天气数据:', temp, text, icon);\r\n        return {\r\n          temperature: temp,\r\n          condition: this.getWeatherCondition(icon),\r\n          description: text,\r\n          cityName: defaultCity.name,\r\n          updateTime: weatherData.updateTime\r\n        };\r\n      } else {\r\n        console.error('获取天气失败, 错误码:', weatherData.code);\r\n        return this.getDefaultWeather();\r\n      }\r\n    } catch (error) {\r\n      console.error('获取天气出错:', error);\r\n      return this.getDefaultWeather();\r\n    }\r\n  }\r\n\r\n  // 生成天气描述\r\n  generateWeatherDescription(weather) {\r\n    const { temperature, description, cityName } = weather;\r\n    console.log('生成天气描述:', weather);\r\n    \r\n    let suggestion = '';\r\n\r\n    // 根据温度给出建议\r\n    const temp = parseInt(temperature);\r\n    if (temp < 10) {\r\n      suggestion = '天气有点冷，要注意保暖哦~ 🧥';\r\n    } else if (temp > 30) {\r\n      suggestion = '天气有点热，记得防晒补水哦~ 🌞';\r\n    } else {\r\n      suggestion = '天气很舒适，适合出门活动呢~ 🌈';\r\n    }\r\n\r\n    // 根据天气状况添加特定建议\r\n    if (description.includes('雨')) {\r\n      suggestion += ' 记得带伞！☔';\r\n    } else if (description.includes('晴')) {\r\n      suggestion += ' 防晒要做好！🧴';\r\n    }\r\n\r\n    return `${cityName}现在气温${temperature}°C，${description}。${suggestion}`;\r\n  }\r\n\r\n  // 获取天气状况\r\n  getWeatherCondition(icon) {\r\n    const conditions = {\r\n      sunny: ['100', '101', '102', '103'],\r\n      cloudy: ['104', '150', '151', '152', '153'],\r\n      rainy: ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '399'],\r\n      snowy: ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '499'],\r\n      foggy: ['500', '501', '502', '503', '504', '507', '508', '509', '510', '511', '512', '513', '514', '515']\r\n    };\r\n\r\n    for (const [condition, icons] of Object.entries(conditions)) {\r\n      if (icons.includes(icon)) {\r\n        return condition;\r\n      }\r\n    }\r\n    return 'cloudy'; // 默认返回多云\r\n  }\r\n\r\n  // 获取默认天气数据\r\n  getDefaultWeather() {\r\n    const defaultCity = this.defaultCities[0];\r\n    return {\r\n      temperature: '25',  // 注意这里返回字符串以保持一致性\r\n      condition: 'cloudy',\r\n      description: '多云',\r\n      cityName: defaultCity.name,\r\n      updateTime: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // 切换城市\r\n  async switchCity(cityId) {\r\n    try {\r\n      console.log('切换城市, ID:', cityId);\r\n      \r\n      // 构建URL\r\n      const url = `${this.baseUrl}/weather/now?location=${cityId}&key=${this.key}`;\r\n      console.log('切换城市请求URL:', url);\r\n      \r\n      // 发送请求\r\n      const weatherResponse = await fetch(url, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Accept-Encoding': 'gzip'\r\n        }\r\n      });\r\n      \r\n      // 检查HTTP响应状态\r\n      console.log('响应状态:', weatherResponse.status);\r\n      if (!weatherResponse.ok) {\r\n        const responseText = await weatherResponse.text();\r\n        console.error('响应内容:', responseText);\r\n        throw new Error(`HTTP error! status: ${weatherResponse.status}, response: ${responseText}`);\r\n      }\r\n      \r\n      // 解析JSON响应\r\n      const weatherData = await weatherResponse.json();\r\n      console.log('切换城市天气响应:', JSON.stringify(weatherData, null, 2));\r\n\r\n      // 检查API返回码\r\n      if (weatherData.code === '200') {\r\n        const { temp, text, icon } = weatherData.now;\r\n        console.log('解析到的天气数据:', temp, text, icon);\r\n        const city = this.defaultCities.find(c => c.id === cityId) || { name: '未知城市' };\r\n        return {\r\n          temperature: temp,\r\n          condition: this.getWeatherCondition(icon),\r\n          description: text,\r\n          cityName: city.name,\r\n          updateTime: weatherData.updateTime\r\n        };\r\n      } else {\r\n        console.error('获取天气失败, 错误码:', weatherData.code);\r\n        return this.getDefaultWeather();\r\n      }\r\n    } catch (error) {\r\n      console.error('切换城市出错:', error);\r\n      return this.getDefaultWeather();\r\n    }\r\n  }\r\n\r\n  // 解析城市名称\r\n  parseCityName(text) {\r\n    for (const city of this.defaultCities) {\r\n      if (text.includes(city.name)) {\r\n        return city;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default new WeatherService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}