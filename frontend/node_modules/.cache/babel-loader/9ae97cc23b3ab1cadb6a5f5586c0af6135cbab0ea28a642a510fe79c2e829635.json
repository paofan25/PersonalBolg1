{"ast":null,"code":"import { mapState, mapActions } from 'vuex';\nexport default {\n  name: 'ChatAssistant',\n  data() {\n    return {\n      inputText: '',\n      emojiPickerVisible: false\n    };\n  },\n  computed: {\n    ...mapState('chat', {\n      messages: state => state.messages,\n      isTyping: state => state.isTyping,\n      currentEmotion: state => state.currentEmotion\n    })\n  },\n  methods: {\n    ...mapActions('chat', ['sendMessage', 'clearChat']),\n    async handleSend() {\n      if (!this.inputText.trim() || this.isTyping) return;\n      const text = this.inputText;\n      this.inputText = '';\n      await this.sendMessage(text);\n      this.scrollToBottom();\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        container.scrollTop = container.scrollHeight;\n      });\n    },\n    getActionLabel(action) {\n      const labels = {\n        'sound-purr': '听呼噜声',\n        'sound-rain': '听雨声',\n        'sound-music': '听音乐',\n        'animation-bounce': '一起跳舞',\n        'animation-think': '思考中'\n      };\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\n    },\n    handleAction(action) {\n      // TODO: 实现动作处理逻辑\n      console.log('Action triggered:', action);\n    }\n  },\n  mounted() {\n    this.clearChat();\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","name","data","inputText","emojiPickerVisible","computed","messages","state","isTyping","currentEmotion","methods","handleSend","trim","text","sendMessage","scrollToBottom","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","getActionLabel","action","labels","type","sound","handleAction","console","log","mounted","clearChat","watch"],"sources":["E:\\code\\PersonalBolg1\\frontend\\src\\views\\ChatAssistant.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 聊天头部 -->\n    <div class=\"chat-header sweet-card\">\n      <div class=\"assistant-info\">\n        <div class=\"assistant-avatar\" :class=\"currentEmotion\">\n          <div class=\"mochi-body\">\n            <div class=\"mochi-face\">\n              <div class=\"eyes\">\n                <div class=\"eye\"></div>\n                <div class=\"eye\"></div>\n              </div>\n              <div class=\"mouth\" :class=\"currentEmotion\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"assistant-status\">\n          <h2>糖球助手</h2>\n          <p class=\"status\" v-if=\"isTyping\">正在输入中...</p>\n          <p class=\"status\" v-else>在线</p>\n        </div>\n      </div>\n    </div>\n\n    <!-- 聊天内容区 -->\n    <div class=\"chat-messages\" ref=\"messageContainer\">\n      <div v-for=\"message in messages\" \n           :key=\"message.id\" \n           class=\"message-wrapper\"\n           :class=\"message.type\">\n        <div class=\"message sweet-card\">\n          <!-- 用户消息 -->\n          <template v-if=\"message.type === 'user'\">\n            <div class=\"message-content\">{{ message.text }}</div>\n            <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n          </template>\n          \n          <!-- 助手消息 -->\n          <template v-else>\n            <div class=\"message-content\">\n              <div class=\"text\">{{ message.text }}</div>\n              \n              <!-- 天气信息卡片 -->\n              <div v-if=\"message.weather\" class=\"weather-card\">\n                <div class=\"weather-icon\" :class=\"message.weather.condition\"></div>\n                <div class=\"weather-info\">\n                  <div class=\"temperature\">{{ message.weather.temperature }}°C</div>\n                  <div class=\"description\">{{ message.weather.description }}</div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- 动作按钮 -->\n            <div v-if=\"message.actions\" class=\"message-actions\">\n              <button v-for=\"(action, index) in message.actions\"\n                      :key=\"index\"\n                      class=\"action-btn\"\n                      @click=\"handleAction(action)\">\n                {{ getActionLabel(action) }}\n              </button>\n            </div>\n          </template>\n        </div>\n      </div>\n    </div>\n\n    <!-- 输入区域 -->\n    <div class=\"chat-input sweet-card\">\n      <textarea v-model=\"inputText\"\n                @keyup.enter.exact=\"handleSend\"\n                placeholder=\"和糖球说说话吧...\"\n                :disabled=\"isTyping\"\n                ref=\"inputArea\"></textarea>\n      <div class=\"input-actions\">\n        <button class=\"emoji-btn\">\n          <span class=\"emoji-icon\">😊</span>\n        </button>\n        <button class=\"send-btn\"\n                :disabled=\"!inputText.trim() || isTyping\"\n                @click=\"handleSend\">\n          发送\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\n\nexport default {\n  name: 'ChatAssistant',\n  data() {\n    return {\n      inputText: '',\n      emojiPickerVisible: false\n    };\n  },\n  computed: {\n    ...mapState('chat', {\n      messages: state => state.messages,\n      isTyping: state => state.isTyping,\n      currentEmotion: state => state.currentEmotion\n    })\n  },\n  methods: {\n    ...mapActions('chat', ['sendMessage', 'clearChat']),\n    \n    async handleSend() {\n      if (!this.inputText.trim() || this.isTyping) return;\n      \n      const text = this.inputText;\n      this.inputText = '';\n      await this.sendMessage(text);\n      this.scrollToBottom();\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        container.scrollTop = container.scrollHeight;\n      });\n    },\n    getActionLabel(action) {\n      const labels = {\n        'sound-purr': '听呼噜声',\n        'sound-rain': '听雨声',\n        'sound-music': '听音乐',\n        'animation-bounce': '一起跳舞',\n        'animation-think': '思考中'\n      };\n      return labels[`${action.type}-${action.name || action.sound}`] || '互动';\n    },\n    handleAction(action) {\n      // TODO: 实现动作处理逻辑\n      console.log('Action triggered:', action);\n    }\n  },\n  mounted() {\n    this.clearChat();\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  max-width: 800px;\n  margin: 0 auto;\n  height: calc(100vh - 100px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n\n.chat-header {\n  padding: 15px;\n  margin-bottom: 20px;\n}\n\n.assistant-info {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.assistant-avatar {\n  width: 60px;\n  height: 60px;\n  position: relative;\n}\n\n.mochi-body {\n  width: 100%;\n  height: 100%;\n  background: white;\n  border-radius: 50%;\n  position: relative;\n  animation: bounce 2s ease-in-out infinite;\n}\n\n.mochi-face {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 70%;\n  height: 70%;\n}\n\n.eyes {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 30%;\n}\n\n.eye {\n  width: 8px;\n  height: 8px;\n  background: #333;\n  border-radius: 50%;\n}\n\n.mouth {\n  width: 16px;\n  height: 8px;\n  border-bottom: 2px solid #333;\n  border-radius: 50%;\n  margin: 8px auto 0;\n}\n\n.mouth.happy {\n  border-bottom-color: transparent;\n  border-top: 2px solid #333;\n  transform: translateY(2px);\n}\n\n.mouth.sad {\n  transform: translateY(-2px);\n}\n\n.assistant-status h2 {\n  margin: 0;\n  color: var(--text-primary);\n}\n\n.status {\n  margin: 5px 0 0;\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  margin-bottom: 10px;\n}\n\n.message-wrapper.user {\n  justify-content: flex-end;\n}\n\n.message {\n  max-width: 70%;\n  padding: 12px;\n}\n\n.message-content {\n  margin-bottom: 5px;\n}\n\n.message-time {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  text-align: right;\n}\n\n.weather-card {\n  margin-top: 10px;\n  padding: 10px;\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: var(--border-radius);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.weather-icon {\n  font-size: 2rem;\n}\n\n.weather-icon.sunny::after {\n  content: '☀️';\n}\n\n.weather-icon.cloudy::after {\n  content: '☁️';\n}\n\n.weather-icon.rainy::after {\n  content: '🌧️';\n}\n\n.message-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  background: var(--primary-purple);\n  color: white;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.3s ease;\n}\n\n.action-btn:hover {\n  background: var(--primary-pink);\n  transform: translateY(-2px);\n}\n\n.chat-input {\n  margin-top: 20px;\n  padding: 15px;\n}\n\ntextarea {\n  width: 100%;\n  height: 80px;\n  padding: 10px;\n  border: 2px solid var(--primary-purple);\n  border-radius: var(--border-radius);\n  resize: none;\n  font-family: inherit;\n  margin-bottom: 10px;\n}\n\ntextarea:focus {\n  outline: none;\n  border-color: var(--primary-pink);\n}\n\n.input-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.emoji-btn, .send-btn {\n  padding: 8px 15px;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.emoji-btn {\n  background: none;\n  font-size: 1.2rem;\n}\n\n.send-btn {\n  background: var(--primary-purple);\n  color: white;\n}\n\n.send-btn:hover {\n  background: var(--primary-pink);\n  transform: translateY(-2px);\n}\n\n.send-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* 动画 */\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes think {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n}\n\n.assistant-avatar.thinking .mochi-body {\n  animation: think 2s ease-in-out infinite;\n}\n\n.assistant-avatar.happy .mouth {\n  border-bottom-color: transparent;\n  border-top: 2px solid #333;\n  transform: translateY(2px);\n}\n\n.assistant-avatar.sad .mouth {\n  transform: translateY(-2px);\n}\n\n.assistant-avatar.sleepy .eyes {\n  height: 2px;\n  background: #333;\n  border-radius: 2px;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: calc(100vh - 80px);\n    padding: 10px;\n  }\n  \n  .message {\n    max-width: 85%;\n  }\n  \n  .chat-input {\n    margin-top: 10px;\n  }\n  \n  textarea {\n    height: 60px;\n  }\n}\n</style>"],"mappings":"AAwFA,SAASA,QAAQ,EAAEC,UAAS,QAAS,MAAM;AAE3C,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,kBAAkB,EAAE;IACtB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAAC,MAAM,EAAE;MAClBO,QAAQ,EAAEC,KAAI,IAAKA,KAAK,CAACD,QAAQ;MACjCE,QAAQ,EAAED,KAAI,IAAKA,KAAK,CAACC,QAAQ;MACjCC,cAAc,EAAEF,KAAI,IAAKA,KAAK,CAACE;IACjC,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,GAAGV,UAAU,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAEnD,MAAMW,UAAUA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC,KAAK,IAAI,CAACJ,QAAQ,EAAE;MAE7C,MAAMK,IAAG,GAAI,IAAI,CAACV,SAAS;MAC3B,IAAI,CAACA,SAAQ,GAAI,EAAE;MACnB,MAAM,IAAI,CAACW,WAAW,CAACD,IAAI,CAAC;MAC5B,IAAI,CAACE,cAAc,CAAC,CAAC;IACvB,CAAC;IACDC,UAAUA,CAACC,SAAS,EAAE;MACpB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IACDP,cAAcA,CAAA,EAAG;MACf,IAAI,CAACQ,SAAS,CAAC,MAAM;QACnB,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACC,gBAAgB;QAC7CF,SAAS,CAACG,SAAQ,GAAIH,SAAS,CAACI,YAAY;MAC9C,CAAC,CAAC;IACJ,CAAC;IACDC,cAAcA,CAACC,MAAM,EAAE;MACrB,MAAMC,MAAK,GAAI;QACb,YAAY,EAAE,MAAM;QACpB,YAAY,EAAE,KAAK;QACnB,aAAa,EAAE,KAAK;QACpB,kBAAkB,EAAE,MAAM;QAC1B,iBAAiB,EAAE;MACrB,CAAC;MACD,OAAOA,MAAM,CAAC,GAAGD,MAAM,CAACE,IAAI,IAAIF,MAAM,CAAC7B,IAAG,IAAK6B,MAAM,CAACG,KAAK,EAAE,KAAK,IAAI;IACxE,CAAC;IACDC,YAAYA,CAACJ,MAAM,EAAE;MACnB;MACAK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,MAAM,CAAC;IAC1C;EACF,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,KAAK,EAAE;IACLjC,QAAQA,CAAA,EAAG;MACT,IAAI,CAACS,cAAc,CAAC,CAAC;IACvB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}