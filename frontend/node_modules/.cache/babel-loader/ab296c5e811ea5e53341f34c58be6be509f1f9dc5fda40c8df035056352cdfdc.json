{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport SparkService from '@/services/sparkAI';\n\n// 聊天状态管理模块\nexport default {\n  namespaced: true,\n  state: {\n    messages: [],\n    // 聊天消息列表\n    isTyping: false,\n    // 是否正在输入\n    currentEmotion: 'normal',\n    // 当前情绪状态\n    weatherInfo: null,\n    // 天气信息\n    soundEnabled: true // 声音开关\n  },\n  getters: {\n    // 获取消息列表\n    getMessages: state => state.messages,\n    // 获取输入状态\n    getTypingStatus: state => state.isTyping,\n    // 获取当前情绪\n    getCurrentEmotion: state => state.currentEmotion\n  },\n  mutations: {\n    // 添加消息\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message);\n    },\n    // 设置输入状态\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping;\n    },\n    // 更改情绪状态\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion;\n    },\n    // 设置天气信息\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info;\n    },\n    // 切换声音状态\n    TOGGLE_SOUND(state, enabled) {\n      state.soundEnabled = enabled;\n    },\n    // 清空消息\n    CLEAR_MESSAGES(state) {\n      state.messages = [];\n    }\n  },\n  actions: {\n    // 发送消息\n    async sendMessage({\n      commit,\n      state\n    }, {\n      content,\n      type = 'text'\n    }) {\n      // 添加用户消息\n      const userMessage = {\n        id: Date.now(),\n        content,\n        type,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      };\n      commit('ADD_MESSAGE', userMessage);\n\n      // 设置正在输入状态\n      commit('SET_TYPING', true);\n      try {\n        // 分析用户情绪\n        const emotion = analyzeEmotion(content);\n        if (emotion !== state.currentEmotion) {\n          commit('CHANGE_EMOTION', emotion);\n        }\n\n        // 检查是否是天气查询\n        const isWeatherQuery = checkWeatherQuery(content);\n        let responseContent = '';\n        if (isWeatherQuery) {\n          // 获取天气信息\n          const weatherData = await getWeatherInfo();\n          commit('SET_WEATHER_INFO', weatherData);\n          responseContent = `现在${weatherData.city}的天气是${weatherData.condition}，温度${weatherData.temperature}°C，${weatherData.description}`;\n        } else {\n          try {\n            // 使用AI服务生成回复\n            responseContent = await SparkService.generateResponse(content, emotion);\n          } catch (error) {\n            console.error('AI回复生成失败:', error);\n            // 使用本地回复作为备选\n            responseContent = generateResponse(content, emotion);\n          }\n        }\n\n        // 添加助手回复\n        const assistantMessage = {\n          id: Date.now() + 1,\n          content: responseContent,\n          type: 'text',\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        };\n\n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('ADD_MESSAGE', assistantMessage);\n          commit('SET_TYPING', false);\n        }, 1000);\n      } catch (error) {\n        console.error('处理消息失败:', error);\n\n        // 添加错误消息\n        const errorMessage = {\n          id: Date.now() + 1,\n          content: '抱歉，我遇到了一些问题，请稍后再试。',\n          type: 'text',\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: 'normal'\n        };\n        commit('ADD_MESSAGE', errorMessage);\n        commit('SET_TYPING', false);\n      }\n    },\n    // 清空聊天记录\n    clearChat({\n      commit\n    }) {\n      commit('CLEAR_MESSAGES');\n    }\n  }\n};\n\n/**\n * 分析用户消息情绪\n * @param {string} message 用户消息\n * @returns {string} 情绪类型\n */\nfunction analyzeEmotion(message) {\n  // 情绪关键词映射\n  const keywords = {\n    happy: ['开心', '高兴', '快乐', '真好', '哈哈', '嘻嘻', '太棒了', '好玩', '有趣', '喜欢', '笑死'],\n    sad: ['难过', '伤心', '不开心', '失望', '痛苦', '悲伤', '难受', '哭泣', '哭了', '委屈', '不想'],\n    excited: ['兴奋', '激动', '太爱了', '太厉害了', '惊喜', '哇', '太赞了', '太酷了', '很惊喜', '太帅了', '好厉害'],\n    angry: ['生气', '不爽', '讨厌', '烦人', '好烦', '火大', '气死', '混蛋', '蠢货', '笨蛋', '滚']\n  };\n\n  // 检查情绪关键词\n  for (const [emotion, words] of Object.entries(keywords)) {\n    if (words.some(word => message.includes(word))) {\n      return emotion;\n    }\n  }\n  return 'normal';\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否为天气查询\n */\nfunction checkWeatherQuery(message) {\n  const weatherKeywords = ['天气', '气温', '下雨', '下雪', '温度', '热不热', '冷不冷', '会下雨吗', '会下雪吗', '今天天气'];\n  return weatherKeywords.some(keyword => message.includes(keyword));\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<Object>} 天气数据\n */\nasync function getWeatherInfo() {\n  // 模拟API调用\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const conditions = ['晴朗', '多云', '阴天', '小雨', '大雨', '雷阵雨', '小雪', '大雪'];\n      const condition = conditions[Math.floor(Math.random() * conditions.length)];\n      const temperature = Math.floor(Math.random() * 25) + 5;\n      let description = '';\n      if (temperature > 25) {\n        description = '天气较热，请注意防暑。';\n      } else if (temperature < 10) {\n        description = '天气较冷，请注意保暖。';\n      } else {\n        description = '温度适宜，是个舒适的天气。';\n      }\n      if (condition.includes('雨')) {\n        description += '记得带伞哦！';\n      } else if (condition.includes('雪')) {\n        description += '记得添加衣物，注意保暖！';\n      } else if (condition === '晴朗') {\n        description += '阳光很好，是个出行的好天气！';\n      }\n      resolve({\n        city: '当前城市',\n        condition,\n        temperature,\n        description\n      });\n    }, 500);\n  });\n}\n\n/**\n * 根据情绪生成本地回复（备选方案）\n * @param {string} message 用户消息\n * @param {string} emotion 情绪状态\n * @returns {string} 生成的回复\n */\nfunction generateResponse(message, emotion) {\n  // 通用回复模板\n  const commonResponses = ['我理解你的想法，请继续告诉我更多。', '这个话题很有趣，我们可以深入探讨一下。', '我明白了，谢谢你的分享。', '这确实值得思考，我会记住的。', '我很高兴能和你聊天，有什么我能帮助你的吗？'];\n\n  // 情绪特定回复\n  const emotionResponses = {\n    happy: ['看到你这么开心，我也很高兴！', '你的好心情真有感染力~', '继续保持这份快乐吧！', '今天是个美好的日子呢！', '你的笑容一定很灿烂吧！'],\n    sad: ['别难过，我在这里陪着你。', '每个人都有不开心的时候，这很正常。', '愿你的心情能够好起来。', '有什么我能为你做的吗？', '分享出来会好受一些，需要我听你说说吗？'],\n    excited: ['你的热情真有感染力！', '我也为你感到兴奋！', '这真的太棒了！', '我能感受到你的激动心情！', '让我们一起分享这份喜悦吧！'],\n    angry: ['深呼吸，慢慢来。', '我理解你的感受，需要冷静一下吗？', '愿你能平静下来。', '有什么我能帮你的吗？', '我在这里听你倾诉。']\n  };\n\n  // 根据情绪选择回复\n  let responses = commonResponses;\n  if (emotion !== 'normal' && emotionResponses[emotion]) {\n    responses = [...emotionResponses[emotion], ...commonResponses];\n  }\n\n  // 随机选择一个回复\n  return responses[Math.floor(Math.random() * responses.length)];\n}","map":{"version":3,"names":["SparkService","namespaced","state","messages","isTyping","currentEmotion","weatherInfo","soundEnabled","getters","getMessages","getTypingStatus","getCurrentEmotion","mutations","ADD_MESSAGE","message","push","SET_TYPING","CHANGE_EMOTION","emotion","SET_WEATHER_INFO","info","TOGGLE_SOUND","enabled","CLEAR_MESSAGES","actions","sendMessage","commit","content","type","userMessage","id","Date","now","sender","timestamp","toISOString","analyzeEmotion","isWeatherQuery","checkWeatherQuery","responseContent","weatherData","getWeatherInfo","city","condition","temperature","description","generateResponse","error","console","assistantMessage","setTimeout","errorMessage","clearChat","keywords","happy","sad","excited","angry","words","Object","entries","some","word","includes","weatherKeywords","keyword","Promise","resolve","conditions","Math","floor","random","length","commonResponses","emotionResponses","responses"],"sources":["E:/code/PersonalBolg1/frontend/src/store/modules/chat.js"],"sourcesContent":["import SparkService from '@/services/sparkAI'\n\n// 聊天状态管理模块\nexport default {\n  namespaced: true,\n  \n  state: {\n    messages: [],           // 聊天消息列表\n    isTyping: false,        // 是否正在输入\n    currentEmotion: 'normal', // 当前情绪状态\n    weatherInfo: null,      // 天气信息\n    soundEnabled: true      // 声音开关\n  },\n  \n  getters: {\n    // 获取消息列表\n    getMessages: state => state.messages,\n    \n    // 获取输入状态\n    getTypingStatus: state => state.isTyping,\n    \n    // 获取当前情绪\n    getCurrentEmotion: state => state.currentEmotion\n  },\n  \n  mutations: {\n    // 添加消息\n    ADD_MESSAGE(state, message) {\n      state.messages.push(message)\n    },\n    \n    // 设置输入状态\n    SET_TYPING(state, isTyping) {\n      state.isTyping = isTyping\n    },\n    \n    // 更改情绪状态\n    CHANGE_EMOTION(state, emotion) {\n      state.currentEmotion = emotion\n    },\n    \n    // 设置天气信息\n    SET_WEATHER_INFO(state, info) {\n      state.weatherInfo = info\n    },\n    \n    // 切换声音状态\n    TOGGLE_SOUND(state, enabled) {\n      state.soundEnabled = enabled\n    },\n    \n    // 清空消息\n    CLEAR_MESSAGES(state) {\n      state.messages = []\n    }\n  },\n  \n  actions: {\n    // 发送消息\n    async sendMessage({ commit, state }, { content, type = 'text' }) {\n      // 添加用户消息\n      const userMessage = {\n        id: Date.now(),\n        content,\n        type,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      }\n      commit('ADD_MESSAGE', userMessage)\n      \n      // 设置正在输入状态\n      commit('SET_TYPING', true)\n      \n      try {\n        // 分析用户情绪\n        const emotion = analyzeEmotion(content)\n        if (emotion !== state.currentEmotion) {\n          commit('CHANGE_EMOTION', emotion)\n        }\n        \n        // 检查是否是天气查询\n        const isWeatherQuery = checkWeatherQuery(content)\n        let responseContent = ''\n        \n        if (isWeatherQuery) {\n          // 获取天气信息\n          const weatherData = await getWeatherInfo()\n          commit('SET_WEATHER_INFO', weatherData)\n          responseContent = `现在${weatherData.city}的天气是${weatherData.condition}，温度${weatherData.temperature}°C，${weatherData.description}`\n        } else {\n          try {\n            // 使用AI服务生成回复\n            responseContent = await SparkService.generateResponse(content, emotion)\n          } catch (error) {\n            console.error('AI回复生成失败:', error)\n            // 使用本地回复作为备选\n            responseContent = generateResponse(content, emotion)\n          }\n        }\n        \n        // 添加助手回复\n        const assistantMessage = {\n          id: Date.now() + 1,\n          content: responseContent,\n          type: 'text',\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: state.currentEmotion\n        }\n        \n        // 模拟打字延迟\n        setTimeout(() => {\n          commit('ADD_MESSAGE', assistantMessage)\n          commit('SET_TYPING', false)\n        }, 1000)\n      } catch (error) {\n        console.error('处理消息失败:', error)\n        \n        // 添加错误消息\n        const errorMessage = {\n          id: Date.now() + 1,\n          content: '抱歉，我遇到了一些问题，请稍后再试。',\n          type: 'text',\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          emotion: 'normal'\n        }\n        \n        commit('ADD_MESSAGE', errorMessage)\n        commit('SET_TYPING', false)\n      }\n    },\n    \n    // 清空聊天记录\n    clearChat({ commit }) {\n      commit('CLEAR_MESSAGES')\n    }\n  }\n}\n\n/**\n * 分析用户消息情绪\n * @param {string} message 用户消息\n * @returns {string} 情绪类型\n */\nfunction analyzeEmotion(message) {\n  // 情绪关键词映射\n  const keywords = {\n    happy: ['开心', '高兴', '快乐', '真好', '哈哈', '嘻嘻', '太棒了', '好玩', '有趣', '喜欢', '笑死'],\n    sad: ['难过', '伤心', '不开心', '失望', '痛苦', '悲伤', '难受', '哭泣', '哭了', '委屈', '不想'],\n    excited: ['兴奋', '激动', '太爱了', '太厉害了', '惊喜', '哇', '太赞了', '太酷了', '很惊喜', '太帅了', '好厉害'],\n    angry: ['生气', '不爽', '讨厌', '烦人', '好烦', '火大', '气死', '混蛋', '蠢货', '笨蛋', '滚']\n  }\n  \n  // 检查情绪关键词\n  for (const [emotion, words] of Object.entries(keywords)) {\n    if (words.some(word => message.includes(word))) {\n      return emotion\n    }\n  }\n  \n  return 'normal'\n}\n\n/**\n * 检查是否是天气查询\n * @param {string} message 用户消息\n * @returns {boolean} 是否为天气查询\n */\nfunction checkWeatherQuery(message) {\n  const weatherKeywords = ['天气', '气温', '下雨', '下雪', '温度', '热不热', '冷不冷', '会下雨吗', '会下雪吗', '今天天气']\n  return weatherKeywords.some(keyword => message.includes(keyword))\n}\n\n/**\n * 获取天气信息（模拟）\n * @returns {Promise<Object>} 天气数据\n */\nasync function getWeatherInfo() {\n  // 模拟API调用\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const conditions = ['晴朗', '多云', '阴天', '小雨', '大雨', '雷阵雨', '小雪', '大雪']\n      const condition = conditions[Math.floor(Math.random() * conditions.length)]\n      const temperature = Math.floor(Math.random() * 25) + 5\n      \n      let description = ''\n      if (temperature > 25) {\n        description = '天气较热，请注意防暑。'\n      } else if (temperature < 10) {\n        description = '天气较冷，请注意保暖。'\n      } else {\n        description = '温度适宜，是个舒适的天气。'\n      }\n      \n      if (condition.includes('雨')) {\n        description += '记得带伞哦！'\n      } else if (condition.includes('雪')) {\n        description += '记得添加衣物，注意保暖！'\n      } else if (condition === '晴朗') {\n        description += '阳光很好，是个出行的好天气！'\n      }\n      \n      resolve({\n        city: '当前城市',\n        condition,\n        temperature,\n        description\n      })\n    }, 500)\n  })\n}\n\n/**\n * 根据情绪生成本地回复（备选方案）\n * @param {string} message 用户消息\n * @param {string} emotion 情绪状态\n * @returns {string} 生成的回复\n */\nfunction generateResponse(message, emotion) {\n  // 通用回复模板\n  const commonResponses = [\n    '我理解你的想法，请继续告诉我更多。',\n    '这个话题很有趣，我们可以深入探讨一下。',\n    '我明白了，谢谢你的分享。',\n    '这确实值得思考，我会记住的。',\n    '我很高兴能和你聊天，有什么我能帮助你的吗？'\n  ]\n  \n  // 情绪特定回复\n  const emotionResponses = {\n    happy: [\n      '看到你这么开心，我也很高兴！',\n      '你的好心情真有感染力~',\n      '继续保持这份快乐吧！',\n      '今天是个美好的日子呢！',\n      '你的笑容一定很灿烂吧！'\n    ],\n    sad: [\n      '别难过，我在这里陪着你。',\n      '每个人都有不开心的时候，这很正常。',\n      '愿你的心情能够好起来。',\n      '有什么我能为你做的吗？',\n      '分享出来会好受一些，需要我听你说说吗？'\n    ],\n    excited: [\n      '你的热情真有感染力！',\n      '我也为你感到兴奋！',\n      '这真的太棒了！',\n      '我能感受到你的激动心情！',\n      '让我们一起分享这份喜悦吧！'\n    ],\n    angry: [\n      '深呼吸，慢慢来。',\n      '我理解你的感受，需要冷静一下吗？',\n      '愿你能平静下来。',\n      '有什么我能帮你的吗？',\n      '我在这里听你倾诉。'\n    ]\n  }\n  \n  // 根据情绪选择回复\n  let responses = commonResponses\n  if (emotion !== 'normal' && emotionResponses[emotion]) {\n    responses = [...emotionResponses[emotion], ...commonResponses]\n  }\n  \n  // 随机选择一个回复\n  return responses[Math.floor(Math.random() * responses.length)]\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}