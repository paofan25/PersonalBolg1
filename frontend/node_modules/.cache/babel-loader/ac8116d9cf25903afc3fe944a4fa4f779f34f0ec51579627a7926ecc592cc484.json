{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport CryptoJS from 'crypto-js';\nclass XfyunService {\n  constructor() {\n    this.appid = import.meta.env.VITE_APP_XFYUN_APPID;\n    this.apiKey = import.meta.env.VITE_APP_XFYUN_API_KEY;\n    this.apiSecret = import.meta.env.VITE_APP_XFYUN_API_SECRET;\n    this.domain = 'generalv3';\n    this.url = 'wss://spark-api.xf-yun.com/v3.1/chat';\n  }\n\n  // 生成鉴权url\n  getAuthUrl() {\n    const host = 'spark-api.xf-yun.com/v3.1/chat';\n    const date = new Date().toUTCString();\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  // 建立WebSocket连接\n  createWebSocket() {\n    return new Promise((resolve, reject) => {\n      const url = this.getAuthUrl();\n      const ws = new WebSocket(url);\n      ws.onopen = () => {\n        console.log('WebSocket连接已建立');\n        resolve(ws);\n      };\n      ws.onerror = error => {\n        console.error('WebSocket连接错误:', error);\n        reject(error);\n      };\n    });\n  }\n\n  // 发送消息并获取回复\n  async chat(messages) {\n    try {\n      const ws = await this.createWebSocket();\n      return new Promise((resolve, reject) => {\n        let responseText = '';\n        ws.onmessage = event => {\n          const response = JSON.parse(event.data);\n          if (response.header.code !== 0) {\n            console.error('请求错误:', response.header.message);\n            ws.close();\n            reject(new Error(response.header.message));\n            return;\n          }\n          const payload = response.payload;\n          const choices = payload.choices;\n          const status = choices.status;\n          const text = choices.text?.[0]?.content || '';\n          responseText += text;\n          if (status === 2) {\n            ws.close();\n            resolve(responseText);\n          }\n        };\n        const data = {\n          header: {\n            app_id: this.appid,\n            uid: '12345'\n          },\n          parameter: {\n            chat: {\n              domain: this.domain,\n              temperature: 0.5,\n              max_tokens: 2048\n            }\n          },\n          payload: {\n            message: {\n              text: messages\n            }\n          }\n        };\n        ws.send(JSON.stringify(data));\n      });\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      const response = await this.chat([{\n        role: 'user',\n        content: prompt\n      }]);\n      const emotion = response.toLowerCase().trim();\n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\nexport default new XfyunService();","map":{"version":3,"names":["CryptoJS","XfyunService","constructor","appid","import","meta","env","VITE_APP_XFYUN_APPID","apiKey","VITE_APP_XFYUN_API_KEY","apiSecret","VITE_APP_XFYUN_API_SECRET","domain","url","getAuthUrl","host","date","Date","toUTCString","signatureOrigin","signatureSha","HmacSHA256","signature","enc","Base64","stringify","authorizationOrigin","authorization","btoa","createWebSocket","Promise","resolve","reject","ws","WebSocket","onopen","console","log","onerror","error","chat","messages","responseText","onmessage","event","response","JSON","parse","data","header","code","message","close","Error","payload","choices","status","text","content","app_id","uid","parameter","temperature","max_tokens","send","analyzeEmotion","prompt","role","emotion","toLowerCase","trim","includes"],"sources":["E:/code/PersonalBolg1/frontend/src/services/xfyun.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nclass XfyunService {\n  constructor() {\n    this.appid = import.meta.env.VITE_APP_XFYUN_APPID;\n    this.apiKey = import.meta.env.VITE_APP_XFYUN_API_KEY;\n    this.apiSecret = import.meta.env.VITE_APP_XFYUN_API_SECRET;\n    this.domain = 'generalv3';\n    this.url = 'wss://spark-api.xf-yun.com/v3.1/chat';\n  }\n\n  // 生成鉴权url\n  getAuthUrl() {\n    const host = 'spark-api.xf-yun.com/v3.1/chat';\n    const date = new Date().toUTCString();\n    const signatureOrigin = `host: ${host}\\ndate: ${date}\\nGET /v3.1/chat HTTP/1.1`;\n    const signatureSha = CryptoJS.HmacSHA256(signatureOrigin, this.apiSecret);\n    const signature = CryptoJS.enc.Base64.stringify(signatureSha);\n    const authorizationOrigin = `api_key=\"${this.apiKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"${signature}\"`;\n    const authorization = btoa(authorizationOrigin);\n    return `${this.url}?authorization=${authorization}&date=${date}&host=${host}`;\n  }\n\n  // 建立WebSocket连接\n  createWebSocket() {\n    return new Promise((resolve, reject) => {\n      const url = this.getAuthUrl();\n      const ws = new WebSocket(url);\n      \n      ws.onopen = () => {\n        console.log('WebSocket连接已建立');\n        resolve(ws);\n      };\n      \n      ws.onerror = (error) => {\n        console.error('WebSocket连接错误:', error);\n        reject(error);\n      };\n    });\n  }\n\n  // 发送消息并获取回复\n  async chat(messages) {\n    try {\n      const ws = await this.createWebSocket();\n      \n      return new Promise((resolve, reject) => {\n        let responseText = '';\n        \n        ws.onmessage = (event) => {\n          const response = JSON.parse(event.data);\n          \n          if (response.header.code !== 0) {\n            console.error('请求错误:', response.header.message);\n            ws.close();\n            reject(new Error(response.header.message));\n            return;\n          }\n          \n          const payload = response.payload;\n          const choices = payload.choices;\n          const status = choices.status;\n          const text = choices.text?.[0]?.content || '';\n          \n          responseText += text;\n          \n          if (status === 2) {\n            ws.close();\n            resolve(responseText);\n          }\n        };\n        \n        const data = {\n          header: {\n            app_id: this.appid,\n            uid: '12345'\n          },\n          parameter: {\n            chat: {\n              domain: this.domain,\n              temperature: 0.5,\n              max_tokens: 2048\n            }\n          },\n          payload: {\n            message: {\n              text: messages\n            }\n          }\n        };\n        \n        ws.send(JSON.stringify(data));\n      });\n    } catch (error) {\n      console.error('聊天请求失败:', error);\n      throw error;\n    }\n  }\n\n  // 分析情绪\n  async analyzeEmotion(text) {\n    try {\n      const prompt = `请分析以下文本的情绪，只返回以下情绪类型之一：happy（开心）、sad（伤心）、worried（担忧）、excited（兴奋）、neutral（平静）。\n文本：${text}\n情绪：`;\n      \n      const response = await this.chat([{ role: 'user', content: prompt }]);\n      const emotion = response.toLowerCase().trim();\n      \n      if (['happy', 'sad', 'worried', 'excited', 'neutral'].includes(emotion)) {\n        return emotion;\n      }\n      return 'neutral';\n    } catch (error) {\n      console.error('情绪分析失败:', error);\n      return 'neutral';\n    }\n  }\n}\n\nexport default new XfyunService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}