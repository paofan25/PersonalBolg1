{"ast":null,"code":"/**\n * 讯飞服务\n * 用于集成讯飞开放平台API\n */\n\nclass XfyunService {\n  constructor() {\n    // 默认配置\n    const defaultConfig = {\n      appid: 'bb840282',\n      apiKey: '178baf6c84xxxxxxxxxxxxxxxx',\n      apiSecret: 'YjU3ZDk5ZGU1ODZkxxxxxxxx'\n    };\n\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appid: process.env.VUE_APP_XFYUN_APPID || defaultConfig.appid,\n        apiKey: process.env.VUE_APP_XFYUN_API_KEY || defaultConfig.apiKey,\n        apiSecret: process.env.VUE_APP_XFYUN_API_SECRET || defaultConfig.apiSecret\n      };\n      if (!this.config.appid || !this.config.apiKey || !this.config.apiSecret) {\n        console.log('讯飞服务配置缺失，使用默认值');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      this.config = defaultConfig;\n    }\n    console.log('XfyunService initialized with:', {\n      appid: this.config.appid,\n      apiKey: this.config.apiKey.substring(0, 10) + '...',\n      hasSecret: !!this.config.apiSecret\n    });\n  }\n\n  /**\n   * 合成语音\n   * @param {string} text 要合成的文本\n   * @returns {Promise<Object>} 合成结果\n   */\n  async textToSpeech(text) {\n    // 在实际应用中，这里应该调用讯飞API\n    // 由于未实际接入API，此处模拟返回结果\n\n    // 模拟API调用延迟\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // 返回一个模拟的成功结果\n    return {\n      success: true,\n      message: '语音合成成功'\n    };\n  }\n\n  /**\n   * 语音识别\n   * @param {Blob} audioData 音频数据\n   * @returns {Promise<Object>} 识别结果\n   */\n  async speechToText(audioData) {\n    // 在实际应用中，这里应该调用讯飞API\n    // 由于未实际接入API，此处模拟返回结果\n\n    // 模拟API调用延迟\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      success: true,\n      result: '这是一个模拟的语音识别结果'\n    };\n  }\n\n  /**\n   * 自然语言处理\n   * @param {string} text 输入文本\n   * @param {string} type 处理类型 (情感分析|文本纠错|文本分类等)\n   * @returns {Promise<Object>} 处理结果\n   */\n  async nlp(text, type) {\n    // 模拟NLP处理\n    // 根据不同的处理类型返回不同的模拟结果\n\n    await new Promise(resolve => setTimeout(resolve, 300));\n    switch (type) {\n      case 'sentiment':\n        return {\n          success: true,\n          sentiment: Math.random() > 0.5 ? 'positive' : 'negative',\n          score: Math.random().toFixed(2)\n        };\n      case 'correction':\n        return {\n          success: true,\n          corrected: text // 简单返回原文本\n        };\n      default:\n        return {\n          success: false,\n          message: '不支持的NLP类型'\n        };\n    }\n  }\n\n  /**\n   * 获取API鉴权参数\n   * @returns {Object} 鉴权参数\n   */\n  getAuthParams() {\n    const timestamp = Math.floor(Date.now() / 1000);\n    // 实际应用中这里应该生成真正的签名\n    // 这里只返回一个模拟值\n    return {\n      appid: this.config.appid,\n      timestamp,\n      signature: 'mock_signature'\n    };\n  }\n}\n\n// 导出实例\nconsole.log('XfyunService instance created');\nexport default XfyunService;","map":{"version":3,"names":["XfyunService","constructor","defaultConfig","appid","apiKey","apiSecret","config","process","env","VUE_APP_XFYUN_APPID","VUE_APP_XFYUN_API_KEY","VUE_APP_XFYUN_API_SECRET","console","log","error","substring","hasSecret","textToSpeech","text","Promise","resolve","setTimeout","success","message","speechToText","audioData","result","nlp","type","sentiment","Math","random","score","toFixed","corrected","getAuthParams","timestamp","floor","Date","now","signature"],"sources":["E:/code/PersonalBolg1/frontend/src/services/xfyun.js"],"sourcesContent":["/**\n * 讯飞服务\n * 用于集成讯飞开放平台API\n */\n\nclass XfyunService {\n  constructor() {\n    // 默认配置\n    const defaultConfig = {\n      appid: 'bb840282',\n      apiKey: '178baf6c84xxxxxxxxxxxxxxxx',\n      apiSecret: 'YjU3ZDk5ZGU1ODZkxxxxxxxx'\n    };\n\n    // 尝试从环境变量读取配置\n    try {\n      this.config = {\n        appid: process.env.VUE_APP_XFYUN_APPID || defaultConfig.appid,\n        apiKey: process.env.VUE_APP_XFYUN_API_KEY || defaultConfig.apiKey,\n        apiSecret: process.env.VUE_APP_XFYUN_API_SECRET || defaultConfig.apiSecret\n      };\n\n      if (!this.config.appid || !this.config.apiKey || !this.config.apiSecret) {\n        console.log('讯飞服务配置缺失，使用默认值');\n      }\n    } catch (error) {\n      console.error('环境变量加载错误:', error);\n      this.config = defaultConfig;\n    }\n\n    console.log('XfyunService initialized with:', {\n      appid: this.config.appid,\n      apiKey: this.config.apiKey.substring(0, 10) + '...',\n      hasSecret: !!this.config.apiSecret\n    });\n  }\n\n  /**\n   * 合成语音\n   * @param {string} text 要合成的文本\n   * @returns {Promise<Object>} 合成结果\n   */\n  async textToSpeech(text) {\n    // 在实际应用中，这里应该调用讯飞API\n    // 由于未实际接入API，此处模拟返回结果\n    \n    // 模拟API调用延迟\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // 返回一个模拟的成功结果\n    return {\n      success: true,\n      message: '语音合成成功'\n    };\n  }\n\n  /**\n   * 语音识别\n   * @param {Blob} audioData 音频数据\n   * @returns {Promise<Object>} 识别结果\n   */\n  async speechToText(audioData) {\n    // 在实际应用中，这里应该调用讯飞API\n    // 由于未实际接入API，此处模拟返回结果\n    \n    // 模拟API调用延迟\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      success: true,\n      result: '这是一个模拟的语音识别结果'\n    };\n  }\n\n  /**\n   * 自然语言处理\n   * @param {string} text 输入文本\n   * @param {string} type 处理类型 (情感分析|文本纠错|文本分类等)\n   * @returns {Promise<Object>} 处理结果\n   */\n  async nlp(text, type) {\n    // 模拟NLP处理\n    // 根据不同的处理类型返回不同的模拟结果\n    \n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    switch (type) {\n      case 'sentiment':\n        return {\n          success: true,\n          sentiment: Math.random() > 0.5 ? 'positive' : 'negative',\n          score: Math.random().toFixed(2)\n        };\n        \n      case 'correction':\n        return {\n          success: true,\n          corrected: text // 简单返回原文本\n        };\n        \n      default:\n        return {\n          success: false,\n          message: '不支持的NLP类型'\n        };\n    }\n  }\n\n  /**\n   * 获取API鉴权参数\n   * @returns {Object} 鉴权参数\n   */\n  getAuthParams() {\n    const timestamp = Math.floor(Date.now() / 1000);\n    // 实际应用中这里应该生成真正的签名\n    // 这里只返回一个模拟值\n    return {\n      appid: this.config.appid,\n      timestamp,\n      signature: 'mock_signature',\n    };\n  }\n}\n\n// 导出实例\nconsole.log('XfyunService instance created');\nexport default XfyunService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}